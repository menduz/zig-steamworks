// this file is autogenerated by generate.js - https://github.com/menduz/zig-steamworks
#include <cstdio>
#include <concepts>
#include <type_traits>
#import "steam_api.h"
#import "steam_gameserver.h"

extern "C" void* CustomSteamClientGetter() { return SteamClient(); }

extern "C" int steam_callback_size(int cb_id) {
switch(cb_id) {
  case 101: {
    return sizeof(SteamServersConnected_t); }
  case 102: {
    return sizeof(SteamServerConnectFailure_t); }
  case 103: {
    return sizeof(SteamServersDisconnected_t); }
  case 113: {
    return sizeof(ClientGameServerDeny_t); }
  case 117: {
    return sizeof(IPCFailure_t); }
  case 125: {
    return sizeof(LicensesUpdated_t); }
  case 143: {
    return sizeof(ValidateAuthTicketResponse_t); }
  case 152: {
    return sizeof(MicroTxnAuthorizationResponse_t); }
  case 154: {
    return sizeof(EncryptedAppTicketResponse_t); }
  case 163: {
    return sizeof(GetAuthSessionTicketResponse_t); }
  case 164: {
    return sizeof(GameWebCallback_t); }
  case 165: {
    return sizeof(StoreAuthURLResponse_t); }
  case 166: {
    return sizeof(MarketEligibilityResponse_t); }
  case 167: {
    return sizeof(DurationControl_t); }
  case 168: {
    return sizeof(GetTicketForWebApiResponse_t); }
  case 304: {
    return sizeof(PersonaStateChange_t); }
  case 331: {
    return sizeof(GameOverlayActivated_t); }
  case 332: {
    return sizeof(GameServerChangeRequested_t); }
  case 333: {
    return sizeof(GameLobbyJoinRequested_t); }
  case 334: {
    return sizeof(AvatarImageLoaded_t); }
  case 335: {
    return sizeof(ClanOfficerListResponse_t); }
  case 336: {
    return sizeof(FriendRichPresenceUpdate_t); }
  case 337: {
    return sizeof(GameRichPresenceJoinRequested_t); }
  case 338: {
    return sizeof(GameConnectedClanChatMsg_t); }
  case 339: {
    return sizeof(GameConnectedChatJoin_t); }
  case 340: {
    return sizeof(GameConnectedChatLeave_t); }
  case 341: {
    return sizeof(DownloadClanActivityCountsResult_t); }
  case 342: {
    return sizeof(JoinClanChatRoomCompletionResult_t); }
  case 343: {
    return sizeof(GameConnectedFriendChatMsg_t); }
  case 344: {
    return sizeof(FriendsGetFollowerCount_t); }
  case 345: {
    return sizeof(FriendsIsFollowing_t); }
  case 346: {
    return sizeof(FriendsEnumerateFollowingList_t); }
  case 347: {
    return sizeof(SetPersonaNameResponse_t); }
  case 348: {
    return sizeof(UnreadChatMessagesChanged_t); }
  case 349: {
    return sizeof(OverlayBrowserProtocolNavigation_t); }
  case 350: {
    return sizeof(EquippedProfileItemsChanged_t); }
  case 351: {
    return sizeof(EquippedProfileItems_t); }
  case 701: {
    return sizeof(IPCountry_t); }
  case 702: {
    return sizeof(LowBatteryPower_t); }
  case 703: {
    return sizeof(SteamAPICallCompleted_t); }
  case 704: {
    return sizeof(SteamShutdown_t); }
  case 705: {
    return sizeof(CheckFileSignature_t); }
  case 714: {
    return sizeof(GamepadTextInputDismissed_t); }
  case 736: {
    return sizeof(AppResumingFromSuspend_t); }
  case 738: {
    return sizeof(FloatingGamepadTextInputDismissed_t); }
  case 739: {
    return sizeof(FilterTextDictionaryChanged_t); }
  case 502: {
    return sizeof(FavoritesListChanged_t); }
  case 503: {
    return sizeof(LobbyInvite_t); }
  case 504: {
    return sizeof(LobbyEnter_t); }
  case 505: {
    return sizeof(LobbyDataUpdate_t); }
  case 506: {
    return sizeof(LobbyChatUpdate_t); }
  case 507: {
    return sizeof(LobbyChatMsg_t); }
  case 509: {
    return sizeof(LobbyGameCreated_t); }
  case 510: {
    return sizeof(LobbyMatchList_t); }
  case 512: {
    return sizeof(LobbyKicked_t); }
  case 513: {
    return sizeof(LobbyCreated_t); }
  case 515: {
    return sizeof(PSNGameBootInviteResult_t); }
  case 516: {
    return sizeof(FavoritesListAccountsUpdated_t); }
  case 5201: {
    return sizeof(SearchForGameProgressCallback_t); }
  case 5202: {
    return sizeof(SearchForGameResultCallback_t); }
  case 5211: {
    return sizeof(RequestPlayersForGameProgressCallback_t); }
  case 5212: {
    return sizeof(RequestPlayersForGameResultCallback_t); }
  case 5213: {
    return sizeof(RequestPlayersForGameFinalResultCallback_t); }
  case 5214: {
    return sizeof(SubmitPlayerResultResultCallback_t); }
  case 5215: {
    return sizeof(EndGameResultCallback_t); }
  case 5301: {
    return sizeof(JoinPartyCallback_t); }
  case 5302: {
    return sizeof(CreateBeaconCallback_t); }
  case 5303: {
    return sizeof(ReservationNotificationCallback_t); }
  case 5304: {
    return sizeof(ChangeNumOpenSlotsCallback_t); }
  case 5305: {
    return sizeof(AvailableBeaconLocationsUpdated_t); }
  case 5306: {
    return sizeof(ActiveBeaconsUpdated_t); }
  case 1307: {
    return sizeof(RemoteStorageFileShareResult_t); }
  case 1309: {
    return sizeof(RemoteStoragePublishFileResult_t); }
  case 1311: {
    return sizeof(RemoteStorageDeletePublishedFileResult_t); }
  case 1312: {
    return sizeof(RemoteStorageEnumerateUserPublishedFilesResult_t); }
  case 1313: {
    return sizeof(RemoteStorageSubscribePublishedFileResult_t); }
  case 1314: {
    return sizeof(RemoteStorageEnumerateUserSubscribedFilesResult_t); }
  case 1315: {
    return sizeof(RemoteStorageUnsubscribePublishedFileResult_t); }
  case 1316: {
    return sizeof(RemoteStorageUpdatePublishedFileResult_t); }
  case 1317: {
    return sizeof(RemoteStorageDownloadUGCResult_t); }
  case 1318: {
    return sizeof(RemoteStorageGetPublishedFileDetailsResult_t); }
  case 1319: {
    return sizeof(RemoteStorageEnumerateWorkshopFilesResult_t); }
  case 1320: {
    return sizeof(RemoteStorageGetPublishedItemVoteDetailsResult_t); }
  case 1321: {
    return sizeof(RemoteStoragePublishedFileSubscribed_t); }
  case 1322: {
    return sizeof(RemoteStoragePublishedFileUnsubscribed_t); }
  case 1323: {
    return sizeof(RemoteStoragePublishedFileDeleted_t); }
  case 1324: {
    return sizeof(RemoteStorageUpdateUserPublishedItemVoteResult_t); }
  case 1325: {
    return sizeof(RemoteStorageUserVoteDetails_t); }
  case 1326: {
    return sizeof(RemoteStorageEnumerateUserSharedWorkshopFilesResult_t); }
  case 1327: {
    return sizeof(RemoteStorageSetUserPublishedFileActionResult_t); }
  case 1328: {
    return sizeof(RemoteStorageEnumeratePublishedFilesByUserActionResult_t); }
  case 1329: {
    return sizeof(RemoteStoragePublishFileProgress_t); }
  case 1330: {
    return sizeof(RemoteStoragePublishedFileUpdated_t); }
  case 1331: {
    return sizeof(RemoteStorageFileWriteAsyncComplete_t); }
  case 1332: {
    return sizeof(RemoteStorageFileReadAsyncComplete_t); }
  case 1333: {
    return sizeof(RemoteStorageLocalFileChange_t); }
  case 1101: {
    return sizeof(UserStatsReceived_t); }
  case 1102: {
    return sizeof(UserStatsStored_t); }
  case 1103: {
    return sizeof(UserAchievementStored_t); }
  case 1104: {
    return sizeof(LeaderboardFindResult_t); }
  case 1105: {
    return sizeof(LeaderboardScoresDownloaded_t); }
  case 1106: {
    return sizeof(LeaderboardScoreUploaded_t); }
  case 1107: {
    return sizeof(NumberOfCurrentPlayers_t); }
  case 1108: {
    return sizeof(UserStatsUnloaded_t); }
  case 1109: {
    return sizeof(UserAchievementIconFetched_t); }
  case 1110: {
    return sizeof(GlobalAchievementPercentagesReady_t); }
  case 1111: {
    return sizeof(LeaderboardUGCSet_t); }
  case 1112: {
    return sizeof(GlobalStatsReceived_t); }
  case 1005: {
    return sizeof(DlcInstalled_t); }
  case 1014: {
    return sizeof(NewUrlLaunchParameters_t); }
  case 1021: {
    return sizeof(AppProofOfPurchaseKeyResponse_t); }
  case 1023: {
    return sizeof(FileDetailsResult_t); }
  case 1030: {
    return sizeof(TimedTrialStatus_t); }
  case 1202: {
    return sizeof(P2PSessionRequest_t); }
  case 1203: {
    return sizeof(P2PSessionConnectFail_t); }
  case 1201: {
    return sizeof(SocketStatusCallback_t); }
  case 2301: {
    return sizeof(ScreenshotReady_t); }
  case 2302: {
    return sizeof(ScreenshotRequested_t); }
  case 4001: {
    return sizeof(PlaybackStatusHasChanged_t); }
  case 4002: {
    return sizeof(VolumeHasChanged_t); }
  case 4101: {
    return sizeof(MusicPlayerRemoteWillActivate_t); }
  case 4102: {
    return sizeof(MusicPlayerRemoteWillDeactivate_t); }
  case 4103: {
    return sizeof(MusicPlayerRemoteToFront_t); }
  case 4104: {
    return sizeof(MusicPlayerWillQuit_t); }
  case 4105: {
    return sizeof(MusicPlayerWantsPlay_t); }
  case 4106: {
    return sizeof(MusicPlayerWantsPause_t); }
  case 4107: {
    return sizeof(MusicPlayerWantsPlayPrevious_t); }
  case 4108: {
    return sizeof(MusicPlayerWantsPlayNext_t); }
  case 4109: {
    return sizeof(MusicPlayerWantsShuffled_t); }
  case 4110: {
    return sizeof(MusicPlayerWantsLooped_t); }
  case 4011: {
    return sizeof(MusicPlayerWantsVolume_t); }
  case 4012: {
    return sizeof(MusicPlayerSelectsQueueEntry_t); }
  case 4013: {
    return sizeof(MusicPlayerSelectsPlaylistEntry_t); }
  case 4114: {
    return sizeof(MusicPlayerWantsPlayingRepeatStatus_t); }
  case 2101: {
    return sizeof(HTTPRequestCompleted_t); }
  case 2102: {
    return sizeof(HTTPRequestHeadersReceived_t); }
  case 2103: {
    return sizeof(HTTPRequestDataReceived_t); }
  case 2801: {
    return sizeof(SteamInputDeviceConnected_t); }
  case 2802: {
    return sizeof(SteamInputDeviceDisconnected_t); }
  case 2803: {
    return sizeof(SteamInputConfigurationLoaded_t); }
  case 2804: {
    return sizeof(SteamInputGamepadSlotChange_t); }
  case 3401: {
    return sizeof(SteamUGCQueryCompleted_t); }
  case 3402: {
    return sizeof(SteamUGCRequestUGCDetailsResult_t); }
  case 3403: {
    return sizeof(CreateItemResult_t); }
  case 3404: {
    return sizeof(SubmitItemUpdateResult_t); }
  case 3405: {
    return sizeof(ItemInstalled_t); }
  case 3406: {
    return sizeof(DownloadItemResult_t); }
  case 3407: {
    return sizeof(UserFavoriteItemsListChanged_t); }
  case 3408: {
    return sizeof(SetUserItemVoteResult_t); }
  case 3409: {
    return sizeof(GetUserItemVoteResult_t); }
  case 3410: {
    return sizeof(StartPlaytimeTrackingResult_t); }
  case 3411: {
    return sizeof(StopPlaytimeTrackingResult_t); }
  case 3412: {
    return sizeof(AddUGCDependencyResult_t); }
  case 3413: {
    return sizeof(RemoveUGCDependencyResult_t); }
  case 3414: {
    return sizeof(AddAppDependencyResult_t); }
  case 3415: {
    return sizeof(RemoveAppDependencyResult_t); }
  case 3416: {
    return sizeof(GetAppDependenciesResult_t); }
  case 3417: {
    return sizeof(DeleteItemResult_t); }
  case 3418: {
    return sizeof(UserSubscribedItemsListChanged_t); }
  case 3420: {
    return sizeof(WorkshopEULAStatus_t); }
  case 3901: {
    return sizeof(SteamAppInstalled_t); }
  case 3902: {
    return sizeof(SteamAppUninstalled_t); }
  case 4501: {
    return sizeof(HTML_BrowserReady_t); }
  case 4502: {
    return sizeof(HTML_NeedsPaint_t); }
  case 4503: {
    return sizeof(HTML_StartRequest_t); }
  case 4504: {
    return sizeof(HTML_CloseBrowser_t); }
  case 4505: {
    return sizeof(HTML_URLChanged_t); }
  case 4506: {
    return sizeof(HTML_FinishedRequest_t); }
  case 4507: {
    return sizeof(HTML_OpenLinkInNewTab_t); }
  case 4508: {
    return sizeof(HTML_ChangedTitle_t); }
  case 4509: {
    return sizeof(HTML_SearchResults_t); }
  case 4510: {
    return sizeof(HTML_CanGoBackAndForward_t); }
  case 4511: {
    return sizeof(HTML_HorizontalScroll_t); }
  case 4512: {
    return sizeof(HTML_VerticalScroll_t); }
  case 4513: {
    return sizeof(HTML_LinkAtPosition_t); }
  case 4514: {
    return sizeof(HTML_JSAlert_t); }
  case 4515: {
    return sizeof(HTML_JSConfirm_t); }
  case 4516: {
    return sizeof(HTML_FileOpenDialog_t); }
  case 4521: {
    return sizeof(HTML_NewWindow_t); }
  case 4522: {
    return sizeof(HTML_SetCursor_t); }
  case 4523: {
    return sizeof(HTML_StatusText_t); }
  case 4524: {
    return sizeof(HTML_ShowToolTip_t); }
  case 4525: {
    return sizeof(HTML_UpdateToolTip_t); }
  case 4526: {
    return sizeof(HTML_HideToolTip_t); }
  case 4527: {
    return sizeof(HTML_BrowserRestarted_t); }
  case 4700: {
    return sizeof(SteamInventoryResultReady_t); }
  case 4701: {
    return sizeof(SteamInventoryFullUpdate_t); }
  case 4702: {
    return sizeof(SteamInventoryDefinitionUpdate_t); }
  case 4703: {
    return sizeof(SteamInventoryEligiblePromoItemDefIDs_t); }
  case 4704: {
    return sizeof(SteamInventoryStartPurchaseResult_t); }
  case 4705: {
    return sizeof(SteamInventoryRequestPricesResult_t); }
  case 4611: {
    return sizeof(GetVideoURLResult_t); }
  case 4624: {
    return sizeof(GetOPFSettingsResult_t); }
  case 5001: {
    return sizeof(SteamParentalSettingsChanged_t); }
  case 5701: {
    return sizeof(SteamRemotePlaySessionConnected_t); }
  case 5702: {
    return sizeof(SteamRemotePlaySessionDisconnected_t); }
  case 5703: {
    return sizeof(SteamRemotePlayTogetherGuestInvite_t); }
  case 1251: {
    return sizeof(SteamNetworkingMessagesSessionRequest_t); }
  case 1252: {
    return sizeof(SteamNetworkingMessagesSessionFailed_t); }
  case 1221: {
    return sizeof(SteamNetConnectionStatusChangedCallback_t); }
  case 1222: {
    return sizeof(SteamNetAuthenticationStatus_t); }
  case 1281: {
    return sizeof(SteamRelayNetworkStatus_t); }
  case 201: {
    return sizeof(GSClientApprove_t); }
  case 202: {
    return sizeof(GSClientDeny_t); }
  case 203: {
    return sizeof(GSClientKick_t); }
  case 206: {
    return sizeof(GSClientAchievementStatus_t); }
  case 115: {
    return sizeof(GSPolicyResponse_t); }
  case 207: {
    return sizeof(GSGameplayStats_t); }
  case 208: {
    return sizeof(GSClientGroupStatus_t); }
  case 209: {
    return sizeof(GSReputation_t); }
  case 210: {
    return sizeof(AssociateWithClanResult_t); }
  case 211: {
    return sizeof(ComputeNewPlayerCompatibilityResult_t); }
  case 1800: {
    return sizeof(GSStatsReceived_t); }
  case 1801: {
    return sizeof(GSStatsStored_t); }
  // case 1223: {
  //   return sizeof(SteamNetworkingFakeIPResult_t); }
  default: return 0;
}
}
extern "C" int steam_callback_size_field(int cb_id, int field) {
switch(cb_id) {
  case 101: {
    struct SteamServersConnected_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 102: {
    struct SteamServerConnectFailure_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_bStillRetrying);
    default:}
    return 0; }
  case 103: {
    struct SteamServersDisconnected_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 113: {
    struct ClientGameServerDeny_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_uAppID);
    case 1: return sizeof(p_foo->m_unGameServerIP);
    case 2: return sizeof(p_foo->m_usGameServerPort);
    case 3: return sizeof(p_foo->m_bSecure);
    case 4: return sizeof(p_foo->m_uReason);
    default:}
    return 0; }
  case 117: {
    struct IPCFailure_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eFailureType);
    default:}
    return 0; }
  case 125: {
    struct LicensesUpdated_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 143: {
    struct ValidateAuthTicketResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_SteamID);
    case 1: return sizeof(p_foo->m_eAuthSessionResponse);
    case 2: return sizeof(p_foo->m_OwnerSteamID);
    default:}
    return 0; }
  case 152: {
    struct MicroTxnAuthorizationResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_unAppID);
    case 1: return sizeof(p_foo->m_ulOrderID);
    case 2: return sizeof(p_foo->m_bAuthorized);
    default:}
    return 0; }
  case 154: {
    struct EncryptedAppTicketResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 163: {
    struct GetAuthSessionTicketResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hAuthTicket);
    case 1: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 164: {
    struct GameWebCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_szURL);
    default:}
    return 0; }
  case 165: {
    struct StoreAuthURLResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_szURL);
    default:}
    return 0; }
  case 166: {
    struct MarketEligibilityResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bAllowed);
    case 1: return sizeof(p_foo->m_eNotAllowedReason);
    case 2: return sizeof(p_foo->m_rtAllowedAtTime);
    case 3: return sizeof(p_foo->m_cdaySteamGuardRequiredDays);
    case 4: return sizeof(p_foo->m_cdayNewDeviceCooldown);
    default:}
    return 0; }
  case 167: {
    struct DurationControl_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_appid);
    case 2: return sizeof(p_foo->m_bApplicable);
    case 3: return sizeof(p_foo->m_csecsLast5h);
    case 4: return sizeof(p_foo->m_progress);
    case 5: return sizeof(p_foo->m_notification);
    case 6: return sizeof(p_foo->m_csecsToday);
    case 7: return sizeof(p_foo->m_csecsRemaining);
    default:}
    return 0; }
  case 168: {
    struct GetTicketForWebApiResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hAuthTicket);
    case 1: return sizeof(p_foo->m_eResult);
    case 2: return sizeof(p_foo->m_cubTicket);
    case 3: return sizeof(p_foo->m_rgubTicket);
    default:}
    return 0; }
  case 304: {
    struct PersonaStateChange_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulSteamID);
    case 1: return sizeof(p_foo->m_nChangeFlags);
    default:}
    return 0; }
  case 331: {
    struct GameOverlayActivated_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bActive);
    case 1: return sizeof(p_foo->m_bUserInitiated);
    case 2: return sizeof(p_foo->m_nAppID);
    default:}
    return 0; }
  case 332: {
    struct GameServerChangeRequested_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_rgchServer);
    case 1: return sizeof(p_foo->m_rgchPassword);
    default:}
    return 0; }
  case 333: {
    struct GameLobbyJoinRequested_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDLobby);
    case 1: return sizeof(p_foo->m_steamIDFriend);
    default:}
    return 0; }
  case 334: {
    struct AvatarImageLoaded_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamID);
    case 1: return sizeof(p_foo->m_iImage);
    case 2: return sizeof(p_foo->m_iWide);
    case 3: return sizeof(p_foo->m_iTall);
    default:}
    return 0; }
  case 335: {
    struct ClanOfficerListResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDClan);
    case 1: return sizeof(p_foo->m_cOfficers);
    case 2: return sizeof(p_foo->m_bSuccess);
    default:}
    return 0; }
  case 336: {
    struct FriendRichPresenceUpdate_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDFriend);
    case 1: return sizeof(p_foo->m_nAppID);
    default:}
    return 0; }
  case 337: {
    struct GameRichPresenceJoinRequested_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDFriend);
    case 1: return sizeof(p_foo->m_rgchConnect);
    default:}
    return 0; }
  case 338: {
    struct GameConnectedClanChatMsg_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDClanChat);
    case 1: return sizeof(p_foo->m_steamIDUser);
    case 2: return sizeof(p_foo->m_iMessageID);
    default:}
    return 0; }
  case 339: {
    struct GameConnectedChatJoin_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDClanChat);
    case 1: return sizeof(p_foo->m_steamIDUser);
    default:}
    return 0; }
  case 340: {
    struct GameConnectedChatLeave_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDClanChat);
    case 1: return sizeof(p_foo->m_steamIDUser);
    case 2: return sizeof(p_foo->m_bKicked);
    case 3: return sizeof(p_foo->m_bDropped);
    default:}
    return 0; }
  case 341: {
    struct DownloadClanActivityCountsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bSuccess);
    default:}
    return 0; }
  case 342: {
    struct JoinClanChatRoomCompletionResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDClanChat);
    case 1: return sizeof(p_foo->m_eChatRoomEnterResponse);
    default:}
    return 0; }
  case 343: {
    struct GameConnectedFriendChatMsg_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDUser);
    case 1: return sizeof(p_foo->m_iMessageID);
    default:}
    return 0; }
  case 344: {
    struct FriendsGetFollowerCount_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_steamID);
    case 2: return sizeof(p_foo->m_nCount);
    default:}
    return 0; }
  case 345: {
    struct FriendsIsFollowing_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_steamID);
    case 2: return sizeof(p_foo->m_bIsFollowing);
    default:}
    return 0; }
  case 346: {
    struct FriendsEnumerateFollowingList_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_rgSteamID);
    case 2: return sizeof(p_foo->m_nResultsReturned);
    case 3: return sizeof(p_foo->m_nTotalResultCount);
    default:}
    return 0; }
  case 347: {
    struct SetPersonaNameResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bSuccess);
    case 1: return sizeof(p_foo->m_bLocalSuccess);
    case 2: return sizeof(p_foo->m_result);
    default:}
    return 0; }
  case 348: {
    struct UnreadChatMessagesChanged_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 349: {
    struct OverlayBrowserProtocolNavigation_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->rgchURI);
    default:}
    return 0; }
  case 350: {
    struct EquippedProfileItemsChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamID);
    default:}
    return 0; }
  case 351: {
    struct EquippedProfileItems_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_steamID);
    case 2: return sizeof(p_foo->m_bHasAnimatedAvatar);
    case 3: return sizeof(p_foo->m_bHasAvatarFrame);
    case 4: return sizeof(p_foo->m_bHasProfileModifier);
    case 5: return sizeof(p_foo->m_bHasProfileBackground);
    case 6: return sizeof(p_foo->m_bHasMiniProfileBackground);
    default:}
    return 0; }
  case 701: {
    struct IPCountry_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 702: {
    struct LowBatteryPower_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nMinutesBatteryLeft);
    default:}
    return 0; }
  case 703: {
    struct SteamAPICallCompleted_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hAsyncCall);
    case 1: return sizeof(p_foo->m_iCallback);
    case 2: return sizeof(p_foo->m_cubParam);
    default:}
    return 0; }
  case 704: {
    struct SteamShutdown_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 705: {
    struct CheckFileSignature_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eCheckFileSignature);
    default:}
    return 0; }
  case 714: {
    struct GamepadTextInputDismissed_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bSubmitted);
    case 1: return sizeof(p_foo->m_unSubmittedText);
    case 2: return sizeof(p_foo->m_unAppID);
    default:}
    return 0; }
  case 736: {
    struct AppResumingFromSuspend_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 738: {
    struct FloatingGamepadTextInputDismissed_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 739: {
    struct FilterTextDictionaryChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eLanguage);
    default:}
    return 0; }
  case 502: {
    struct FavoritesListChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nIP);
    case 1: return sizeof(p_foo->m_nQueryPort);
    case 2: return sizeof(p_foo->m_nConnPort);
    case 3: return sizeof(p_foo->m_nAppID);
    case 4: return sizeof(p_foo->m_nFlags);
    case 5: return sizeof(p_foo->m_bAdd);
    case 6: return sizeof(p_foo->m_unAccountId);
    default:}
    return 0; }
  case 503: {
    struct LobbyInvite_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulSteamIDUser);
    case 1: return sizeof(p_foo->m_ulSteamIDLobby);
    case 2: return sizeof(p_foo->m_ulGameID);
    default:}
    return 0; }
  case 504: {
    struct LobbyEnter_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulSteamIDLobby);
    case 1: return sizeof(p_foo->m_rgfChatPermissions);
    case 2: return sizeof(p_foo->m_bLocked);
    case 3: return sizeof(p_foo->m_EChatRoomEnterResponse);
    default:}
    return 0; }
  case 505: {
    struct LobbyDataUpdate_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulSteamIDLobby);
    case 1: return sizeof(p_foo->m_ulSteamIDMember);
    case 2: return sizeof(p_foo->m_bSuccess);
    default:}
    return 0; }
  case 506: {
    struct LobbyChatUpdate_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulSteamIDLobby);
    case 1: return sizeof(p_foo->m_ulSteamIDUserChanged);
    case 2: return sizeof(p_foo->m_ulSteamIDMakingChange);
    case 3: return sizeof(p_foo->m_rgfChatMemberStateChange);
    default:}
    return 0; }
  case 507: {
    struct LobbyChatMsg_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulSteamIDLobby);
    case 1: return sizeof(p_foo->m_ulSteamIDUser);
    case 2: return sizeof(p_foo->m_eChatEntryType);
    case 3: return sizeof(p_foo->m_iChatID);
    default:}
    return 0; }
  case 509: {
    struct LobbyGameCreated_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulSteamIDLobby);
    case 1: return sizeof(p_foo->m_ulSteamIDGameServer);
    case 2: return sizeof(p_foo->m_unIP);
    case 3: return sizeof(p_foo->m_usPort);
    default:}
    return 0; }
  case 510: {
    struct LobbyMatchList_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nLobbiesMatching);
    default:}
    return 0; }
  case 512: {
    struct LobbyKicked_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulSteamIDLobby);
    case 1: return sizeof(p_foo->m_ulSteamIDAdmin);
    case 2: return sizeof(p_foo->m_bKickedDueToDisconnect);
    default:}
    return 0; }
  case 513: {
    struct LobbyCreated_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_ulSteamIDLobby);
    default:}
    return 0; }
  case 515: {
    struct PSNGameBootInviteResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bGameBootInviteExists);
    case 1: return sizeof(p_foo->m_steamIDLobby);
    default:}
    return 0; }
  case 516: {
    struct FavoritesListAccountsUpdated_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 5201: {
    struct SearchForGameProgressCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ullSearchID);
    case 1: return sizeof(p_foo->m_eResult);
    case 2: return sizeof(p_foo->m_lobbyID);
    case 3: return sizeof(p_foo->m_steamIDEndedSearch);
    case 4: return sizeof(p_foo->m_nSecondsRemainingEstimate);
    case 5: return sizeof(p_foo->m_cPlayersSearching);
    default:}
    return 0; }
  case 5202: {
    struct SearchForGameResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ullSearchID);
    case 1: return sizeof(p_foo->m_eResult);
    case 2: return sizeof(p_foo->m_nCountPlayersInGame);
    case 3: return sizeof(p_foo->m_nCountAcceptedGame);
    case 4: return sizeof(p_foo->m_steamIDHost);
    case 5: return sizeof(p_foo->m_bFinalCallback);
    default:}
    return 0; }
  case 5211: {
    struct RequestPlayersForGameProgressCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_ullSearchID);
    default:}
    return 0; }
  case 5212: {
    struct RequestPlayersForGameResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_ullSearchID);
    case 2: return sizeof(p_foo->m_SteamIDPlayerFound);
    case 3: return sizeof(p_foo->m_SteamIDLobby);
    case 4: return sizeof(p_foo->m_ePlayerAcceptState);
    case 5: return sizeof(p_foo->m_nPlayerIndex);
    case 6: return sizeof(p_foo->m_nTotalPlayersFound);
    case 7: return sizeof(p_foo->m_nTotalPlayersAcceptedGame);
    case 8: return sizeof(p_foo->m_nSuggestedTeamIndex);
    case 9: return sizeof(p_foo->m_ullUniqueGameID);
    default:}
    return 0; }
  case 5213: {
    struct RequestPlayersForGameFinalResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_ullSearchID);
    case 2: return sizeof(p_foo->m_ullUniqueGameID);
    default:}
    return 0; }
  case 5214: {
    struct SubmitPlayerResultResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->ullUniqueGameID);
    case 2: return sizeof(p_foo->steamIDPlayer);
    default:}
    return 0; }
  case 5215: {
    struct EndGameResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->ullUniqueGameID);
    default:}
    return 0; }
  case 5301: {
    struct JoinPartyCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_ulBeaconID);
    case 2: return sizeof(p_foo->m_SteamIDBeaconOwner);
    case 3: return sizeof(p_foo->m_rgchConnectString);
    default:}
    return 0; }
  case 5302: {
    struct CreateBeaconCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_ulBeaconID);
    default:}
    return 0; }
  case 5303: {
    struct ReservationNotificationCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulBeaconID);
    case 1: return sizeof(p_foo->m_steamIDJoiner);
    default:}
    return 0; }
  case 5304: {
    struct ChangeNumOpenSlotsCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 5305: {
    struct AvailableBeaconLocationsUpdated_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 5306: {
    struct ActiveBeaconsUpdated_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 1307: {
    struct RemoteStorageFileShareResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_hFile);
    case 2: return sizeof(p_foo->m_rgchFilename);
    default:}
    return 0; }
  case 1309: {
    struct RemoteStoragePublishFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_bUserNeedsToAcceptWorkshopLegalAgreement);
    default:}
    return 0; }
  case 1311: {
    struct RemoteStorageDeletePublishedFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    default:}
    return 0; }
  case 1312: {
    struct RemoteStorageEnumerateUserPublishedFilesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nResultsReturned);
    case 2: return sizeof(p_foo->m_nTotalResultCount);
    case 3: return sizeof(p_foo->m_rgPublishedFileId);
    default:}
    return 0; }
  case 1313: {
    struct RemoteStorageSubscribePublishedFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    default:}
    return 0; }
  case 1314: {
    struct RemoteStorageEnumerateUserSubscribedFilesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nResultsReturned);
    case 2: return sizeof(p_foo->m_nTotalResultCount);
    case 3: return sizeof(p_foo->m_rgPublishedFileId);
    case 4: return sizeof(p_foo->m_rgRTimeSubscribed);
    default:}
    return 0; }
  case 1315: {
    struct RemoteStorageUnsubscribePublishedFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    default:}
    return 0; }
  case 1316: {
    struct RemoteStorageUpdatePublishedFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_bUserNeedsToAcceptWorkshopLegalAgreement);
    default:}
    return 0; }
  case 1317: {
    struct RemoteStorageDownloadUGCResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_hFile);
    case 2: return sizeof(p_foo->m_nAppID);
    case 3: return sizeof(p_foo->m_nSizeInBytes);
    case 4: return sizeof(p_foo->m_pchFileName);
    case 5: return sizeof(p_foo->m_ulSteamIDOwner);
    default:}
    return 0; }
  case 1318: {
    struct RemoteStorageGetPublishedFileDetailsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_nCreatorAppID);
    case 3: return sizeof(p_foo->m_nConsumerAppID);
    case 4: return sizeof(p_foo->m_rgchTitle);
    case 5: return sizeof(p_foo->m_rgchDescription);
    case 6: return sizeof(p_foo->m_hFile);
    case 7: return sizeof(p_foo->m_hPreviewFile);
    case 8: return sizeof(p_foo->m_ulSteamIDOwner);
    case 9: return sizeof(p_foo->m_rtimeCreated);
    case 10: return sizeof(p_foo->m_rtimeUpdated);
    case 11: return sizeof(p_foo->m_eVisibility);
    case 12: return sizeof(p_foo->m_bBanned);
    case 13: return sizeof(p_foo->m_rgchTags);
    case 14: return sizeof(p_foo->m_bTagsTruncated);
    case 15: return sizeof(p_foo->m_pchFileName);
    case 16: return sizeof(p_foo->m_nFileSize);
    case 17: return sizeof(p_foo->m_nPreviewFileSize);
    case 18: return sizeof(p_foo->m_rgchURL);
    case 19: return sizeof(p_foo->m_eFileType);
    case 20: return sizeof(p_foo->m_bAcceptedForUse);
    default:}
    return 0; }
  case 1319: {
    struct RemoteStorageEnumerateWorkshopFilesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nResultsReturned);
    case 2: return sizeof(p_foo->m_nTotalResultCount);
    case 3: return sizeof(p_foo->m_rgPublishedFileId);
    case 4: return sizeof(p_foo->m_rgScore);
    case 5: return sizeof(p_foo->m_nAppId);
    case 6: return sizeof(p_foo->m_unStartIndex);
    default:}
    return 0; }
  case 1320: {
    struct RemoteStorageGetPublishedItemVoteDetailsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_unPublishedFileId);
    case 2: return sizeof(p_foo->m_nVotesFor);
    case 3: return sizeof(p_foo->m_nVotesAgainst);
    case 4: return sizeof(p_foo->m_nReports);
    case 5: return sizeof(p_foo->m_fScore);
    default:}
    return 0; }
  case 1321: {
    struct RemoteStoragePublishedFileSubscribed_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nPublishedFileId);
    case 1: return sizeof(p_foo->m_nAppID);
    default:}
    return 0; }
  case 1322: {
    struct RemoteStoragePublishedFileUnsubscribed_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nPublishedFileId);
    case 1: return sizeof(p_foo->m_nAppID);
    default:}
    return 0; }
  case 1323: {
    struct RemoteStoragePublishedFileDeleted_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nPublishedFileId);
    case 1: return sizeof(p_foo->m_nAppID);
    default:}
    return 0; }
  case 1324: {
    struct RemoteStorageUpdateUserPublishedItemVoteResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    default:}
    return 0; }
  case 1325: {
    struct RemoteStorageUserVoteDetails_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_eVote);
    default:}
    return 0; }
  case 1326: {
    struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nResultsReturned);
    case 2: return sizeof(p_foo->m_nTotalResultCount);
    case 3: return sizeof(p_foo->m_rgPublishedFileId);
    default:}
    return 0; }
  case 1327: {
    struct RemoteStorageSetUserPublishedFileActionResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_eAction);
    default:}
    return 0; }
  case 1328: {
    struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_eAction);
    case 2: return sizeof(p_foo->m_nResultsReturned);
    case 3: return sizeof(p_foo->m_nTotalResultCount);
    case 4: return sizeof(p_foo->m_rgPublishedFileId);
    case 5: return sizeof(p_foo->m_rgRTimeUpdated);
    default:}
    return 0; }
  case 1329: {
    struct RemoteStoragePublishFileProgress_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_dPercentFile);
    case 1: return sizeof(p_foo->m_bPreview);
    default:}
    return 0; }
  case 1330: {
    struct RemoteStoragePublishedFileUpdated_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nPublishedFileId);
    case 1: return sizeof(p_foo->m_nAppID);
    case 2: return sizeof(p_foo->m_ulUnused);
    default:}
    return 0; }
  case 1331: {
    struct RemoteStorageFileWriteAsyncComplete_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 1332: {
    struct RemoteStorageFileReadAsyncComplete_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hFileReadAsync);
    case 1: return sizeof(p_foo->m_eResult);
    case 2: return sizeof(p_foo->m_nOffset);
    case 3: return sizeof(p_foo->m_cubRead);
    default:}
    return 0; }
  case 1333: {
    struct RemoteStorageLocalFileChange_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 1101: {
    struct UserStatsReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nGameID);
    case 1: return sizeof(p_foo->m_eResult);
    case 2: return sizeof(p_foo->m_steamIDUser);
    default:}
    return 0; }
  case 1102: {
    struct UserStatsStored_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nGameID);
    case 1: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 1103: {
    struct UserAchievementStored_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nGameID);
    case 1: return sizeof(p_foo->m_bGroupAchievement);
    case 2: return sizeof(p_foo->m_rgchAchievementName);
    case 3: return sizeof(p_foo->m_nCurProgress);
    case 4: return sizeof(p_foo->m_nMaxProgress);
    default:}
    return 0; }
  case 1104: {
    struct LeaderboardFindResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hSteamLeaderboard);
    case 1: return sizeof(p_foo->m_bLeaderboardFound);
    default:}
    return 0; }
  case 1105: {
    struct LeaderboardScoresDownloaded_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hSteamLeaderboard);
    case 1: return sizeof(p_foo->m_hSteamLeaderboardEntries);
    case 2: return sizeof(p_foo->m_cEntryCount);
    default:}
    return 0; }
  case 1106: {
    struct LeaderboardScoreUploaded_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bSuccess);
    case 1: return sizeof(p_foo->m_hSteamLeaderboard);
    case 2: return sizeof(p_foo->m_nScore);
    case 3: return sizeof(p_foo->m_bScoreChanged);
    case 4: return sizeof(p_foo->m_nGlobalRankNew);
    case 5: return sizeof(p_foo->m_nGlobalRankPrevious);
    default:}
    return 0; }
  case 1107: {
    struct NumberOfCurrentPlayers_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bSuccess);
    case 1: return sizeof(p_foo->m_cPlayers);
    default:}
    return 0; }
  case 1108: {
    struct UserStatsUnloaded_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDUser);
    default:}
    return 0; }
  case 1109: {
    struct UserAchievementIconFetched_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nGameID);
    case 1: return sizeof(p_foo->m_rgchAchievementName);
    case 2: return sizeof(p_foo->m_bAchieved);
    case 3: return sizeof(p_foo->m_nIconHandle);
    default:}
    return 0; }
  case 1110: {
    struct GlobalAchievementPercentagesReady_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nGameID);
    case 1: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 1111: {
    struct LeaderboardUGCSet_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_hSteamLeaderboard);
    default:}
    return 0; }
  case 1112: {
    struct GlobalStatsReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nGameID);
    case 1: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 1005: {
    struct DlcInstalled_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nAppID);
    default:}
    return 0; }
  case 1014: {
    struct NewUrlLaunchParameters_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 1021: {
    struct AppProofOfPurchaseKeyResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nAppID);
    case 2: return sizeof(p_foo->m_cchKeyLength);
    case 3: return sizeof(p_foo->m_rgchKey);
    default:}
    return 0; }
  case 1023: {
    struct FileDetailsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_ulFileSize);
    case 2: return sizeof(p_foo->m_FileSHA);
    case 3: return sizeof(p_foo->m_unFlags);
    default:}
    return 0; }
  case 1030: {
    struct TimedTrialStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_unAppID);
    case 1: return sizeof(p_foo->m_bIsOffline);
    case 2: return sizeof(p_foo->m_unSecondsAllowed);
    case 3: return sizeof(p_foo->m_unSecondsPlayed);
    default:}
    return 0; }
  case 1202: {
    struct P2PSessionRequest_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDRemote);
    default:}
    return 0; }
  case 1203: {
    struct P2PSessionConnectFail_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_steamIDRemote);
    case 1: return sizeof(p_foo->m_eP2PSessionError);
    default:}
    return 0; }
  case 1201: {
    struct SocketStatusCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hSocket);
    case 1: return sizeof(p_foo->m_hListenSocket);
    case 2: return sizeof(p_foo->m_steamIDRemote);
    case 3: return sizeof(p_foo->m_eSNetSocketState);
    default:}
    return 0; }
  case 2301: {
    struct ScreenshotReady_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hLocal);
    case 1: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 2302: {
    struct ScreenshotRequested_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4001: {
    struct PlaybackStatusHasChanged_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4002: {
    struct VolumeHasChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_flNewVolume);
    default:}
    return 0; }
  case 4101: {
    struct MusicPlayerRemoteWillActivate_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4102: {
    struct MusicPlayerRemoteWillDeactivate_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4103: {
    struct MusicPlayerRemoteToFront_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4104: {
    struct MusicPlayerWillQuit_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4105: {
    struct MusicPlayerWantsPlay_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4106: {
    struct MusicPlayerWantsPause_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4107: {
    struct MusicPlayerWantsPlayPrevious_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4108: {
    struct MusicPlayerWantsPlayNext_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4109: {
    struct MusicPlayerWantsShuffled_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bShuffled);
    default:}
    return 0; }
  case 4110: {
    struct MusicPlayerWantsLooped_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bLooped);
    default:}
    return 0; }
  case 4011: {
    struct MusicPlayerWantsVolume_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_flNewVolume);
    default:}
    return 0; }
  case 4012: {
    struct MusicPlayerSelectsQueueEntry_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->nID);
    default:}
    return 0; }
  case 4013: {
    struct MusicPlayerSelectsPlaylistEntry_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->nID);
    default:}
    return 0; }
  case 4114: {
    struct MusicPlayerWantsPlayingRepeatStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nPlayingRepeatStatus);
    default:}
    return 0; }
  case 2101: {
    struct HTTPRequestCompleted_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hRequest);
    case 1: return sizeof(p_foo->m_ulContextValue);
    case 2: return sizeof(p_foo->m_bRequestSuccessful);
    case 3: return sizeof(p_foo->m_eStatusCode);
    case 4: return sizeof(p_foo->m_unBodySize);
    default:}
    return 0; }
  case 2102: {
    struct HTTPRequestHeadersReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hRequest);
    case 1: return sizeof(p_foo->m_ulContextValue);
    default:}
    return 0; }
  case 2103: {
    struct HTTPRequestDataReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hRequest);
    case 1: return sizeof(p_foo->m_ulContextValue);
    case 2: return sizeof(p_foo->m_cOffset);
    case 3: return sizeof(p_foo->m_cBytesReceived);
    default:}
    return 0; }
  case 2801: {
    struct SteamInputDeviceConnected_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulConnectedDeviceHandle);
    default:}
    return 0; }
  case 2802: {
    struct SteamInputDeviceDisconnected_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_ulDisconnectedDeviceHandle);
    default:}
    return 0; }
  case 2803: {
    struct SteamInputConfigurationLoaded_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_unAppID);
    case 1: return sizeof(p_foo->m_ulDeviceHandle);
    case 2: return sizeof(p_foo->m_ulMappingCreator);
    case 3: return sizeof(p_foo->m_unMajorRevision);
    case 4: return sizeof(p_foo->m_unMinorRevision);
    case 5: return sizeof(p_foo->m_bUsesSteamInputAPI);
    case 6: return sizeof(p_foo->m_bUsesGamepadAPI);
    default:}
    return 0; }
  case 2804: {
    struct SteamInputGamepadSlotChange_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_unAppID);
    case 1: return sizeof(p_foo->m_ulDeviceHandle);
    case 2: return sizeof(p_foo->m_eDeviceType);
    case 3: return sizeof(p_foo->m_nOldGamepadSlot);
    case 4: return sizeof(p_foo->m_nNewGamepadSlot);
    default:}
    return 0; }
  case 3401: {
    struct SteamUGCQueryCompleted_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_handle);
    case 1: return sizeof(p_foo->m_eResult);
    case 2: return sizeof(p_foo->m_unNumResultsReturned);
    case 3: return sizeof(p_foo->m_unTotalMatchingResults);
    case 4: return sizeof(p_foo->m_bCachedData);
    case 5: return sizeof(p_foo->m_rgchNextCursor);
    default:}
    return 0; }
  case 3402: {
    struct SteamUGCRequestUGCDetailsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_details);
    case 1: return sizeof(p_foo->m_bCachedData);
    default:}
    return 0; }
  case 3403: {
    struct CreateItemResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_bUserNeedsToAcceptWorkshopLegalAgreement);
    default:}
    return 0; }
  case 3404: {
    struct SubmitItemUpdateResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_bUserNeedsToAcceptWorkshopLegalAgreement);
    case 2: return sizeof(p_foo->m_nPublishedFileId);
    default:}
    return 0; }
  case 3405: {
    struct ItemInstalled_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_unAppID);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    default:}
    return 0; }
  case 3406: {
    struct DownloadItemResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_unAppID);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 3407: {
    struct UserFavoriteItemsListChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nPublishedFileId);
    case 1: return sizeof(p_foo->m_eResult);
    case 2: return sizeof(p_foo->m_bWasAddRequest);
    default:}
    return 0; }
  case 3408: {
    struct SetUserItemVoteResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nPublishedFileId);
    case 1: return sizeof(p_foo->m_eResult);
    case 2: return sizeof(p_foo->m_bVoteUp);
    default:}
    return 0; }
  case 3409: {
    struct GetUserItemVoteResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nPublishedFileId);
    case 1: return sizeof(p_foo->m_eResult);
    case 2: return sizeof(p_foo->m_bVotedUp);
    case 3: return sizeof(p_foo->m_bVotedDown);
    case 4: return sizeof(p_foo->m_bVoteSkipped);
    default:}
    return 0; }
  case 3410: {
    struct StartPlaytimeTrackingResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 3411: {
    struct StopPlaytimeTrackingResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 3412: {
    struct AddUGCDependencyResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_nChildPublishedFileId);
    default:}
    return 0; }
  case 3413: {
    struct RemoveUGCDependencyResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_nChildPublishedFileId);
    default:}
    return 0; }
  case 3414: {
    struct AddAppDependencyResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_nAppID);
    default:}
    return 0; }
  case 3415: {
    struct RemoveAppDependencyResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_nAppID);
    default:}
    return 0; }
  case 3416: {
    struct GetAppDependenciesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    case 2: return sizeof(p_foo->m_rgAppIDs);
    case 3: return sizeof(p_foo->m_nNumAppDependencies);
    case 4: return sizeof(p_foo->m_nTotalNumAppDependencies);
    default:}
    return 0; }
  case 3417: {
    struct DeleteItemResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nPublishedFileId);
    default:}
    return 0; }
  case 3418: {
    struct UserSubscribedItemsListChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nAppID);
    default:}
    return 0; }
  case 3420: {
    struct WorkshopEULAStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nAppID);
    case 2: return sizeof(p_foo->m_unVersion);
    case 3: return sizeof(p_foo->m_rtAction);
    case 4: return sizeof(p_foo->m_bAccepted);
    case 5: return sizeof(p_foo->m_bNeedsAction);
    default:}
    return 0; }
  case 3901: {
    struct SteamAppInstalled_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nAppID);
    case 1: return sizeof(p_foo->m_iInstallFolderIndex);
    default:}
    return 0; }
  case 3902: {
    struct SteamAppUninstalled_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_nAppID);
    case 1: return sizeof(p_foo->m_iInstallFolderIndex);
    default:}
    return 0; }
  case 4501: {
    struct HTML_BrowserReady_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    default:}
    return 0; }
  case 4502: {
    struct HTML_NeedsPaint_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pBGRA);
    case 2: return sizeof(p_foo->unWide);
    case 3: return sizeof(p_foo->unTall);
    case 4: return sizeof(p_foo->unUpdateX);
    case 5: return sizeof(p_foo->unUpdateY);
    case 6: return sizeof(p_foo->unUpdateWide);
    case 7: return sizeof(p_foo->unUpdateTall);
    case 8: return sizeof(p_foo->unScrollX);
    case 9: return sizeof(p_foo->unScrollY);
    case 10: return sizeof(p_foo->flPageScale);
    case 11: return sizeof(p_foo->unPageSerial);
    default:}
    return 0; }
  case 4503: {
    struct HTML_StartRequest_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchURL);
    case 2: return sizeof(p_foo->pchTarget);
    case 3: return sizeof(p_foo->pchPostData);
    case 4: return sizeof(p_foo->bIsRedirect);
    default:}
    return 0; }
  case 4504: {
    struct HTML_CloseBrowser_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    default:}
    return 0; }
  case 4505: {
    struct HTML_URLChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchURL);
    case 2: return sizeof(p_foo->pchPostData);
    case 3: return sizeof(p_foo->bIsRedirect);
    case 4: return sizeof(p_foo->pchPageTitle);
    case 5: return sizeof(p_foo->bNewNavigation);
    default:}
    return 0; }
  case 4506: {
    struct HTML_FinishedRequest_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchURL);
    case 2: return sizeof(p_foo->pchPageTitle);
    default:}
    return 0; }
  case 4507: {
    struct HTML_OpenLinkInNewTab_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchURL);
    default:}
    return 0; }
  case 4508: {
    struct HTML_ChangedTitle_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchTitle);
    default:}
    return 0; }
  case 4509: {
    struct HTML_SearchResults_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->unResults);
    case 2: return sizeof(p_foo->unCurrentMatch);
    default:}
    return 0; }
  case 4510: {
    struct HTML_CanGoBackAndForward_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->bCanGoBack);
    case 2: return sizeof(p_foo->bCanGoForward);
    default:}
    return 0; }
  case 4511: {
    struct HTML_HorizontalScroll_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->unScrollMax);
    case 2: return sizeof(p_foo->unScrollCurrent);
    case 3: return sizeof(p_foo->flPageScale);
    case 4: return sizeof(p_foo->bVisible);
    case 5: return sizeof(p_foo->unPageSize);
    default:}
    return 0; }
  case 4512: {
    struct HTML_VerticalScroll_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->unScrollMax);
    case 2: return sizeof(p_foo->unScrollCurrent);
    case 3: return sizeof(p_foo->flPageScale);
    case 4: return sizeof(p_foo->bVisible);
    case 5: return sizeof(p_foo->unPageSize);
    default:}
    return 0; }
  case 4513: {
    struct HTML_LinkAtPosition_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->x);
    case 2: return sizeof(p_foo->y);
    case 3: return sizeof(p_foo->pchURL);
    case 4: return sizeof(p_foo->bInput);
    case 5: return sizeof(p_foo->bLiveLink);
    default:}
    return 0; }
  case 4514: {
    struct HTML_JSAlert_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchMessage);
    default:}
    return 0; }
  case 4515: {
    struct HTML_JSConfirm_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchMessage);
    default:}
    return 0; }
  case 4516: {
    struct HTML_FileOpenDialog_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchTitle);
    case 2: return sizeof(p_foo->pchInitialFile);
    default:}
    return 0; }
  case 4521: {
    struct HTML_NewWindow_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchURL);
    case 2: return sizeof(p_foo->unX);
    case 3: return sizeof(p_foo->unY);
    case 4: return sizeof(p_foo->unWide);
    case 5: return sizeof(p_foo->unTall);
    case 6: return sizeof(p_foo->unNewWindow_BrowserHandle_IGNORE);
    default:}
    return 0; }
  case 4522: {
    struct HTML_SetCursor_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->eMouseCursor);
    default:}
    return 0; }
  case 4523: {
    struct HTML_StatusText_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchMsg);
    default:}
    return 0; }
  case 4524: {
    struct HTML_ShowToolTip_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchMsg);
    default:}
    return 0; }
  case 4525: {
    struct HTML_UpdateToolTip_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->pchMsg);
    default:}
    return 0; }
  case 4526: {
    struct HTML_HideToolTip_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    default:}
    return 0; }
  case 4527: {
    struct HTML_BrowserRestarted_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->unBrowserHandle);
    case 1: return sizeof(p_foo->unOldBrowserHandle);
    default:}
    return 0; }
  case 4700: {
    struct SteamInventoryResultReady_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_handle);
    case 1: return sizeof(p_foo->m_result);
    default:}
    return 0; }
  case 4701: {
    struct SteamInventoryFullUpdate_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_handle);
    default:}
    return 0; }
  case 4702: {
    struct SteamInventoryDefinitionUpdate_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 4703: {
    struct SteamInventoryEligiblePromoItemDefIDs_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_result);
    case 1: return sizeof(p_foo->m_steamID);
    case 2: return sizeof(p_foo->m_numEligiblePromoItemDefs);
    case 3: return sizeof(p_foo->m_bCachedData);
    default:}
    return 0; }
  case 4704: {
    struct SteamInventoryStartPurchaseResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_result);
    case 1: return sizeof(p_foo->m_ulOrderID);
    case 2: return sizeof(p_foo->m_ulTransID);
    default:}
    return 0; }
  case 4705: {
    struct SteamInventoryRequestPricesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_result);
    case 1: return sizeof(p_foo->m_rgchCurrency);
    default:}
    return 0; }
  case 4611: {
    struct GetVideoURLResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_unVideoAppID);
    case 2: return sizeof(p_foo->m_rgchURL);
    default:}
    return 0; }
  case 4624: {
    struct GetOPFSettingsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_unVideoAppID);
    default:}
    return 0; }
  case 5001: {
    struct SteamParentalSettingsChanged_t    *p_foo = 0;
    switch(field) {
    default:}
    return 0; }
  case 5701: {
    struct SteamRemotePlaySessionConnected_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_unSessionID);
    default:}
    return 0; }
  case 5702: {
    struct SteamRemotePlaySessionDisconnected_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_unSessionID);
    default:}
    return 0; }
  case 5703: {
    struct SteamRemotePlayTogetherGuestInvite_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_szConnectURL);
    default:}
    return 0; }
  case 1251: {
    struct SteamNetworkingMessagesSessionRequest_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_identityRemote);
    default:}
    return 0; }
  case 1252: {
    struct SteamNetworkingMessagesSessionFailed_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_info);
    default:}
    return 0; }
  case 1221: {
    struct SteamNetConnectionStatusChangedCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_hConn);
    case 1: return sizeof(p_foo->m_info);
    case 2: return sizeof(p_foo->m_eOldState);
    default:}
    return 0; }
  case 1222: {
    struct SteamNetAuthenticationStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eAvail);
    case 1: return sizeof(p_foo->m_debugMsg);
    default:}
    return 0; }
  case 1281: {
    struct SteamRelayNetworkStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eAvail);
    case 1: return sizeof(p_foo->m_bPingMeasurementInProgress);
    case 2: return sizeof(p_foo->m_eAvailNetworkConfig);
    case 3: return sizeof(p_foo->m_eAvailAnyRelay);
    case 4: return sizeof(p_foo->m_debugMsg);
    default:}
    return 0; }
  case 201: {
    struct GSClientApprove_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_SteamID);
    case 1: return sizeof(p_foo->m_OwnerSteamID);
    default:}
    return 0; }
  case 202: {
    struct GSClientDeny_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_SteamID);
    case 1: return sizeof(p_foo->m_eDenyReason);
    case 2: return sizeof(p_foo->m_rgchOptionalText);
    default:}
    return 0; }
  case 203: {
    struct GSClientKick_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_SteamID);
    case 1: return sizeof(p_foo->m_eDenyReason);
    default:}
    return 0; }
  case 206: {
    struct GSClientAchievementStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_SteamID);
    case 1: return sizeof(p_foo->m_pchAchievement);
    case 2: return sizeof(p_foo->m_bUnlocked);
    default:}
    return 0; }
  case 115: {
    struct GSPolicyResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_bSecure);
    default:}
    return 0; }
  case 207: {
    struct GSGameplayStats_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_nRank);
    case 2: return sizeof(p_foo->m_unTotalConnects);
    case 3: return sizeof(p_foo->m_unTotalMinutesPlayed);
    default:}
    return 0; }
  case 208: {
    struct GSClientGroupStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_SteamIDUser);
    case 1: return sizeof(p_foo->m_SteamIDGroup);
    case 2: return sizeof(p_foo->m_bMember);
    case 3: return sizeof(p_foo->m_bOfficer);
    default:}
    return 0; }
  case 209: {
    struct GSReputation_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_unReputationScore);
    case 2: return sizeof(p_foo->m_bBanned);
    case 3: return sizeof(p_foo->m_unBannedIP);
    case 4: return sizeof(p_foo->m_usBannedPort);
    case 5: return sizeof(p_foo->m_ulBannedGameID);
    case 6: return sizeof(p_foo->m_unBanExpires);
    default:}
    return 0; }
  case 210: {
    struct AssociateWithClanResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    default:}
    return 0; }
  case 211: {
    struct ComputeNewPlayerCompatibilityResult_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_cPlayersThatDontLikeCandidate);
    case 2: return sizeof(p_foo->m_cPlayersThatCandidateDoesntLike);
    case 3: return sizeof(p_foo->m_cClanPlayersThatDontLikeCandidate);
    case 4: return sizeof(p_foo->m_SteamIDCandidate);
    default:}
    return 0; }
  case 1800: {
    struct GSStatsReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_steamIDUser);
    default:}
    return 0; }
  case 1801: {
    struct GSStatsStored_t    *p_foo = 0;
    switch(field) {
    case 0: return sizeof(p_foo->m_eResult);
    case 1: return sizeof(p_foo->m_steamIDUser);
    default:}
    return 0; }
  // case 1223: {
  //   struct SteamNetworkingFakeIPResult_t    *p_foo = 0;
  //   switch(field) {
  //   case 0: return sizeof(p_foo->m_eResult);
  //   case 1: return sizeof(p_foo->m_identity);
  //   case 2: return sizeof(p_foo->m_unIP);
  //   case 3: return sizeof(p_foo->m_unPorts);
  //   default:}
  //   return 0; }
  default: return 0;
}
}
extern "C" int steam_callback_align_field(int cb_id, int field) {
switch(cb_id) {
  case 101: {
    struct SteamServersConnected_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 102: {
    struct SteamServerConnectFailure_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_bStillRetrying);
    default: return 0;}
    return 0; }
  case 103: {
    struct SteamServersDisconnected_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 113: {
    struct ClientGameServerDeny_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_uAppID);
    case 1: return alignof(p_foo->m_unGameServerIP);
    case 2: return alignof(p_foo->m_usGameServerPort);
    case 3: return alignof(p_foo->m_bSecure);
    case 4: return alignof(p_foo->m_uReason);
    default: return 0;}
    return 0; }
  case 117: {
    struct IPCFailure_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eFailureType);
    default: return 0;}
    return 0; }
  case 125: {
    struct LicensesUpdated_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 143: {
    struct ValidateAuthTicketResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_SteamID);
    case 1: return alignof(p_foo->m_eAuthSessionResponse);
    case 2: return alignof(p_foo->m_OwnerSteamID);
    default: return 0;}
    return 0; }
  case 152: {
    struct MicroTxnAuthorizationResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_unAppID);
    case 1: return alignof(p_foo->m_ulOrderID);
    case 2: return alignof(p_foo->m_bAuthorized);
    default: return 0;}
    return 0; }
  case 154: {
    struct EncryptedAppTicketResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 163: {
    struct GetAuthSessionTicketResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hAuthTicket);
    case 1: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 164: {
    struct GameWebCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_szURL);
    default: return 0;}
    return 0; }
  case 165: {
    struct StoreAuthURLResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_szURL);
    default: return 0;}
    return 0; }
  case 166: {
    struct MarketEligibilityResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bAllowed);
    case 1: return alignof(p_foo->m_eNotAllowedReason);
    case 2: return alignof(p_foo->m_rtAllowedAtTime);
    case 3: return alignof(p_foo->m_cdaySteamGuardRequiredDays);
    case 4: return alignof(p_foo->m_cdayNewDeviceCooldown);
    default: return 0;}
    return 0; }
  case 167: {
    struct DurationControl_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_appid);
    case 2: return alignof(p_foo->m_bApplicable);
    case 3: return alignof(p_foo->m_csecsLast5h);
    case 4: return alignof(p_foo->m_progress);
    case 5: return alignof(p_foo->m_notification);
    case 6: return alignof(p_foo->m_csecsToday);
    case 7: return alignof(p_foo->m_csecsRemaining);
    default: return 0;}
    return 0; }
  case 168: {
    struct GetTicketForWebApiResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hAuthTicket);
    case 1: return alignof(p_foo->m_eResult);
    case 2: return alignof(p_foo->m_cubTicket);
    case 3: return alignof(p_foo->m_rgubTicket);
    default: return 0;}
    return 0; }
  case 304: {
    struct PersonaStateChange_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulSteamID);
    case 1: return alignof(p_foo->m_nChangeFlags);
    default: return 0;}
    return 0; }
  case 331: {
    struct GameOverlayActivated_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bActive);
    case 1: return alignof(p_foo->m_bUserInitiated);
    case 2: return alignof(p_foo->m_nAppID);
    default: return 0;}
    return 0; }
  case 332: {
    struct GameServerChangeRequested_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_rgchServer);
    case 1: return alignof(p_foo->m_rgchPassword);
    default: return 0;}
    return 0; }
  case 333: {
    struct GameLobbyJoinRequested_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDLobby);
    case 1: return alignof(p_foo->m_steamIDFriend);
    default: return 0;}
    return 0; }
  case 334: {
    struct AvatarImageLoaded_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamID);
    case 1: return alignof(p_foo->m_iImage);
    case 2: return alignof(p_foo->m_iWide);
    case 3: return alignof(p_foo->m_iTall);
    default: return 0;}
    return 0; }
  case 335: {
    struct ClanOfficerListResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDClan);
    case 1: return alignof(p_foo->m_cOfficers);
    case 2: return alignof(p_foo->m_bSuccess);
    default: return 0;}
    return 0; }
  case 336: {
    struct FriendRichPresenceUpdate_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDFriend);
    case 1: return alignof(p_foo->m_nAppID);
    default: return 0;}
    return 0; }
  case 337: {
    struct GameRichPresenceJoinRequested_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDFriend);
    case 1: return alignof(p_foo->m_rgchConnect);
    default: return 0;}
    return 0; }
  case 338: {
    struct GameConnectedClanChatMsg_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDClanChat);
    case 1: return alignof(p_foo->m_steamIDUser);
    case 2: return alignof(p_foo->m_iMessageID);
    default: return 0;}
    return 0; }
  case 339: {
    struct GameConnectedChatJoin_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDClanChat);
    case 1: return alignof(p_foo->m_steamIDUser);
    default: return 0;}
    return 0; }
  case 340: {
    struct GameConnectedChatLeave_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDClanChat);
    case 1: return alignof(p_foo->m_steamIDUser);
    case 2: return alignof(p_foo->m_bKicked);
    case 3: return alignof(p_foo->m_bDropped);
    default: return 0;}
    return 0; }
  case 341: {
    struct DownloadClanActivityCountsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bSuccess);
    default: return 0;}
    return 0; }
  case 342: {
    struct JoinClanChatRoomCompletionResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDClanChat);
    case 1: return alignof(p_foo->m_eChatRoomEnterResponse);
    default: return 0;}
    return 0; }
  case 343: {
    struct GameConnectedFriendChatMsg_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDUser);
    case 1: return alignof(p_foo->m_iMessageID);
    default: return 0;}
    return 0; }
  case 344: {
    struct FriendsGetFollowerCount_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_steamID);
    case 2: return alignof(p_foo->m_nCount);
    default: return 0;}
    return 0; }
  case 345: {
    struct FriendsIsFollowing_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_steamID);
    case 2: return alignof(p_foo->m_bIsFollowing);
    default: return 0;}
    return 0; }
  case 346: {
    struct FriendsEnumerateFollowingList_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_rgSteamID);
    case 2: return alignof(p_foo->m_nResultsReturned);
    case 3: return alignof(p_foo->m_nTotalResultCount);
    default: return 0;}
    return 0; }
  case 347: {
    struct SetPersonaNameResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bSuccess);
    case 1: return alignof(p_foo->m_bLocalSuccess);
    case 2: return alignof(p_foo->m_result);
    default: return 0;}
    return 0; }
  case 348: {
    struct UnreadChatMessagesChanged_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 349: {
    struct OverlayBrowserProtocolNavigation_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->rgchURI);
    default: return 0;}
    return 0; }
  case 350: {
    struct EquippedProfileItemsChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamID);
    default: return 0;}
    return 0; }
  case 351: {
    struct EquippedProfileItems_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_steamID);
    case 2: return alignof(p_foo->m_bHasAnimatedAvatar);
    case 3: return alignof(p_foo->m_bHasAvatarFrame);
    case 4: return alignof(p_foo->m_bHasProfileModifier);
    case 5: return alignof(p_foo->m_bHasProfileBackground);
    case 6: return alignof(p_foo->m_bHasMiniProfileBackground);
    default: return 0;}
    return 0; }
  case 701: {
    struct IPCountry_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 702: {
    struct LowBatteryPower_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nMinutesBatteryLeft);
    default: return 0;}
    return 0; }
  case 703: {
    struct SteamAPICallCompleted_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hAsyncCall);
    case 1: return alignof(p_foo->m_iCallback);
    case 2: return alignof(p_foo->m_cubParam);
    default: return 0;}
    return 0; }
  case 704: {
    struct SteamShutdown_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 705: {
    struct CheckFileSignature_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eCheckFileSignature);
    default: return 0;}
    return 0; }
  case 714: {
    struct GamepadTextInputDismissed_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bSubmitted);
    case 1: return alignof(p_foo->m_unSubmittedText);
    case 2: return alignof(p_foo->m_unAppID);
    default: return 0;}
    return 0; }
  case 736: {
    struct AppResumingFromSuspend_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 738: {
    struct FloatingGamepadTextInputDismissed_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 739: {
    struct FilterTextDictionaryChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eLanguage);
    default: return 0;}
    return 0; }
  case 502: {
    struct FavoritesListChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nIP);
    case 1: return alignof(p_foo->m_nQueryPort);
    case 2: return alignof(p_foo->m_nConnPort);
    case 3: return alignof(p_foo->m_nAppID);
    case 4: return alignof(p_foo->m_nFlags);
    case 5: return alignof(p_foo->m_bAdd);
    case 6: return alignof(p_foo->m_unAccountId);
    default: return 0;}
    return 0; }
  case 503: {
    struct LobbyInvite_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulSteamIDUser);
    case 1: return alignof(p_foo->m_ulSteamIDLobby);
    case 2: return alignof(p_foo->m_ulGameID);
    default: return 0;}
    return 0; }
  case 504: {
    struct LobbyEnter_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulSteamIDLobby);
    case 1: return alignof(p_foo->m_rgfChatPermissions);
    case 2: return alignof(p_foo->m_bLocked);
    case 3: return alignof(p_foo->m_EChatRoomEnterResponse);
    default: return 0;}
    return 0; }
  case 505: {
    struct LobbyDataUpdate_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulSteamIDLobby);
    case 1: return alignof(p_foo->m_ulSteamIDMember);
    case 2: return alignof(p_foo->m_bSuccess);
    default: return 0;}
    return 0; }
  case 506: {
    struct LobbyChatUpdate_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulSteamIDLobby);
    case 1: return alignof(p_foo->m_ulSteamIDUserChanged);
    case 2: return alignof(p_foo->m_ulSteamIDMakingChange);
    case 3: return alignof(p_foo->m_rgfChatMemberStateChange);
    default: return 0;}
    return 0; }
  case 507: {
    struct LobbyChatMsg_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulSteamIDLobby);
    case 1: return alignof(p_foo->m_ulSteamIDUser);
    case 2: return alignof(p_foo->m_eChatEntryType);
    case 3: return alignof(p_foo->m_iChatID);
    default: return 0;}
    return 0; }
  case 509: {
    struct LobbyGameCreated_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulSteamIDLobby);
    case 1: return alignof(p_foo->m_ulSteamIDGameServer);
    case 2: return alignof(p_foo->m_unIP);
    case 3: return alignof(p_foo->m_usPort);
    default: return 0;}
    return 0; }
  case 510: {
    struct LobbyMatchList_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nLobbiesMatching);
    default: return 0;}
    return 0; }
  case 512: {
    struct LobbyKicked_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulSteamIDLobby);
    case 1: return alignof(p_foo->m_ulSteamIDAdmin);
    case 2: return alignof(p_foo->m_bKickedDueToDisconnect);
    default: return 0;}
    return 0; }
  case 513: {
    struct LobbyCreated_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_ulSteamIDLobby);
    default: return 0;}
    return 0; }
  case 515: {
    struct PSNGameBootInviteResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bGameBootInviteExists);
    case 1: return alignof(p_foo->m_steamIDLobby);
    default: return 0;}
    return 0; }
  case 516: {
    struct FavoritesListAccountsUpdated_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 5201: {
    struct SearchForGameProgressCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ullSearchID);
    case 1: return alignof(p_foo->m_eResult);
    case 2: return alignof(p_foo->m_lobbyID);
    case 3: return alignof(p_foo->m_steamIDEndedSearch);
    case 4: return alignof(p_foo->m_nSecondsRemainingEstimate);
    case 5: return alignof(p_foo->m_cPlayersSearching);
    default: return 0;}
    return 0; }
  case 5202: {
    struct SearchForGameResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ullSearchID);
    case 1: return alignof(p_foo->m_eResult);
    case 2: return alignof(p_foo->m_nCountPlayersInGame);
    case 3: return alignof(p_foo->m_nCountAcceptedGame);
    case 4: return alignof(p_foo->m_steamIDHost);
    case 5: return alignof(p_foo->m_bFinalCallback);
    default: return 0;}
    return 0; }
  case 5211: {
    struct RequestPlayersForGameProgressCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_ullSearchID);
    default: return 0;}
    return 0; }
  case 5212: {
    struct RequestPlayersForGameResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_ullSearchID);
    case 2: return alignof(p_foo->m_SteamIDPlayerFound);
    case 3: return alignof(p_foo->m_SteamIDLobby);
    case 4: return alignof(p_foo->m_ePlayerAcceptState);
    case 5: return alignof(p_foo->m_nPlayerIndex);
    case 6: return alignof(p_foo->m_nTotalPlayersFound);
    case 7: return alignof(p_foo->m_nTotalPlayersAcceptedGame);
    case 8: return alignof(p_foo->m_nSuggestedTeamIndex);
    case 9: return alignof(p_foo->m_ullUniqueGameID);
    default: return 0;}
    return 0; }
  case 5213: {
    struct RequestPlayersForGameFinalResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_ullSearchID);
    case 2: return alignof(p_foo->m_ullUniqueGameID);
    default: return 0;}
    return 0; }
  case 5214: {
    struct SubmitPlayerResultResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->ullUniqueGameID);
    case 2: return alignof(p_foo->steamIDPlayer);
    default: return 0;}
    return 0; }
  case 5215: {
    struct EndGameResultCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->ullUniqueGameID);
    default: return 0;}
    return 0; }
  case 5301: {
    struct JoinPartyCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_ulBeaconID);
    case 2: return alignof(p_foo->m_SteamIDBeaconOwner);
    case 3: return alignof(p_foo->m_rgchConnectString);
    default: return 0;}
    return 0; }
  case 5302: {
    struct CreateBeaconCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_ulBeaconID);
    default: return 0;}
    return 0; }
  case 5303: {
    struct ReservationNotificationCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulBeaconID);
    case 1: return alignof(p_foo->m_steamIDJoiner);
    default: return 0;}
    return 0; }
  case 5304: {
    struct ChangeNumOpenSlotsCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 5305: {
    struct AvailableBeaconLocationsUpdated_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 5306: {
    struct ActiveBeaconsUpdated_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 1307: {
    struct RemoteStorageFileShareResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_hFile);
    case 2: return alignof(p_foo->m_rgchFilename);
    default: return 0;}
    return 0; }
  case 1309: {
    struct RemoteStoragePublishFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_bUserNeedsToAcceptWorkshopLegalAgreement);
    default: return 0;}
    return 0; }
  case 1311: {
    struct RemoteStorageDeletePublishedFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    default: return 0;}
    return 0; }
  case 1312: {
    struct RemoteStorageEnumerateUserPublishedFilesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nResultsReturned);
    case 2: return alignof(p_foo->m_nTotalResultCount);
    case 3: return alignof(p_foo->m_rgPublishedFileId);
    default: return 0;}
    return 0; }
  case 1313: {
    struct RemoteStorageSubscribePublishedFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    default: return 0;}
    return 0; }
  case 1314: {
    struct RemoteStorageEnumerateUserSubscribedFilesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nResultsReturned);
    case 2: return alignof(p_foo->m_nTotalResultCount);
    case 3: return alignof(p_foo->m_rgPublishedFileId);
    case 4: return alignof(p_foo->m_rgRTimeSubscribed);
    default: return 0;}
    return 0; }
  case 1315: {
    struct RemoteStorageUnsubscribePublishedFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    default: return 0;}
    return 0; }
  case 1316: {
    struct RemoteStorageUpdatePublishedFileResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_bUserNeedsToAcceptWorkshopLegalAgreement);
    default: return 0;}
    return 0; }
  case 1317: {
    struct RemoteStorageDownloadUGCResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_hFile);
    case 2: return alignof(p_foo->m_nAppID);
    case 3: return alignof(p_foo->m_nSizeInBytes);
    case 4: return alignof(p_foo->m_pchFileName);
    case 5: return alignof(p_foo->m_ulSteamIDOwner);
    default: return 0;}
    return 0; }
  case 1318: {
    struct RemoteStorageGetPublishedFileDetailsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_nCreatorAppID);
    case 3: return alignof(p_foo->m_nConsumerAppID);
    case 4: return alignof(p_foo->m_rgchTitle);
    case 5: return alignof(p_foo->m_rgchDescription);
    case 6: return alignof(p_foo->m_hFile);
    case 7: return alignof(p_foo->m_hPreviewFile);
    case 8: return alignof(p_foo->m_ulSteamIDOwner);
    case 9: return alignof(p_foo->m_rtimeCreated);
    case 10: return alignof(p_foo->m_rtimeUpdated);
    case 11: return alignof(p_foo->m_eVisibility);
    case 12: return alignof(p_foo->m_bBanned);
    case 13: return alignof(p_foo->m_rgchTags);
    case 14: return alignof(p_foo->m_bTagsTruncated);
    case 15: return alignof(p_foo->m_pchFileName);
    case 16: return alignof(p_foo->m_nFileSize);
    case 17: return alignof(p_foo->m_nPreviewFileSize);
    case 18: return alignof(p_foo->m_rgchURL);
    case 19: return alignof(p_foo->m_eFileType);
    case 20: return alignof(p_foo->m_bAcceptedForUse);
    default: return 0;}
    return 0; }
  case 1319: {
    struct RemoteStorageEnumerateWorkshopFilesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nResultsReturned);
    case 2: return alignof(p_foo->m_nTotalResultCount);
    case 3: return alignof(p_foo->m_rgPublishedFileId);
    case 4: return alignof(p_foo->m_rgScore);
    case 5: return alignof(p_foo->m_nAppId);
    case 6: return alignof(p_foo->m_unStartIndex);
    default: return 0;}
    return 0; }
  case 1320: {
    struct RemoteStorageGetPublishedItemVoteDetailsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_unPublishedFileId);
    case 2: return alignof(p_foo->m_nVotesFor);
    case 3: return alignof(p_foo->m_nVotesAgainst);
    case 4: return alignof(p_foo->m_nReports);
    case 5: return alignof(p_foo->m_fScore);
    default: return 0;}
    return 0; }
  case 1321: {
    struct RemoteStoragePublishedFileSubscribed_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nPublishedFileId);
    case 1: return alignof(p_foo->m_nAppID);
    default: return 0;}
    return 0; }
  case 1322: {
    struct RemoteStoragePublishedFileUnsubscribed_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nPublishedFileId);
    case 1: return alignof(p_foo->m_nAppID);
    default: return 0;}
    return 0; }
  case 1323: {
    struct RemoteStoragePublishedFileDeleted_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nPublishedFileId);
    case 1: return alignof(p_foo->m_nAppID);
    default: return 0;}
    return 0; }
  case 1324: {
    struct RemoteStorageUpdateUserPublishedItemVoteResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    default: return 0;}
    return 0; }
  case 1325: {
    struct RemoteStorageUserVoteDetails_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_eVote);
    default: return 0;}
    return 0; }
  case 1326: {
    struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nResultsReturned);
    case 2: return alignof(p_foo->m_nTotalResultCount);
    case 3: return alignof(p_foo->m_rgPublishedFileId);
    default: return 0;}
    return 0; }
  case 1327: {
    struct RemoteStorageSetUserPublishedFileActionResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_eAction);
    default: return 0;}
    return 0; }
  case 1328: {
    struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_eAction);
    case 2: return alignof(p_foo->m_nResultsReturned);
    case 3: return alignof(p_foo->m_nTotalResultCount);
    case 4: return alignof(p_foo->m_rgPublishedFileId);
    case 5: return alignof(p_foo->m_rgRTimeUpdated);
    default: return 0;}
    return 0; }
  case 1329: {
    struct RemoteStoragePublishFileProgress_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_dPercentFile);
    case 1: return alignof(p_foo->m_bPreview);
    default: return 0;}
    return 0; }
  case 1330: {
    struct RemoteStoragePublishedFileUpdated_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nPublishedFileId);
    case 1: return alignof(p_foo->m_nAppID);
    case 2: return alignof(p_foo->m_ulUnused);
    default: return 0;}
    return 0; }
  case 1331: {
    struct RemoteStorageFileWriteAsyncComplete_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 1332: {
    struct RemoteStorageFileReadAsyncComplete_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hFileReadAsync);
    case 1: return alignof(p_foo->m_eResult);
    case 2: return alignof(p_foo->m_nOffset);
    case 3: return alignof(p_foo->m_cubRead);
    default: return 0;}
    return 0; }
  case 1333: {
    struct RemoteStorageLocalFileChange_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 1101: {
    struct UserStatsReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nGameID);
    case 1: return alignof(p_foo->m_eResult);
    case 2: return alignof(p_foo->m_steamIDUser);
    default: return 0;}
    return 0; }
  case 1102: {
    struct UserStatsStored_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nGameID);
    case 1: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 1103: {
    struct UserAchievementStored_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nGameID);
    case 1: return alignof(p_foo->m_bGroupAchievement);
    case 2: return alignof(p_foo->m_rgchAchievementName);
    case 3: return alignof(p_foo->m_nCurProgress);
    case 4: return alignof(p_foo->m_nMaxProgress);
    default: return 0;}
    return 0; }
  case 1104: {
    struct LeaderboardFindResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hSteamLeaderboard);
    case 1: return alignof(p_foo->m_bLeaderboardFound);
    default: return 0;}
    return 0; }
  case 1105: {
    struct LeaderboardScoresDownloaded_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hSteamLeaderboard);
    case 1: return alignof(p_foo->m_hSteamLeaderboardEntries);
    case 2: return alignof(p_foo->m_cEntryCount);
    default: return 0;}
    return 0; }
  case 1106: {
    struct LeaderboardScoreUploaded_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bSuccess);
    case 1: return alignof(p_foo->m_hSteamLeaderboard);
    case 2: return alignof(p_foo->m_nScore);
    case 3: return alignof(p_foo->m_bScoreChanged);
    case 4: return alignof(p_foo->m_nGlobalRankNew);
    case 5: return alignof(p_foo->m_nGlobalRankPrevious);
    default: return 0;}
    return 0; }
  case 1107: {
    struct NumberOfCurrentPlayers_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bSuccess);
    case 1: return alignof(p_foo->m_cPlayers);
    default: return 0;}
    return 0; }
  case 1108: {
    struct UserStatsUnloaded_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDUser);
    default: return 0;}
    return 0; }
  case 1109: {
    struct UserAchievementIconFetched_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nGameID);
    case 1: return alignof(p_foo->m_rgchAchievementName);
    case 2: return alignof(p_foo->m_bAchieved);
    case 3: return alignof(p_foo->m_nIconHandle);
    default: return 0;}
    return 0; }
  case 1110: {
    struct GlobalAchievementPercentagesReady_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nGameID);
    case 1: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 1111: {
    struct LeaderboardUGCSet_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_hSteamLeaderboard);
    default: return 0;}
    return 0; }
  case 1112: {
    struct GlobalStatsReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nGameID);
    case 1: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 1005: {
    struct DlcInstalled_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nAppID);
    default: return 0;}
    return 0; }
  case 1014: {
    struct NewUrlLaunchParameters_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 1021: {
    struct AppProofOfPurchaseKeyResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nAppID);
    case 2: return alignof(p_foo->m_cchKeyLength);
    case 3: return alignof(p_foo->m_rgchKey);
    default: return 0;}
    return 0; }
  case 1023: {
    struct FileDetailsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_ulFileSize);
    case 2: return alignof(p_foo->m_FileSHA);
    case 3: return alignof(p_foo->m_unFlags);
    default: return 0;}
    return 0; }
  case 1030: {
    struct TimedTrialStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_unAppID);
    case 1: return alignof(p_foo->m_bIsOffline);
    case 2: return alignof(p_foo->m_unSecondsAllowed);
    case 3: return alignof(p_foo->m_unSecondsPlayed);
    default: return 0;}
    return 0; }
  case 1202: {
    struct P2PSessionRequest_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDRemote);
    default: return 0;}
    return 0; }
  case 1203: {
    struct P2PSessionConnectFail_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_steamIDRemote);
    case 1: return alignof(p_foo->m_eP2PSessionError);
    default: return 0;}
    return 0; }
  case 1201: {
    struct SocketStatusCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hSocket);
    case 1: return alignof(p_foo->m_hListenSocket);
    case 2: return alignof(p_foo->m_steamIDRemote);
    case 3: return alignof(p_foo->m_eSNetSocketState);
    default: return 0;}
    return 0; }
  case 2301: {
    struct ScreenshotReady_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hLocal);
    case 1: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 2302: {
    struct ScreenshotRequested_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4001: {
    struct PlaybackStatusHasChanged_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4002: {
    struct VolumeHasChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_flNewVolume);
    default: return 0;}
    return 0; }
  case 4101: {
    struct MusicPlayerRemoteWillActivate_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4102: {
    struct MusicPlayerRemoteWillDeactivate_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4103: {
    struct MusicPlayerRemoteToFront_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4104: {
    struct MusicPlayerWillQuit_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4105: {
    struct MusicPlayerWantsPlay_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4106: {
    struct MusicPlayerWantsPause_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4107: {
    struct MusicPlayerWantsPlayPrevious_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4108: {
    struct MusicPlayerWantsPlayNext_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4109: {
    struct MusicPlayerWantsShuffled_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bShuffled);
    default: return 0;}
    return 0; }
  case 4110: {
    struct MusicPlayerWantsLooped_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bLooped);
    default: return 0;}
    return 0; }
  case 4011: {
    struct MusicPlayerWantsVolume_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_flNewVolume);
    default: return 0;}
    return 0; }
  case 4012: {
    struct MusicPlayerSelectsQueueEntry_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->nID);
    default: return 0;}
    return 0; }
  case 4013: {
    struct MusicPlayerSelectsPlaylistEntry_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->nID);
    default: return 0;}
    return 0; }
  case 4114: {
    struct MusicPlayerWantsPlayingRepeatStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nPlayingRepeatStatus);
    default: return 0;}
    return 0; }
  case 2101: {
    struct HTTPRequestCompleted_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hRequest);
    case 1: return alignof(p_foo->m_ulContextValue);
    case 2: return alignof(p_foo->m_bRequestSuccessful);
    case 3: return alignof(p_foo->m_eStatusCode);
    case 4: return alignof(p_foo->m_unBodySize);
    default: return 0;}
    return 0; }
  case 2102: {
    struct HTTPRequestHeadersReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hRequest);
    case 1: return alignof(p_foo->m_ulContextValue);
    default: return 0;}
    return 0; }
  case 2103: {
    struct HTTPRequestDataReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hRequest);
    case 1: return alignof(p_foo->m_ulContextValue);
    case 2: return alignof(p_foo->m_cOffset);
    case 3: return alignof(p_foo->m_cBytesReceived);
    default: return 0;}
    return 0; }
  case 2801: {
    struct SteamInputDeviceConnected_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulConnectedDeviceHandle);
    default: return 0;}
    return 0; }
  case 2802: {
    struct SteamInputDeviceDisconnected_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_ulDisconnectedDeviceHandle);
    default: return 0;}
    return 0; }
  case 2803: {
    struct SteamInputConfigurationLoaded_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_unAppID);
    case 1: return alignof(p_foo->m_ulDeviceHandle);
    case 2: return alignof(p_foo->m_ulMappingCreator);
    case 3: return alignof(p_foo->m_unMajorRevision);
    case 4: return alignof(p_foo->m_unMinorRevision);
    case 5: return alignof(p_foo->m_bUsesSteamInputAPI);
    case 6: return alignof(p_foo->m_bUsesGamepadAPI);
    default: return 0;}
    return 0; }
  case 2804: {
    struct SteamInputGamepadSlotChange_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_unAppID);
    case 1: return alignof(p_foo->m_ulDeviceHandle);
    case 2: return alignof(p_foo->m_eDeviceType);
    case 3: return alignof(p_foo->m_nOldGamepadSlot);
    case 4: return alignof(p_foo->m_nNewGamepadSlot);
    default: return 0;}
    return 0; }
  case 3401: {
    struct SteamUGCQueryCompleted_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_handle);
    case 1: return alignof(p_foo->m_eResult);
    case 2: return alignof(p_foo->m_unNumResultsReturned);
    case 3: return alignof(p_foo->m_unTotalMatchingResults);
    case 4: return alignof(p_foo->m_bCachedData);
    case 5: return alignof(p_foo->m_rgchNextCursor);
    default: return 0;}
    return 0; }
  case 3402: {
    struct SteamUGCRequestUGCDetailsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_details);
    case 1: return alignof(p_foo->m_bCachedData);
    default: return 0;}
    return 0; }
  case 3403: {
    struct CreateItemResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_bUserNeedsToAcceptWorkshopLegalAgreement);
    default: return 0;}
    return 0; }
  case 3404: {
    struct SubmitItemUpdateResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_bUserNeedsToAcceptWorkshopLegalAgreement);
    case 2: return alignof(p_foo->m_nPublishedFileId);
    default: return 0;}
    return 0; }
  case 3405: {
    struct ItemInstalled_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_unAppID);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    default: return 0;}
    return 0; }
  case 3406: {
    struct DownloadItemResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_unAppID);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 3407: {
    struct UserFavoriteItemsListChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nPublishedFileId);
    case 1: return alignof(p_foo->m_eResult);
    case 2: return alignof(p_foo->m_bWasAddRequest);
    default: return 0;}
    return 0; }
  case 3408: {
    struct SetUserItemVoteResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nPublishedFileId);
    case 1: return alignof(p_foo->m_eResult);
    case 2: return alignof(p_foo->m_bVoteUp);
    default: return 0;}
    return 0; }
  case 3409: {
    struct GetUserItemVoteResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nPublishedFileId);
    case 1: return alignof(p_foo->m_eResult);
    case 2: return alignof(p_foo->m_bVotedUp);
    case 3: return alignof(p_foo->m_bVotedDown);
    case 4: return alignof(p_foo->m_bVoteSkipped);
    default: return 0;}
    return 0; }
  case 3410: {
    struct StartPlaytimeTrackingResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 3411: {
    struct StopPlaytimeTrackingResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 3412: {
    struct AddUGCDependencyResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_nChildPublishedFileId);
    default: return 0;}
    return 0; }
  case 3413: {
    struct RemoveUGCDependencyResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_nChildPublishedFileId);
    default: return 0;}
    return 0; }
  case 3414: {
    struct AddAppDependencyResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_nAppID);
    default: return 0;}
    return 0; }
  case 3415: {
    struct RemoveAppDependencyResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_nAppID);
    default: return 0;}
    return 0; }
  case 3416: {
    struct GetAppDependenciesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    case 2: return alignof(p_foo->m_rgAppIDs);
    case 3: return alignof(p_foo->m_nNumAppDependencies);
    case 4: return alignof(p_foo->m_nTotalNumAppDependencies);
    default: return 0;}
    return 0; }
  case 3417: {
    struct DeleteItemResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nPublishedFileId);
    default: return 0;}
    return 0; }
  case 3418: {
    struct UserSubscribedItemsListChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nAppID);
    default: return 0;}
    return 0; }
  case 3420: {
    struct WorkshopEULAStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nAppID);
    case 2: return alignof(p_foo->m_unVersion);
    case 3: return alignof(p_foo->m_rtAction);
    case 4: return alignof(p_foo->m_bAccepted);
    case 5: return alignof(p_foo->m_bNeedsAction);
    default: return 0;}
    return 0; }
  case 3901: {
    struct SteamAppInstalled_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nAppID);
    case 1: return alignof(p_foo->m_iInstallFolderIndex);
    default: return 0;}
    return 0; }
  case 3902: {
    struct SteamAppUninstalled_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_nAppID);
    case 1: return alignof(p_foo->m_iInstallFolderIndex);
    default: return 0;}
    return 0; }
  case 4501: {
    struct HTML_BrowserReady_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    default: return 0;}
    return 0; }
  case 4502: {
    struct HTML_NeedsPaint_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pBGRA);
    case 2: return alignof(p_foo->unWide);
    case 3: return alignof(p_foo->unTall);
    case 4: return alignof(p_foo->unUpdateX);
    case 5: return alignof(p_foo->unUpdateY);
    case 6: return alignof(p_foo->unUpdateWide);
    case 7: return alignof(p_foo->unUpdateTall);
    case 8: return alignof(p_foo->unScrollX);
    case 9: return alignof(p_foo->unScrollY);
    case 10: return alignof(p_foo->flPageScale);
    case 11: return alignof(p_foo->unPageSerial);
    default: return 0;}
    return 0; }
  case 4503: {
    struct HTML_StartRequest_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchURL);
    case 2: return alignof(p_foo->pchTarget);
    case 3: return alignof(p_foo->pchPostData);
    case 4: return alignof(p_foo->bIsRedirect);
    default: return 0;}
    return 0; }
  case 4504: {
    struct HTML_CloseBrowser_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    default: return 0;}
    return 0; }
  case 4505: {
    struct HTML_URLChanged_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchURL);
    case 2: return alignof(p_foo->pchPostData);
    case 3: return alignof(p_foo->bIsRedirect);
    case 4: return alignof(p_foo->pchPageTitle);
    case 5: return alignof(p_foo->bNewNavigation);
    default: return 0;}
    return 0; }
  case 4506: {
    struct HTML_FinishedRequest_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchURL);
    case 2: return alignof(p_foo->pchPageTitle);
    default: return 0;}
    return 0; }
  case 4507: {
    struct HTML_OpenLinkInNewTab_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchURL);
    default: return 0;}
    return 0; }
  case 4508: {
    struct HTML_ChangedTitle_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchTitle);
    default: return 0;}
    return 0; }
  case 4509: {
    struct HTML_SearchResults_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->unResults);
    case 2: return alignof(p_foo->unCurrentMatch);
    default: return 0;}
    return 0; }
  case 4510: {
    struct HTML_CanGoBackAndForward_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->bCanGoBack);
    case 2: return alignof(p_foo->bCanGoForward);
    default: return 0;}
    return 0; }
  case 4511: {
    struct HTML_HorizontalScroll_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->unScrollMax);
    case 2: return alignof(p_foo->unScrollCurrent);
    case 3: return alignof(p_foo->flPageScale);
    case 4: return alignof(p_foo->bVisible);
    case 5: return alignof(p_foo->unPageSize);
    default: return 0;}
    return 0; }
  case 4512: {
    struct HTML_VerticalScroll_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->unScrollMax);
    case 2: return alignof(p_foo->unScrollCurrent);
    case 3: return alignof(p_foo->flPageScale);
    case 4: return alignof(p_foo->bVisible);
    case 5: return alignof(p_foo->unPageSize);
    default: return 0;}
    return 0; }
  case 4513: {
    struct HTML_LinkAtPosition_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->x);
    case 2: return alignof(p_foo->y);
    case 3: return alignof(p_foo->pchURL);
    case 4: return alignof(p_foo->bInput);
    case 5: return alignof(p_foo->bLiveLink);
    default: return 0;}
    return 0; }
  case 4514: {
    struct HTML_JSAlert_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchMessage);
    default: return 0;}
    return 0; }
  case 4515: {
    struct HTML_JSConfirm_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchMessage);
    default: return 0;}
    return 0; }
  case 4516: {
    struct HTML_FileOpenDialog_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchTitle);
    case 2: return alignof(p_foo->pchInitialFile);
    default: return 0;}
    return 0; }
  case 4521: {
    struct HTML_NewWindow_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchURL);
    case 2: return alignof(p_foo->unX);
    case 3: return alignof(p_foo->unY);
    case 4: return alignof(p_foo->unWide);
    case 5: return alignof(p_foo->unTall);
    case 6: return alignof(p_foo->unNewWindow_BrowserHandle_IGNORE);
    default: return 0;}
    return 0; }
  case 4522: {
    struct HTML_SetCursor_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->eMouseCursor);
    default: return 0;}
    return 0; }
  case 4523: {
    struct HTML_StatusText_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchMsg);
    default: return 0;}
    return 0; }
  case 4524: {
    struct HTML_ShowToolTip_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchMsg);
    default: return 0;}
    return 0; }
  case 4525: {
    struct HTML_UpdateToolTip_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->pchMsg);
    default: return 0;}
    return 0; }
  case 4526: {
    struct HTML_HideToolTip_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    default: return 0;}
    return 0; }
  case 4527: {
    struct HTML_BrowserRestarted_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->unBrowserHandle);
    case 1: return alignof(p_foo->unOldBrowserHandle);
    default: return 0;}
    return 0; }
  case 4700: {
    struct SteamInventoryResultReady_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_handle);
    case 1: return alignof(p_foo->m_result);
    default: return 0;}
    return 0; }
  case 4701: {
    struct SteamInventoryFullUpdate_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_handle);
    default: return 0;}
    return 0; }
  case 4702: {
    struct SteamInventoryDefinitionUpdate_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 4703: {
    struct SteamInventoryEligiblePromoItemDefIDs_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_result);
    case 1: return alignof(p_foo->m_steamID);
    case 2: return alignof(p_foo->m_numEligiblePromoItemDefs);
    case 3: return alignof(p_foo->m_bCachedData);
    default: return 0;}
    return 0; }
  case 4704: {
    struct SteamInventoryStartPurchaseResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_result);
    case 1: return alignof(p_foo->m_ulOrderID);
    case 2: return alignof(p_foo->m_ulTransID);
    default: return 0;}
    return 0; }
  case 4705: {
    struct SteamInventoryRequestPricesResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_result);
    case 1: return alignof(p_foo->m_rgchCurrency);
    default: return 0;}
    return 0; }
  case 4611: {
    struct GetVideoURLResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_unVideoAppID);
    case 2: return alignof(p_foo->m_rgchURL);
    default: return 0;}
    return 0; }
  case 4624: {
    struct GetOPFSettingsResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_unVideoAppID);
    default: return 0;}
    return 0; }
  case 5001: {
    struct SteamParentalSettingsChanged_t    *p_foo = 0;
    switch(field) {
    default: return 0;}
    return 0; }
  case 5701: {
    struct SteamRemotePlaySessionConnected_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_unSessionID);
    default: return 0;}
    return 0; }
  case 5702: {
    struct SteamRemotePlaySessionDisconnected_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_unSessionID);
    default: return 0;}
    return 0; }
  case 5703: {
    struct SteamRemotePlayTogetherGuestInvite_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_szConnectURL);
    default: return 0;}
    return 0; }
  case 1251: {
    struct SteamNetworkingMessagesSessionRequest_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_identityRemote);
    default: return 0;}
    return 0; }
  case 1252: {
    struct SteamNetworkingMessagesSessionFailed_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_info);
    default: return 0;}
    return 0; }
  case 1221: {
    struct SteamNetConnectionStatusChangedCallback_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_hConn);
    case 1: return alignof(p_foo->m_info);
    case 2: return alignof(p_foo->m_eOldState);
    default: return 0;}
    return 0; }
  case 1222: {
    struct SteamNetAuthenticationStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eAvail);
    case 1: return alignof(p_foo->m_debugMsg);
    default: return 0;}
    return 0; }
  case 1281: {
    struct SteamRelayNetworkStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eAvail);
    case 1: return alignof(p_foo->m_bPingMeasurementInProgress);
    case 2: return alignof(p_foo->m_eAvailNetworkConfig);
    case 3: return alignof(p_foo->m_eAvailAnyRelay);
    case 4: return alignof(p_foo->m_debugMsg);
    default: return 0;}
    return 0; }
  case 201: {
    struct GSClientApprove_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_SteamID);
    case 1: return alignof(p_foo->m_OwnerSteamID);
    default: return 0;}
    return 0; }
  case 202: {
    struct GSClientDeny_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_SteamID);
    case 1: return alignof(p_foo->m_eDenyReason);
    case 2: return alignof(p_foo->m_rgchOptionalText);
    default: return 0;}
    return 0; }
  case 203: {
    struct GSClientKick_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_SteamID);
    case 1: return alignof(p_foo->m_eDenyReason);
    default: return 0;}
    return 0; }
  case 206: {
    struct GSClientAchievementStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_SteamID);
    case 1: return alignof(p_foo->m_pchAchievement);
    case 2: return alignof(p_foo->m_bUnlocked);
    default: return 0;}
    return 0; }
  case 115: {
    struct GSPolicyResponse_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_bSecure);
    default: return 0;}
    return 0; }
  case 207: {
    struct GSGameplayStats_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_nRank);
    case 2: return alignof(p_foo->m_unTotalConnects);
    case 3: return alignof(p_foo->m_unTotalMinutesPlayed);
    default: return 0;}
    return 0; }
  case 208: {
    struct GSClientGroupStatus_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_SteamIDUser);
    case 1: return alignof(p_foo->m_SteamIDGroup);
    case 2: return alignof(p_foo->m_bMember);
    case 3: return alignof(p_foo->m_bOfficer);
    default: return 0;}
    return 0; }
  case 209: {
    struct GSReputation_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_unReputationScore);
    case 2: return alignof(p_foo->m_bBanned);
    case 3: return alignof(p_foo->m_unBannedIP);
    case 4: return alignof(p_foo->m_usBannedPort);
    case 5: return alignof(p_foo->m_ulBannedGameID);
    case 6: return alignof(p_foo->m_unBanExpires);
    default: return 0;}
    return 0; }
  case 210: {
    struct AssociateWithClanResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    default: return 0;}
    return 0; }
  case 211: {
    struct ComputeNewPlayerCompatibilityResult_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_cPlayersThatDontLikeCandidate);
    case 2: return alignof(p_foo->m_cPlayersThatCandidateDoesntLike);
    case 3: return alignof(p_foo->m_cClanPlayersThatDontLikeCandidate);
    case 4: return alignof(p_foo->m_SteamIDCandidate);
    default: return 0;}
    return 0; }
  case 1800: {
    struct GSStatsReceived_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_steamIDUser);
    default: return 0;}
    return 0; }
  case 1801: {
    struct GSStatsStored_t    *p_foo = 0;
    switch(field) {
    case 0: return alignof(p_foo->m_eResult);
    case 1: return alignof(p_foo->m_steamIDUser);
    default: return 0;}
    return 0; }
  // case 1223: {
  //   struct SteamNetworkingFakeIPResult_t    *p_foo = 0;
  //   switch(field) {
  //   case 0: return alignof(p_foo->m_eResult);
  //   case 1: return alignof(p_foo->m_identity);
  //   case 2: return alignof(p_foo->m_unIP);
  //   case 3: return alignof(p_foo->m_unPorts);
  //   default: return 0;}
  //   return 0; }
  default: return 0;
}
}
extern "C" int steam_callback_align(int cb_id) {
switch(cb_id) {
  case 101: return alignof(SteamServersConnected_t);
  case 102: return alignof(SteamServerConnectFailure_t);
  case 103: return alignof(SteamServersDisconnected_t);
  case 113: return alignof(ClientGameServerDeny_t);
  case 117: return alignof(IPCFailure_t);
  case 125: return alignof(LicensesUpdated_t);
  case 143: return alignof(ValidateAuthTicketResponse_t);
  case 152: return alignof(MicroTxnAuthorizationResponse_t);
  case 154: return alignof(EncryptedAppTicketResponse_t);
  case 163: return alignof(GetAuthSessionTicketResponse_t);
  case 164: return alignof(GameWebCallback_t);
  case 165: return alignof(StoreAuthURLResponse_t);
  case 166: return alignof(MarketEligibilityResponse_t);
  case 167: return alignof(DurationControl_t);
  case 168: return alignof(GetTicketForWebApiResponse_t);
  case 304: return alignof(PersonaStateChange_t);
  case 331: return alignof(GameOverlayActivated_t);
  case 332: return alignof(GameServerChangeRequested_t);
  case 333: return alignof(GameLobbyJoinRequested_t);
  case 334: return alignof(AvatarImageLoaded_t);
  case 335: return alignof(ClanOfficerListResponse_t);
  case 336: return alignof(FriendRichPresenceUpdate_t);
  case 337: return alignof(GameRichPresenceJoinRequested_t);
  case 338: return alignof(GameConnectedClanChatMsg_t);
  case 339: return alignof(GameConnectedChatJoin_t);
  case 340: return alignof(GameConnectedChatLeave_t);
  case 341: return alignof(DownloadClanActivityCountsResult_t);
  case 342: return alignof(JoinClanChatRoomCompletionResult_t);
  case 343: return alignof(GameConnectedFriendChatMsg_t);
  case 344: return alignof(FriendsGetFollowerCount_t);
  case 345: return alignof(FriendsIsFollowing_t);
  case 346: return alignof(FriendsEnumerateFollowingList_t);
  case 347: return alignof(SetPersonaNameResponse_t);
  case 348: return alignof(UnreadChatMessagesChanged_t);
  case 349: return alignof(OverlayBrowserProtocolNavigation_t);
  case 350: return alignof(EquippedProfileItemsChanged_t);
  case 351: return alignof(EquippedProfileItems_t);
  case 701: return alignof(IPCountry_t);
  case 702: return alignof(LowBatteryPower_t);
  case 703: return alignof(SteamAPICallCompleted_t);
  case 704: return alignof(SteamShutdown_t);
  case 705: return alignof(CheckFileSignature_t);
  case 714: return alignof(GamepadTextInputDismissed_t);
  case 736: return alignof(AppResumingFromSuspend_t);
  case 738: return alignof(FloatingGamepadTextInputDismissed_t);
  case 739: return alignof(FilterTextDictionaryChanged_t);
  case 502: return alignof(FavoritesListChanged_t);
  case 503: return alignof(LobbyInvite_t);
  case 504: return alignof(LobbyEnter_t);
  case 505: return alignof(LobbyDataUpdate_t);
  case 506: return alignof(LobbyChatUpdate_t);
  case 507: return alignof(LobbyChatMsg_t);
  case 509: return alignof(LobbyGameCreated_t);
  case 510: return alignof(LobbyMatchList_t);
  case 512: return alignof(LobbyKicked_t);
  case 513: return alignof(LobbyCreated_t);
  case 515: return alignof(PSNGameBootInviteResult_t);
  case 516: return alignof(FavoritesListAccountsUpdated_t);
  case 5201: return alignof(SearchForGameProgressCallback_t);
  case 5202: return alignof(SearchForGameResultCallback_t);
  case 5211: return alignof(RequestPlayersForGameProgressCallback_t);
  case 5212: return alignof(RequestPlayersForGameResultCallback_t);
  case 5213: return alignof(RequestPlayersForGameFinalResultCallback_t);
  case 5214: return alignof(SubmitPlayerResultResultCallback_t);
  case 5215: return alignof(EndGameResultCallback_t);
  case 5301: return alignof(JoinPartyCallback_t);
  case 5302: return alignof(CreateBeaconCallback_t);
  case 5303: return alignof(ReservationNotificationCallback_t);
  case 5304: return alignof(ChangeNumOpenSlotsCallback_t);
  case 5305: return alignof(AvailableBeaconLocationsUpdated_t);
  case 5306: return alignof(ActiveBeaconsUpdated_t);
  case 1307: return alignof(RemoteStorageFileShareResult_t);
  case 1309: return alignof(RemoteStoragePublishFileResult_t);
  case 1311: return alignof(RemoteStorageDeletePublishedFileResult_t);
  case 1312: return alignof(RemoteStorageEnumerateUserPublishedFilesResult_t);
  case 1313: return alignof(RemoteStorageSubscribePublishedFileResult_t);
  case 1314: return alignof(RemoteStorageEnumerateUserSubscribedFilesResult_t);
  case 1315: return alignof(RemoteStorageUnsubscribePublishedFileResult_t);
  case 1316: return alignof(RemoteStorageUpdatePublishedFileResult_t);
  case 1317: return alignof(RemoteStorageDownloadUGCResult_t);
  case 1318: return alignof(RemoteStorageGetPublishedFileDetailsResult_t);
  case 1319: return alignof(RemoteStorageEnumerateWorkshopFilesResult_t);
  case 1320: return alignof(RemoteStorageGetPublishedItemVoteDetailsResult_t);
  case 1321: return alignof(RemoteStoragePublishedFileSubscribed_t);
  case 1322: return alignof(RemoteStoragePublishedFileUnsubscribed_t);
  case 1323: return alignof(RemoteStoragePublishedFileDeleted_t);
  case 1324: return alignof(RemoteStorageUpdateUserPublishedItemVoteResult_t);
  case 1325: return alignof(RemoteStorageUserVoteDetails_t);
  case 1326: return alignof(RemoteStorageEnumerateUserSharedWorkshopFilesResult_t);
  case 1327: return alignof(RemoteStorageSetUserPublishedFileActionResult_t);
  case 1328: return alignof(RemoteStorageEnumeratePublishedFilesByUserActionResult_t);
  case 1329: return alignof(RemoteStoragePublishFileProgress_t);
  case 1330: return alignof(RemoteStoragePublishedFileUpdated_t);
  case 1331: return alignof(RemoteStorageFileWriteAsyncComplete_t);
  case 1332: return alignof(RemoteStorageFileReadAsyncComplete_t);
  case 1333: return alignof(RemoteStorageLocalFileChange_t);
  case 1101: return alignof(UserStatsReceived_t);
  case 1102: return alignof(UserStatsStored_t);
  case 1103: return alignof(UserAchievementStored_t);
  case 1104: return alignof(LeaderboardFindResult_t);
  case 1105: return alignof(LeaderboardScoresDownloaded_t);
  case 1106: return alignof(LeaderboardScoreUploaded_t);
  case 1107: return alignof(NumberOfCurrentPlayers_t);
  case 1108: return alignof(UserStatsUnloaded_t);
  case 1109: return alignof(UserAchievementIconFetched_t);
  case 1110: return alignof(GlobalAchievementPercentagesReady_t);
  case 1111: return alignof(LeaderboardUGCSet_t);
  case 1112: return alignof(GlobalStatsReceived_t);
  case 1005: return alignof(DlcInstalled_t);
  case 1014: return alignof(NewUrlLaunchParameters_t);
  case 1021: return alignof(AppProofOfPurchaseKeyResponse_t);
  case 1023: return alignof(FileDetailsResult_t);
  case 1030: return alignof(TimedTrialStatus_t);
  case 1202: return alignof(P2PSessionRequest_t);
  case 1203: return alignof(P2PSessionConnectFail_t);
  case 1201: return alignof(SocketStatusCallback_t);
  case 2301: return alignof(ScreenshotReady_t);
  case 2302: return alignof(ScreenshotRequested_t);
  case 4001: return alignof(PlaybackStatusHasChanged_t);
  case 4002: return alignof(VolumeHasChanged_t);
  case 4101: return alignof(MusicPlayerRemoteWillActivate_t);
  case 4102: return alignof(MusicPlayerRemoteWillDeactivate_t);
  case 4103: return alignof(MusicPlayerRemoteToFront_t);
  case 4104: return alignof(MusicPlayerWillQuit_t);
  case 4105: return alignof(MusicPlayerWantsPlay_t);
  case 4106: return alignof(MusicPlayerWantsPause_t);
  case 4107: return alignof(MusicPlayerWantsPlayPrevious_t);
  case 4108: return alignof(MusicPlayerWantsPlayNext_t);
  case 4109: return alignof(MusicPlayerWantsShuffled_t);
  case 4110: return alignof(MusicPlayerWantsLooped_t);
  case 4011: return alignof(MusicPlayerWantsVolume_t);
  case 4012: return alignof(MusicPlayerSelectsQueueEntry_t);
  case 4013: return alignof(MusicPlayerSelectsPlaylistEntry_t);
  case 4114: return alignof(MusicPlayerWantsPlayingRepeatStatus_t);
  case 2101: return alignof(HTTPRequestCompleted_t);
  case 2102: return alignof(HTTPRequestHeadersReceived_t);
  case 2103: return alignof(HTTPRequestDataReceived_t);
  case 2801: return alignof(SteamInputDeviceConnected_t);
  case 2802: return alignof(SteamInputDeviceDisconnected_t);
  case 2803: return alignof(SteamInputConfigurationLoaded_t);
  case 2804: return alignof(SteamInputGamepadSlotChange_t);
  case 3401: return alignof(SteamUGCQueryCompleted_t);
  case 3402: return alignof(SteamUGCRequestUGCDetailsResult_t);
  case 3403: return alignof(CreateItemResult_t);
  case 3404: return alignof(SubmitItemUpdateResult_t);
  case 3405: return alignof(ItemInstalled_t);
  case 3406: return alignof(DownloadItemResult_t);
  case 3407: return alignof(UserFavoriteItemsListChanged_t);
  case 3408: return alignof(SetUserItemVoteResult_t);
  case 3409: return alignof(GetUserItemVoteResult_t);
  case 3410: return alignof(StartPlaytimeTrackingResult_t);
  case 3411: return alignof(StopPlaytimeTrackingResult_t);
  case 3412: return alignof(AddUGCDependencyResult_t);
  case 3413: return alignof(RemoveUGCDependencyResult_t);
  case 3414: return alignof(AddAppDependencyResult_t);
  case 3415: return alignof(RemoveAppDependencyResult_t);
  case 3416: return alignof(GetAppDependenciesResult_t);
  case 3417: return alignof(DeleteItemResult_t);
  case 3418: return alignof(UserSubscribedItemsListChanged_t);
  case 3420: return alignof(WorkshopEULAStatus_t);
  case 3901: return alignof(SteamAppInstalled_t);
  case 3902: return alignof(SteamAppUninstalled_t);
  case 4501: return alignof(HTML_BrowserReady_t);
  case 4502: return alignof(HTML_NeedsPaint_t);
  case 4503: return alignof(HTML_StartRequest_t);
  case 4504: return alignof(HTML_CloseBrowser_t);
  case 4505: return alignof(HTML_URLChanged_t);
  case 4506: return alignof(HTML_FinishedRequest_t);
  case 4507: return alignof(HTML_OpenLinkInNewTab_t);
  case 4508: return alignof(HTML_ChangedTitle_t);
  case 4509: return alignof(HTML_SearchResults_t);
  case 4510: return alignof(HTML_CanGoBackAndForward_t);
  case 4511: return alignof(HTML_HorizontalScroll_t);
  case 4512: return alignof(HTML_VerticalScroll_t);
  case 4513: return alignof(HTML_LinkAtPosition_t);
  case 4514: return alignof(HTML_JSAlert_t);
  case 4515: return alignof(HTML_JSConfirm_t);
  case 4516: return alignof(HTML_FileOpenDialog_t);
  case 4521: return alignof(HTML_NewWindow_t);
  case 4522: return alignof(HTML_SetCursor_t);
  case 4523: return alignof(HTML_StatusText_t);
  case 4524: return alignof(HTML_ShowToolTip_t);
  case 4525: return alignof(HTML_UpdateToolTip_t);
  case 4526: return alignof(HTML_HideToolTip_t);
  case 4527: return alignof(HTML_BrowserRestarted_t);
  case 4700: return alignof(SteamInventoryResultReady_t);
  case 4701: return alignof(SteamInventoryFullUpdate_t);
  case 4702: return alignof(SteamInventoryDefinitionUpdate_t);
  case 4703: return alignof(SteamInventoryEligiblePromoItemDefIDs_t);
  case 4704: return alignof(SteamInventoryStartPurchaseResult_t);
  case 4705: return alignof(SteamInventoryRequestPricesResult_t);
  case 4611: return alignof(GetVideoURLResult_t);
  case 4624: return alignof(GetOPFSettingsResult_t);
  case 5001: return alignof(SteamParentalSettingsChanged_t);
  case 5701: return alignof(SteamRemotePlaySessionConnected_t);
  case 5702: return alignof(SteamRemotePlaySessionDisconnected_t);
  case 5703: return alignof(SteamRemotePlayTogetherGuestInvite_t);
  case 1251: return alignof(SteamNetworkingMessagesSessionRequest_t);
  case 1252: return alignof(SteamNetworkingMessagesSessionFailed_t);
  case 1221: return alignof(SteamNetConnectionStatusChangedCallback_t);
  case 1222: return alignof(SteamNetAuthenticationStatus_t);
  case 1281: return alignof(SteamRelayNetworkStatus_t);
  case 201: return alignof(GSClientApprove_t);
  case 202: return alignof(GSClientDeny_t);
  case 203: return alignof(GSClientKick_t);
  case 206: return alignof(GSClientAchievementStatus_t);
  case 115: return alignof(GSPolicyResponse_t);
  case 207: return alignof(GSGameplayStats_t);
  case 208: return alignof(GSClientGroupStatus_t);
  case 209: return alignof(GSReputation_t);
  case 210: return alignof(AssociateWithClanResult_t);
  case 211: return alignof(ComputeNewPlayerCompatibilityResult_t);
  case 1800: return alignof(GSStatsReceived_t);
  case 1801: return alignof(GSStatsStored_t);
  // case 1223: return alignof(SteamNetworkingFakeIPResult_t);
  default: return 0;
}
}