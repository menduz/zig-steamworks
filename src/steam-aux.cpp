// this file is autogenerated by generate-aux.js - https://github.com/menduz/zig-steamworks
#include <cstdio>
#include <concepts>
#include <type_traits>
#import "steam_api.h"
#import "steam_gameserver.h"
#import "steamdatagram_tickets.h"
#import "steamnetworkingfakeip.h"
int main() {
  std::fprintf(stdout, "{\n");
  // SteamServersConnected_t
  { std::fprintf(stdout, "\"SteamServersConnected_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamServersConnected_t    *p_SteamServersConnected_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamServersConnected_t), alignof(SteamServersConnected_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamServerConnectFailure_t
  { std::fprintf(stdout, ",\"SteamServerConnectFailure_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamServerConnectFailure_t    *p_SteamServerConnectFailure_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamServerConnectFailure_t->m_eResult), alignof(p_SteamServerConnectFailure_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_bStillRetrying\", \"size\": %d, \"align\": %d}", sizeof(p_SteamServerConnectFailure_t->m_bStillRetrying), alignof(p_SteamServerConnectFailure_t->m_bStillRetrying));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamServerConnectFailure_t), alignof(SteamServerConnectFailure_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamServersDisconnected_t
  { std::fprintf(stdout, ",\"SteamServersDisconnected_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamServersDisconnected_t    *p_SteamServersDisconnected_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_SteamServersDisconnected_t->m_eResult), alignof(p_SteamServersDisconnected_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamServersDisconnected_t), alignof(SteamServersDisconnected_t));
    std::fprintf(stdout, "}\n");
  }
  // ClientGameServerDeny_t
  { std::fprintf(stdout, ",\"ClientGameServerDeny_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ClientGameServerDeny_t    *p_ClientGameServerDeny_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_uAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_ClientGameServerDeny_t->m_uAppID), alignof(p_ClientGameServerDeny_t->m_uAppID));
      std::fprintf(stdout, "  {\"field\": \"m_unGameServerIP\", \"size\": %d, \"align\": %d},\n", sizeof(p_ClientGameServerDeny_t->m_unGameServerIP), alignof(p_ClientGameServerDeny_t->m_unGameServerIP));
      std::fprintf(stdout, "  {\"field\": \"m_usGameServerPort\", \"size\": %d, \"align\": %d},\n", sizeof(p_ClientGameServerDeny_t->m_usGameServerPort), alignof(p_ClientGameServerDeny_t->m_usGameServerPort));
      std::fprintf(stdout, "  {\"field\": \"m_bSecure\", \"size\": %d, \"align\": %d},\n", sizeof(p_ClientGameServerDeny_t->m_bSecure), alignof(p_ClientGameServerDeny_t->m_bSecure));
      std::fprintf(stdout, "  {\"field\": \"m_uReason\", \"size\": %d, \"align\": %d}", sizeof(p_ClientGameServerDeny_t->m_uReason), alignof(p_ClientGameServerDeny_t->m_uReason));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ClientGameServerDeny_t), alignof(ClientGameServerDeny_t));
    std::fprintf(stdout, "}\n");
  }
  // IPCFailure_t
  { std::fprintf(stdout, ",\"IPCFailure_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct IPCFailure_t    *p_IPCFailure_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eFailureType\", \"size\": %d, \"align\": %d}", sizeof(p_IPCFailure_t->m_eFailureType), alignof(p_IPCFailure_t->m_eFailureType));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(IPCFailure_t), alignof(IPCFailure_t));
    std::fprintf(stdout, "}\n");
  }
  // LicensesUpdated_t
  { std::fprintf(stdout, ",\"LicensesUpdated_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LicensesUpdated_t    *p_LicensesUpdated_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LicensesUpdated_t), alignof(LicensesUpdated_t));
    std::fprintf(stdout, "}\n");
  }
  // ValidateAuthTicketResponse_t
  { std::fprintf(stdout, ",\"ValidateAuthTicketResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ValidateAuthTicketResponse_t    *p_ValidateAuthTicketResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_SteamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_ValidateAuthTicketResponse_t->m_SteamID), alignof(p_ValidateAuthTicketResponse_t->m_SteamID));
      std::fprintf(stdout, "  {\"field\": \"m_eAuthSessionResponse\", \"size\": %d, \"align\": %d},\n", sizeof(p_ValidateAuthTicketResponse_t->m_eAuthSessionResponse), alignof(p_ValidateAuthTicketResponse_t->m_eAuthSessionResponse));
      std::fprintf(stdout, "  {\"field\": \"m_OwnerSteamID\", \"size\": %d, \"align\": %d}", sizeof(p_ValidateAuthTicketResponse_t->m_OwnerSteamID), alignof(p_ValidateAuthTicketResponse_t->m_OwnerSteamID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ValidateAuthTicketResponse_t), alignof(ValidateAuthTicketResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // MicroTxnAuthorizationResponse_t
  { std::fprintf(stdout, ",\"MicroTxnAuthorizationResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MicroTxnAuthorizationResponse_t    *p_MicroTxnAuthorizationResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_unAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_MicroTxnAuthorizationResponse_t->m_unAppID), alignof(p_MicroTxnAuthorizationResponse_t->m_unAppID));
      std::fprintf(stdout, "  {\"field\": \"m_ulOrderID\", \"size\": %d, \"align\": %d},\n", sizeof(p_MicroTxnAuthorizationResponse_t->m_ulOrderID), alignof(p_MicroTxnAuthorizationResponse_t->m_ulOrderID));
      std::fprintf(stdout, "  {\"field\": \"m_bAuthorized\", \"size\": %d, \"align\": %d}", sizeof(p_MicroTxnAuthorizationResponse_t->m_bAuthorized), alignof(p_MicroTxnAuthorizationResponse_t->m_bAuthorized));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MicroTxnAuthorizationResponse_t), alignof(MicroTxnAuthorizationResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // EncryptedAppTicketResponse_t
  { std::fprintf(stdout, ",\"EncryptedAppTicketResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct EncryptedAppTicketResponse_t    *p_EncryptedAppTicketResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_EncryptedAppTicketResponse_t->m_eResult), alignof(p_EncryptedAppTicketResponse_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(EncryptedAppTicketResponse_t), alignof(EncryptedAppTicketResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // GetAuthSessionTicketResponse_t
  { std::fprintf(stdout, ",\"GetAuthSessionTicketResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GetAuthSessionTicketResponse_t    *p_GetAuthSessionTicketResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hAuthTicket\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetAuthSessionTicketResponse_t->m_hAuthTicket), alignof(p_GetAuthSessionTicketResponse_t->m_hAuthTicket));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_GetAuthSessionTicketResponse_t->m_eResult), alignof(p_GetAuthSessionTicketResponse_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GetAuthSessionTicketResponse_t), alignof(GetAuthSessionTicketResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // GameWebCallback_t
  { std::fprintf(stdout, ",\"GameWebCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GameWebCallback_t    *p_GameWebCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_szURL\", \"size\": %d, \"align\": %d}", sizeof(p_GameWebCallback_t->m_szURL), alignof(p_GameWebCallback_t->m_szURL));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GameWebCallback_t), alignof(GameWebCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // StoreAuthURLResponse_t
  { std::fprintf(stdout, ",\"StoreAuthURLResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct StoreAuthURLResponse_t    *p_StoreAuthURLResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_szURL\", \"size\": %d, \"align\": %d}", sizeof(p_StoreAuthURLResponse_t->m_szURL), alignof(p_StoreAuthURLResponse_t->m_szURL));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(StoreAuthURLResponse_t), alignof(StoreAuthURLResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // MarketEligibilityResponse_t
  { std::fprintf(stdout, ",\"MarketEligibilityResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MarketEligibilityResponse_t    *p_MarketEligibilityResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bAllowed\", \"size\": %d, \"align\": %d},\n", sizeof(p_MarketEligibilityResponse_t->m_bAllowed), alignof(p_MarketEligibilityResponse_t->m_bAllowed));
      std::fprintf(stdout, "  {\"field\": \"m_eNotAllowedReason\", \"size\": %d, \"align\": %d},\n", sizeof(p_MarketEligibilityResponse_t->m_eNotAllowedReason), alignof(p_MarketEligibilityResponse_t->m_eNotAllowedReason));
      std::fprintf(stdout, "  {\"field\": \"m_rtAllowedAtTime\", \"size\": %d, \"align\": %d},\n", sizeof(p_MarketEligibilityResponse_t->m_rtAllowedAtTime), alignof(p_MarketEligibilityResponse_t->m_rtAllowedAtTime));
      std::fprintf(stdout, "  {\"field\": \"m_cdaySteamGuardRequiredDays\", \"size\": %d, \"align\": %d},\n", sizeof(p_MarketEligibilityResponse_t->m_cdaySteamGuardRequiredDays), alignof(p_MarketEligibilityResponse_t->m_cdaySteamGuardRequiredDays));
      std::fprintf(stdout, "  {\"field\": \"m_cdayNewDeviceCooldown\", \"size\": %d, \"align\": %d}", sizeof(p_MarketEligibilityResponse_t->m_cdayNewDeviceCooldown), alignof(p_MarketEligibilityResponse_t->m_cdayNewDeviceCooldown));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MarketEligibilityResponse_t), alignof(MarketEligibilityResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // DurationControl_t
  { std::fprintf(stdout, ",\"DurationControl_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct DurationControl_t    *p_DurationControl_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_DurationControl_t->m_eResult), alignof(p_DurationControl_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_appid\", \"size\": %d, \"align\": %d},\n", sizeof(p_DurationControl_t->m_appid), alignof(p_DurationControl_t->m_appid));
      std::fprintf(stdout, "  {\"field\": \"m_bApplicable\", \"size\": %d, \"align\": %d},\n", sizeof(p_DurationControl_t->m_bApplicable), alignof(p_DurationControl_t->m_bApplicable));
      std::fprintf(stdout, "  {\"field\": \"m_csecsLast5h\", \"size\": %d, \"align\": %d},\n", sizeof(p_DurationControl_t->m_csecsLast5h), alignof(p_DurationControl_t->m_csecsLast5h));
      std::fprintf(stdout, "  {\"field\": \"m_progress\", \"size\": %d, \"align\": %d},\n", sizeof(p_DurationControl_t->m_progress), alignof(p_DurationControl_t->m_progress));
      std::fprintf(stdout, "  {\"field\": \"m_notification\", \"size\": %d, \"align\": %d},\n", sizeof(p_DurationControl_t->m_notification), alignof(p_DurationControl_t->m_notification));
      std::fprintf(stdout, "  {\"field\": \"m_csecsToday\", \"size\": %d, \"align\": %d},\n", sizeof(p_DurationControl_t->m_csecsToday), alignof(p_DurationControl_t->m_csecsToday));
      std::fprintf(stdout, "  {\"field\": \"m_csecsRemaining\", \"size\": %d, \"align\": %d}", sizeof(p_DurationControl_t->m_csecsRemaining), alignof(p_DurationControl_t->m_csecsRemaining));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(DurationControl_t), alignof(DurationControl_t));
    std::fprintf(stdout, "}\n");
  }
  // GetTicketForWebApiResponse_t
  { std::fprintf(stdout, ",\"GetTicketForWebApiResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GetTicketForWebApiResponse_t    *p_GetTicketForWebApiResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hAuthTicket\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetTicketForWebApiResponse_t->m_hAuthTicket), alignof(p_GetTicketForWebApiResponse_t->m_hAuthTicket));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetTicketForWebApiResponse_t->m_eResult), alignof(p_GetTicketForWebApiResponse_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_cubTicket\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetTicketForWebApiResponse_t->m_cubTicket), alignof(p_GetTicketForWebApiResponse_t->m_cubTicket));
      std::fprintf(stdout, "  {\"field\": \"m_rgubTicket\", \"size\": %d, \"align\": %d}", sizeof(p_GetTicketForWebApiResponse_t->m_rgubTicket), alignof(p_GetTicketForWebApiResponse_t->m_rgubTicket));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GetTicketForWebApiResponse_t), alignof(GetTicketForWebApiResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // PersonaStateChange_t
  { std::fprintf(stdout, ",\"PersonaStateChange_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct PersonaStateChange_t    *p_PersonaStateChange_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_PersonaStateChange_t->m_ulSteamID), alignof(p_PersonaStateChange_t->m_ulSteamID));
      std::fprintf(stdout, "  {\"field\": \"m_nChangeFlags\", \"size\": %d, \"align\": %d}", sizeof(p_PersonaStateChange_t->m_nChangeFlags), alignof(p_PersonaStateChange_t->m_nChangeFlags));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(PersonaStateChange_t), alignof(PersonaStateChange_t));
    std::fprintf(stdout, "}\n");
  }
  // GameOverlayActivated_t
  { std::fprintf(stdout, ",\"GameOverlayActivated_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GameOverlayActivated_t    *p_GameOverlayActivated_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bActive\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameOverlayActivated_t->m_bActive), alignof(p_GameOverlayActivated_t->m_bActive));
      std::fprintf(stdout, "  {\"field\": \"m_bUserInitiated\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameOverlayActivated_t->m_bUserInitiated), alignof(p_GameOverlayActivated_t->m_bUserInitiated));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d}", sizeof(p_GameOverlayActivated_t->m_nAppID), alignof(p_GameOverlayActivated_t->m_nAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GameOverlayActivated_t), alignof(GameOverlayActivated_t));
    std::fprintf(stdout, "}\n");
  }
  // GameServerChangeRequested_t
  { std::fprintf(stdout, ",\"GameServerChangeRequested_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GameServerChangeRequested_t    *p_GameServerChangeRequested_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_rgchServer\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameServerChangeRequested_t->m_rgchServer), alignof(p_GameServerChangeRequested_t->m_rgchServer));
      std::fprintf(stdout, "  {\"field\": \"m_rgchPassword\", \"size\": %d, \"align\": %d}", sizeof(p_GameServerChangeRequested_t->m_rgchPassword), alignof(p_GameServerChangeRequested_t->m_rgchPassword));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GameServerChangeRequested_t), alignof(GameServerChangeRequested_t));
    std::fprintf(stdout, "}\n");
  }
  // GameLobbyJoinRequested_t
  { std::fprintf(stdout, ",\"GameLobbyJoinRequested_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GameLobbyJoinRequested_t    *p_GameLobbyJoinRequested_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDLobby\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameLobbyJoinRequested_t->m_steamIDLobby), alignof(p_GameLobbyJoinRequested_t->m_steamIDLobby));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDFriend\", \"size\": %d, \"align\": %d}", sizeof(p_GameLobbyJoinRequested_t->m_steamIDFriend), alignof(p_GameLobbyJoinRequested_t->m_steamIDFriend));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GameLobbyJoinRequested_t), alignof(GameLobbyJoinRequested_t));
    std::fprintf(stdout, "}\n");
  }
  // AvatarImageLoaded_t
  { std::fprintf(stdout, ",\"AvatarImageLoaded_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct AvatarImageLoaded_t    *p_AvatarImageLoaded_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_AvatarImageLoaded_t->m_steamID), alignof(p_AvatarImageLoaded_t->m_steamID));
      std::fprintf(stdout, "  {\"field\": \"m_iImage\", \"size\": %d, \"align\": %d},\n", sizeof(p_AvatarImageLoaded_t->m_iImage), alignof(p_AvatarImageLoaded_t->m_iImage));
      std::fprintf(stdout, "  {\"field\": \"m_iWide\", \"size\": %d, \"align\": %d},\n", sizeof(p_AvatarImageLoaded_t->m_iWide), alignof(p_AvatarImageLoaded_t->m_iWide));
      std::fprintf(stdout, "  {\"field\": \"m_iTall\", \"size\": %d, \"align\": %d}", sizeof(p_AvatarImageLoaded_t->m_iTall), alignof(p_AvatarImageLoaded_t->m_iTall));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(AvatarImageLoaded_t), alignof(AvatarImageLoaded_t));
    std::fprintf(stdout, "}\n");
  }
  // ClanOfficerListResponse_t
  { std::fprintf(stdout, ",\"ClanOfficerListResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ClanOfficerListResponse_t    *p_ClanOfficerListResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDClan\", \"size\": %d, \"align\": %d},\n", sizeof(p_ClanOfficerListResponse_t->m_steamIDClan), alignof(p_ClanOfficerListResponse_t->m_steamIDClan));
      std::fprintf(stdout, "  {\"field\": \"m_cOfficers\", \"size\": %d, \"align\": %d},\n", sizeof(p_ClanOfficerListResponse_t->m_cOfficers), alignof(p_ClanOfficerListResponse_t->m_cOfficers));
      std::fprintf(stdout, "  {\"field\": \"m_bSuccess\", \"size\": %d, \"align\": %d}", sizeof(p_ClanOfficerListResponse_t->m_bSuccess), alignof(p_ClanOfficerListResponse_t->m_bSuccess));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ClanOfficerListResponse_t), alignof(ClanOfficerListResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // FriendRichPresenceUpdate_t
  { std::fprintf(stdout, ",\"FriendRichPresenceUpdate_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FriendRichPresenceUpdate_t    *p_FriendRichPresenceUpdate_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDFriend\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendRichPresenceUpdate_t->m_steamIDFriend), alignof(p_FriendRichPresenceUpdate_t->m_steamIDFriend));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d}", sizeof(p_FriendRichPresenceUpdate_t->m_nAppID), alignof(p_FriendRichPresenceUpdate_t->m_nAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FriendRichPresenceUpdate_t), alignof(FriendRichPresenceUpdate_t));
    std::fprintf(stdout, "}\n");
  }
  // GameRichPresenceJoinRequested_t
  { std::fprintf(stdout, ",\"GameRichPresenceJoinRequested_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GameRichPresenceJoinRequested_t    *p_GameRichPresenceJoinRequested_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDFriend\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameRichPresenceJoinRequested_t->m_steamIDFriend), alignof(p_GameRichPresenceJoinRequested_t->m_steamIDFriend));
      std::fprintf(stdout, "  {\"field\": \"m_rgchConnect\", \"size\": %d, \"align\": %d}", sizeof(p_GameRichPresenceJoinRequested_t->m_rgchConnect), alignof(p_GameRichPresenceJoinRequested_t->m_rgchConnect));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GameRichPresenceJoinRequested_t), alignof(GameRichPresenceJoinRequested_t));
    std::fprintf(stdout, "}\n");
  }
  // GameConnectedClanChatMsg_t
  { std::fprintf(stdout, ",\"GameConnectedClanChatMsg_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GameConnectedClanChatMsg_t    *p_GameConnectedClanChatMsg_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDClanChat\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameConnectedClanChatMsg_t->m_steamIDClanChat), alignof(p_GameConnectedClanChatMsg_t->m_steamIDClanChat));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameConnectedClanChatMsg_t->m_steamIDUser), alignof(p_GameConnectedClanChatMsg_t->m_steamIDUser));
      std::fprintf(stdout, "  {\"field\": \"m_iMessageID\", \"size\": %d, \"align\": %d}", sizeof(p_GameConnectedClanChatMsg_t->m_iMessageID), alignof(p_GameConnectedClanChatMsg_t->m_iMessageID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GameConnectedClanChatMsg_t), alignof(GameConnectedClanChatMsg_t));
    std::fprintf(stdout, "}\n");
  }
  // GameConnectedChatJoin_t
  { std::fprintf(stdout, ",\"GameConnectedChatJoin_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GameConnectedChatJoin_t    *p_GameConnectedChatJoin_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDClanChat\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameConnectedChatJoin_t->m_steamIDClanChat), alignof(p_GameConnectedChatJoin_t->m_steamIDClanChat));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d}", sizeof(p_GameConnectedChatJoin_t->m_steamIDUser), alignof(p_GameConnectedChatJoin_t->m_steamIDUser));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GameConnectedChatJoin_t), alignof(GameConnectedChatJoin_t));
    std::fprintf(stdout, "}\n");
  }
  // GameConnectedChatLeave_t
  { std::fprintf(stdout, ",\"GameConnectedChatLeave_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GameConnectedChatLeave_t    *p_GameConnectedChatLeave_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDClanChat\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameConnectedChatLeave_t->m_steamIDClanChat), alignof(p_GameConnectedChatLeave_t->m_steamIDClanChat));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameConnectedChatLeave_t->m_steamIDUser), alignof(p_GameConnectedChatLeave_t->m_steamIDUser));
      std::fprintf(stdout, "  {\"field\": \"m_bKicked\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameConnectedChatLeave_t->m_bKicked), alignof(p_GameConnectedChatLeave_t->m_bKicked));
      std::fprintf(stdout, "  {\"field\": \"m_bDropped\", \"size\": %d, \"align\": %d}", sizeof(p_GameConnectedChatLeave_t->m_bDropped), alignof(p_GameConnectedChatLeave_t->m_bDropped));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GameConnectedChatLeave_t), alignof(GameConnectedChatLeave_t));
    std::fprintf(stdout, "}\n");
  }
  // DownloadClanActivityCountsResult_t
  { std::fprintf(stdout, ",\"DownloadClanActivityCountsResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct DownloadClanActivityCountsResult_t    *p_DownloadClanActivityCountsResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bSuccess\", \"size\": %d, \"align\": %d}", sizeof(p_DownloadClanActivityCountsResult_t->m_bSuccess), alignof(p_DownloadClanActivityCountsResult_t->m_bSuccess));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(DownloadClanActivityCountsResult_t), alignof(DownloadClanActivityCountsResult_t));
    std::fprintf(stdout, "}\n");
  }
  // JoinClanChatRoomCompletionResult_t
  { std::fprintf(stdout, ",\"JoinClanChatRoomCompletionResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct JoinClanChatRoomCompletionResult_t    *p_JoinClanChatRoomCompletionResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDClanChat\", \"size\": %d, \"align\": %d},\n", sizeof(p_JoinClanChatRoomCompletionResult_t->m_steamIDClanChat), alignof(p_JoinClanChatRoomCompletionResult_t->m_steamIDClanChat));
      std::fprintf(stdout, "  {\"field\": \"m_eChatRoomEnterResponse\", \"size\": %d, \"align\": %d}", sizeof(p_JoinClanChatRoomCompletionResult_t->m_eChatRoomEnterResponse), alignof(p_JoinClanChatRoomCompletionResult_t->m_eChatRoomEnterResponse));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(JoinClanChatRoomCompletionResult_t), alignof(JoinClanChatRoomCompletionResult_t));
    std::fprintf(stdout, "}\n");
  }
  // GameConnectedFriendChatMsg_t
  { std::fprintf(stdout, ",\"GameConnectedFriendChatMsg_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GameConnectedFriendChatMsg_t    *p_GameConnectedFriendChatMsg_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d},\n", sizeof(p_GameConnectedFriendChatMsg_t->m_steamIDUser), alignof(p_GameConnectedFriendChatMsg_t->m_steamIDUser));
      std::fprintf(stdout, "  {\"field\": \"m_iMessageID\", \"size\": %d, \"align\": %d}", sizeof(p_GameConnectedFriendChatMsg_t->m_iMessageID), alignof(p_GameConnectedFriendChatMsg_t->m_iMessageID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GameConnectedFriendChatMsg_t), alignof(GameConnectedFriendChatMsg_t));
    std::fprintf(stdout, "}\n");
  }
  // FriendsGetFollowerCount_t
  { std::fprintf(stdout, ",\"FriendsGetFollowerCount_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FriendsGetFollowerCount_t    *p_FriendsGetFollowerCount_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendsGetFollowerCount_t->m_eResult), alignof(p_FriendsGetFollowerCount_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_steamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendsGetFollowerCount_t->m_steamID), alignof(p_FriendsGetFollowerCount_t->m_steamID));
      std::fprintf(stdout, "  {\"field\": \"m_nCount\", \"size\": %d, \"align\": %d}", sizeof(p_FriendsGetFollowerCount_t->m_nCount), alignof(p_FriendsGetFollowerCount_t->m_nCount));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FriendsGetFollowerCount_t), alignof(FriendsGetFollowerCount_t));
    std::fprintf(stdout, "}\n");
  }
  // FriendsIsFollowing_t
  { std::fprintf(stdout, ",\"FriendsIsFollowing_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FriendsIsFollowing_t    *p_FriendsIsFollowing_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendsIsFollowing_t->m_eResult), alignof(p_FriendsIsFollowing_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_steamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendsIsFollowing_t->m_steamID), alignof(p_FriendsIsFollowing_t->m_steamID));
      std::fprintf(stdout, "  {\"field\": \"m_bIsFollowing\", \"size\": %d, \"align\": %d}", sizeof(p_FriendsIsFollowing_t->m_bIsFollowing), alignof(p_FriendsIsFollowing_t->m_bIsFollowing));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FriendsIsFollowing_t), alignof(FriendsIsFollowing_t));
    std::fprintf(stdout, "}\n");
  }
  // FriendsEnumerateFollowingList_t
  { std::fprintf(stdout, ",\"FriendsEnumerateFollowingList_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FriendsEnumerateFollowingList_t    *p_FriendsEnumerateFollowingList_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendsEnumerateFollowingList_t->m_eResult), alignof(p_FriendsEnumerateFollowingList_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_rgSteamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendsEnumerateFollowingList_t->m_rgSteamID), alignof(p_FriendsEnumerateFollowingList_t->m_rgSteamID));
      std::fprintf(stdout, "  {\"field\": \"m_nResultsReturned\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendsEnumerateFollowingList_t->m_nResultsReturned), alignof(p_FriendsEnumerateFollowingList_t->m_nResultsReturned));
      std::fprintf(stdout, "  {\"field\": \"m_nTotalResultCount\", \"size\": %d, \"align\": %d}", sizeof(p_FriendsEnumerateFollowingList_t->m_nTotalResultCount), alignof(p_FriendsEnumerateFollowingList_t->m_nTotalResultCount));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FriendsEnumerateFollowingList_t), alignof(FriendsEnumerateFollowingList_t));
    std::fprintf(stdout, "}\n");
  }
  // SetPersonaNameResponse_t
  { std::fprintf(stdout, ",\"SetPersonaNameResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SetPersonaNameResponse_t    *p_SetPersonaNameResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bSuccess\", \"size\": %d, \"align\": %d},\n", sizeof(p_SetPersonaNameResponse_t->m_bSuccess), alignof(p_SetPersonaNameResponse_t->m_bSuccess));
      std::fprintf(stdout, "  {\"field\": \"m_bLocalSuccess\", \"size\": %d, \"align\": %d},\n", sizeof(p_SetPersonaNameResponse_t->m_bLocalSuccess), alignof(p_SetPersonaNameResponse_t->m_bLocalSuccess));
      std::fprintf(stdout, "  {\"field\": \"m_result\", \"size\": %d, \"align\": %d}", sizeof(p_SetPersonaNameResponse_t->m_result), alignof(p_SetPersonaNameResponse_t->m_result));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SetPersonaNameResponse_t), alignof(SetPersonaNameResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // UnreadChatMessagesChanged_t
  { std::fprintf(stdout, ",\"UnreadChatMessagesChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct UnreadChatMessagesChanged_t    *p_UnreadChatMessagesChanged_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(UnreadChatMessagesChanged_t), alignof(UnreadChatMessagesChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // OverlayBrowserProtocolNavigation_t
  { std::fprintf(stdout, ",\"OverlayBrowserProtocolNavigation_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct OverlayBrowserProtocolNavigation_t    *p_OverlayBrowserProtocolNavigation_t = 0;
      std::fprintf(stdout, "  {\"field\": \"rgchURI\", \"size\": %d, \"align\": %d}", sizeof(p_OverlayBrowserProtocolNavigation_t->rgchURI), alignof(p_OverlayBrowserProtocolNavigation_t->rgchURI));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(OverlayBrowserProtocolNavigation_t), alignof(OverlayBrowserProtocolNavigation_t));
    std::fprintf(stdout, "}\n");
  }
  // EquippedProfileItemsChanged_t
  { std::fprintf(stdout, ",\"EquippedProfileItemsChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct EquippedProfileItemsChanged_t    *p_EquippedProfileItemsChanged_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamID\", \"size\": %d, \"align\": %d}", sizeof(p_EquippedProfileItemsChanged_t->m_steamID), alignof(p_EquippedProfileItemsChanged_t->m_steamID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(EquippedProfileItemsChanged_t), alignof(EquippedProfileItemsChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // EquippedProfileItems_t
  { std::fprintf(stdout, ",\"EquippedProfileItems_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct EquippedProfileItems_t    *p_EquippedProfileItems_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_EquippedProfileItems_t->m_eResult), alignof(p_EquippedProfileItems_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_steamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_EquippedProfileItems_t->m_steamID), alignof(p_EquippedProfileItems_t->m_steamID));
      std::fprintf(stdout, "  {\"field\": \"m_bHasAnimatedAvatar\", \"size\": %d, \"align\": %d},\n", sizeof(p_EquippedProfileItems_t->m_bHasAnimatedAvatar), alignof(p_EquippedProfileItems_t->m_bHasAnimatedAvatar));
      std::fprintf(stdout, "  {\"field\": \"m_bHasAvatarFrame\", \"size\": %d, \"align\": %d},\n", sizeof(p_EquippedProfileItems_t->m_bHasAvatarFrame), alignof(p_EquippedProfileItems_t->m_bHasAvatarFrame));
      std::fprintf(stdout, "  {\"field\": \"m_bHasProfileModifier\", \"size\": %d, \"align\": %d},\n", sizeof(p_EquippedProfileItems_t->m_bHasProfileModifier), alignof(p_EquippedProfileItems_t->m_bHasProfileModifier));
      std::fprintf(stdout, "  {\"field\": \"m_bHasProfileBackground\", \"size\": %d, \"align\": %d},\n", sizeof(p_EquippedProfileItems_t->m_bHasProfileBackground), alignof(p_EquippedProfileItems_t->m_bHasProfileBackground));
      std::fprintf(stdout, "  {\"field\": \"m_bHasMiniProfileBackground\", \"size\": %d, \"align\": %d}", sizeof(p_EquippedProfileItems_t->m_bHasMiniProfileBackground), alignof(p_EquippedProfileItems_t->m_bHasMiniProfileBackground));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(EquippedProfileItems_t), alignof(EquippedProfileItems_t));
    std::fprintf(stdout, "}\n");
  }
  // IPCountry_t
  { std::fprintf(stdout, ",\"IPCountry_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct IPCountry_t    *p_IPCountry_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(IPCountry_t), alignof(IPCountry_t));
    std::fprintf(stdout, "}\n");
  }
  // LowBatteryPower_t
  { std::fprintf(stdout, ",\"LowBatteryPower_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LowBatteryPower_t    *p_LowBatteryPower_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nMinutesBatteryLeft\", \"size\": %d, \"align\": %d}", sizeof(p_LowBatteryPower_t->m_nMinutesBatteryLeft), alignof(p_LowBatteryPower_t->m_nMinutesBatteryLeft));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LowBatteryPower_t), alignof(LowBatteryPower_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamAPICallCompleted_t
  { std::fprintf(stdout, ",\"SteamAPICallCompleted_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamAPICallCompleted_t    *p_SteamAPICallCompleted_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hAsyncCall\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamAPICallCompleted_t->m_hAsyncCall), alignof(p_SteamAPICallCompleted_t->m_hAsyncCall));
      std::fprintf(stdout, "  {\"field\": \"m_iCallback\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamAPICallCompleted_t->m_iCallback), alignof(p_SteamAPICallCompleted_t->m_iCallback));
      std::fprintf(stdout, "  {\"field\": \"m_cubParam\", \"size\": %d, \"align\": %d}", sizeof(p_SteamAPICallCompleted_t->m_cubParam), alignof(p_SteamAPICallCompleted_t->m_cubParam));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamAPICallCompleted_t), alignof(SteamAPICallCompleted_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamShutdown_t
  { std::fprintf(stdout, ",\"SteamShutdown_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamShutdown_t    *p_SteamShutdown_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamShutdown_t), alignof(SteamShutdown_t));
    std::fprintf(stdout, "}\n");
  }
  // CheckFileSignature_t
  { std::fprintf(stdout, ",\"CheckFileSignature_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct CheckFileSignature_t    *p_CheckFileSignature_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eCheckFileSignature\", \"size\": %d, \"align\": %d}", sizeof(p_CheckFileSignature_t->m_eCheckFileSignature), alignof(p_CheckFileSignature_t->m_eCheckFileSignature));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(CheckFileSignature_t), alignof(CheckFileSignature_t));
    std::fprintf(stdout, "}\n");
  }
  // GamepadTextInputDismissed_t
  { std::fprintf(stdout, ",\"GamepadTextInputDismissed_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GamepadTextInputDismissed_t    *p_GamepadTextInputDismissed_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bSubmitted\", \"size\": %d, \"align\": %d},\n", sizeof(p_GamepadTextInputDismissed_t->m_bSubmitted), alignof(p_GamepadTextInputDismissed_t->m_bSubmitted));
      std::fprintf(stdout, "  {\"field\": \"m_unSubmittedText\", \"size\": %d, \"align\": %d},\n", sizeof(p_GamepadTextInputDismissed_t->m_unSubmittedText), alignof(p_GamepadTextInputDismissed_t->m_unSubmittedText));
      std::fprintf(stdout, "  {\"field\": \"m_unAppID\", \"size\": %d, \"align\": %d}", sizeof(p_GamepadTextInputDismissed_t->m_unAppID), alignof(p_GamepadTextInputDismissed_t->m_unAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GamepadTextInputDismissed_t), alignof(GamepadTextInputDismissed_t));
    std::fprintf(stdout, "}\n");
  }
  // AppResumingFromSuspend_t
  { std::fprintf(stdout, ",\"AppResumingFromSuspend_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct AppResumingFromSuspend_t    *p_AppResumingFromSuspend_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(AppResumingFromSuspend_t), alignof(AppResumingFromSuspend_t));
    std::fprintf(stdout, "}\n");
  }
  // FloatingGamepadTextInputDismissed_t
  { std::fprintf(stdout, ",\"FloatingGamepadTextInputDismissed_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FloatingGamepadTextInputDismissed_t    *p_FloatingGamepadTextInputDismissed_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FloatingGamepadTextInputDismissed_t), alignof(FloatingGamepadTextInputDismissed_t));
    std::fprintf(stdout, "}\n");
  }
  // FilterTextDictionaryChanged_t
  { std::fprintf(stdout, ",\"FilterTextDictionaryChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FilterTextDictionaryChanged_t    *p_FilterTextDictionaryChanged_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eLanguage\", \"size\": %d, \"align\": %d}", sizeof(p_FilterTextDictionaryChanged_t->m_eLanguage), alignof(p_FilterTextDictionaryChanged_t->m_eLanguage));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FilterTextDictionaryChanged_t), alignof(FilterTextDictionaryChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // FavoritesListChanged_t
  { std::fprintf(stdout, ",\"FavoritesListChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FavoritesListChanged_t    *p_FavoritesListChanged_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nIP\", \"size\": %d, \"align\": %d},\n", sizeof(p_FavoritesListChanged_t->m_nIP), alignof(p_FavoritesListChanged_t->m_nIP));
      std::fprintf(stdout, "  {\"field\": \"m_nQueryPort\", \"size\": %d, \"align\": %d},\n", sizeof(p_FavoritesListChanged_t->m_nQueryPort), alignof(p_FavoritesListChanged_t->m_nQueryPort));
      std::fprintf(stdout, "  {\"field\": \"m_nConnPort\", \"size\": %d, \"align\": %d},\n", sizeof(p_FavoritesListChanged_t->m_nConnPort), alignof(p_FavoritesListChanged_t->m_nConnPort));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_FavoritesListChanged_t->m_nAppID), alignof(p_FavoritesListChanged_t->m_nAppID));
      std::fprintf(stdout, "  {\"field\": \"m_nFlags\", \"size\": %d, \"align\": %d},\n", sizeof(p_FavoritesListChanged_t->m_nFlags), alignof(p_FavoritesListChanged_t->m_nFlags));
      std::fprintf(stdout, "  {\"field\": \"m_bAdd\", \"size\": %d, \"align\": %d},\n", sizeof(p_FavoritesListChanged_t->m_bAdd), alignof(p_FavoritesListChanged_t->m_bAdd));
      std::fprintf(stdout, "  {\"field\": \"m_unAccountId\", \"size\": %d, \"align\": %d}", sizeof(p_FavoritesListChanged_t->m_unAccountId), alignof(p_FavoritesListChanged_t->m_unAccountId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FavoritesListChanged_t), alignof(FavoritesListChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // LobbyInvite_t
  { std::fprintf(stdout, ",\"LobbyInvite_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LobbyInvite_t    *p_LobbyInvite_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDUser\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyInvite_t->m_ulSteamIDUser), alignof(p_LobbyInvite_t->m_ulSteamIDUser));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDLobby\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyInvite_t->m_ulSteamIDLobby), alignof(p_LobbyInvite_t->m_ulSteamIDLobby));
      std::fprintf(stdout, "  {\"field\": \"m_ulGameID\", \"size\": %d, \"align\": %d}", sizeof(p_LobbyInvite_t->m_ulGameID), alignof(p_LobbyInvite_t->m_ulGameID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LobbyInvite_t), alignof(LobbyInvite_t));
    std::fprintf(stdout, "}\n");
  }
  // LobbyEnter_t
  { std::fprintf(stdout, ",\"LobbyEnter_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LobbyEnter_t    *p_LobbyEnter_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDLobby\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyEnter_t->m_ulSteamIDLobby), alignof(p_LobbyEnter_t->m_ulSteamIDLobby));
      std::fprintf(stdout, "  {\"field\": \"m_rgfChatPermissions\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyEnter_t->m_rgfChatPermissions), alignof(p_LobbyEnter_t->m_rgfChatPermissions));
      std::fprintf(stdout, "  {\"field\": \"m_bLocked\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyEnter_t->m_bLocked), alignof(p_LobbyEnter_t->m_bLocked));
      std::fprintf(stdout, "  {\"field\": \"m_EChatRoomEnterResponse\", \"size\": %d, \"align\": %d}", sizeof(p_LobbyEnter_t->m_EChatRoomEnterResponse), alignof(p_LobbyEnter_t->m_EChatRoomEnterResponse));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LobbyEnter_t), alignof(LobbyEnter_t));
    std::fprintf(stdout, "}\n");
  }
  // LobbyDataUpdate_t
  { std::fprintf(stdout, ",\"LobbyDataUpdate_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LobbyDataUpdate_t    *p_LobbyDataUpdate_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDLobby\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyDataUpdate_t->m_ulSteamIDLobby), alignof(p_LobbyDataUpdate_t->m_ulSteamIDLobby));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDMember\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyDataUpdate_t->m_ulSteamIDMember), alignof(p_LobbyDataUpdate_t->m_ulSteamIDMember));
      std::fprintf(stdout, "  {\"field\": \"m_bSuccess\", \"size\": %d, \"align\": %d}", sizeof(p_LobbyDataUpdate_t->m_bSuccess), alignof(p_LobbyDataUpdate_t->m_bSuccess));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LobbyDataUpdate_t), alignof(LobbyDataUpdate_t));
    std::fprintf(stdout, "}\n");
  }
  // LobbyChatUpdate_t
  { std::fprintf(stdout, ",\"LobbyChatUpdate_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LobbyChatUpdate_t    *p_LobbyChatUpdate_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDLobby\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyChatUpdate_t->m_ulSteamIDLobby), alignof(p_LobbyChatUpdate_t->m_ulSteamIDLobby));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDUserChanged\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyChatUpdate_t->m_ulSteamIDUserChanged), alignof(p_LobbyChatUpdate_t->m_ulSteamIDUserChanged));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDMakingChange\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyChatUpdate_t->m_ulSteamIDMakingChange), alignof(p_LobbyChatUpdate_t->m_ulSteamIDMakingChange));
      std::fprintf(stdout, "  {\"field\": \"m_rgfChatMemberStateChange\", \"size\": %d, \"align\": %d}", sizeof(p_LobbyChatUpdate_t->m_rgfChatMemberStateChange), alignof(p_LobbyChatUpdate_t->m_rgfChatMemberStateChange));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LobbyChatUpdate_t), alignof(LobbyChatUpdate_t));
    std::fprintf(stdout, "}\n");
  }
  // LobbyChatMsg_t
  { std::fprintf(stdout, ",\"LobbyChatMsg_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LobbyChatMsg_t    *p_LobbyChatMsg_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDLobby\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyChatMsg_t->m_ulSteamIDLobby), alignof(p_LobbyChatMsg_t->m_ulSteamIDLobby));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDUser\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyChatMsg_t->m_ulSteamIDUser), alignof(p_LobbyChatMsg_t->m_ulSteamIDUser));
      std::fprintf(stdout, "  {\"field\": \"m_eChatEntryType\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyChatMsg_t->m_eChatEntryType), alignof(p_LobbyChatMsg_t->m_eChatEntryType));
      std::fprintf(stdout, "  {\"field\": \"m_iChatID\", \"size\": %d, \"align\": %d}", sizeof(p_LobbyChatMsg_t->m_iChatID), alignof(p_LobbyChatMsg_t->m_iChatID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LobbyChatMsg_t), alignof(LobbyChatMsg_t));
    std::fprintf(stdout, "}\n");
  }
  // LobbyGameCreated_t
  { std::fprintf(stdout, ",\"LobbyGameCreated_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LobbyGameCreated_t    *p_LobbyGameCreated_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDLobby\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyGameCreated_t->m_ulSteamIDLobby), alignof(p_LobbyGameCreated_t->m_ulSteamIDLobby));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDGameServer\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyGameCreated_t->m_ulSteamIDGameServer), alignof(p_LobbyGameCreated_t->m_ulSteamIDGameServer));
      std::fprintf(stdout, "  {\"field\": \"m_unIP\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyGameCreated_t->m_unIP), alignof(p_LobbyGameCreated_t->m_unIP));
      std::fprintf(stdout, "  {\"field\": \"m_usPort\", \"size\": %d, \"align\": %d}", sizeof(p_LobbyGameCreated_t->m_usPort), alignof(p_LobbyGameCreated_t->m_usPort));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LobbyGameCreated_t), alignof(LobbyGameCreated_t));
    std::fprintf(stdout, "}\n");
  }
  // LobbyMatchList_t
  { std::fprintf(stdout, ",\"LobbyMatchList_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LobbyMatchList_t    *p_LobbyMatchList_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nLobbiesMatching\", \"size\": %d, \"align\": %d}", sizeof(p_LobbyMatchList_t->m_nLobbiesMatching), alignof(p_LobbyMatchList_t->m_nLobbiesMatching));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LobbyMatchList_t), alignof(LobbyMatchList_t));
    std::fprintf(stdout, "}\n");
  }
  // LobbyKicked_t
  { std::fprintf(stdout, ",\"LobbyKicked_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LobbyKicked_t    *p_LobbyKicked_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDLobby\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyKicked_t->m_ulSteamIDLobby), alignof(p_LobbyKicked_t->m_ulSteamIDLobby));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDAdmin\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyKicked_t->m_ulSteamIDAdmin), alignof(p_LobbyKicked_t->m_ulSteamIDAdmin));
      std::fprintf(stdout, "  {\"field\": \"m_bKickedDueToDisconnect\", \"size\": %d, \"align\": %d}", sizeof(p_LobbyKicked_t->m_bKickedDueToDisconnect), alignof(p_LobbyKicked_t->m_bKickedDueToDisconnect));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LobbyKicked_t), alignof(LobbyKicked_t));
    std::fprintf(stdout, "}\n");
  }
  // LobbyCreated_t
  { std::fprintf(stdout, ",\"LobbyCreated_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LobbyCreated_t    *p_LobbyCreated_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_LobbyCreated_t->m_eResult), alignof(p_LobbyCreated_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDLobby\", \"size\": %d, \"align\": %d}", sizeof(p_LobbyCreated_t->m_ulSteamIDLobby), alignof(p_LobbyCreated_t->m_ulSteamIDLobby));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LobbyCreated_t), alignof(LobbyCreated_t));
    std::fprintf(stdout, "}\n");
  }
  // PSNGameBootInviteResult_t
  { std::fprintf(stdout, ",\"PSNGameBootInviteResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct PSNGameBootInviteResult_t    *p_PSNGameBootInviteResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bGameBootInviteExists\", \"size\": %d, \"align\": %d},\n", sizeof(p_PSNGameBootInviteResult_t->m_bGameBootInviteExists), alignof(p_PSNGameBootInviteResult_t->m_bGameBootInviteExists));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDLobby\", \"size\": %d, \"align\": %d}", sizeof(p_PSNGameBootInviteResult_t->m_steamIDLobby), alignof(p_PSNGameBootInviteResult_t->m_steamIDLobby));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(PSNGameBootInviteResult_t), alignof(PSNGameBootInviteResult_t));
    std::fprintf(stdout, "}\n");
  }
  // FavoritesListAccountsUpdated_t
  { std::fprintf(stdout, ",\"FavoritesListAccountsUpdated_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FavoritesListAccountsUpdated_t    *p_FavoritesListAccountsUpdated_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_FavoritesListAccountsUpdated_t->m_eResult), alignof(p_FavoritesListAccountsUpdated_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FavoritesListAccountsUpdated_t), alignof(FavoritesListAccountsUpdated_t));
    std::fprintf(stdout, "}\n");
  }
  // SearchForGameProgressCallback_t
  { std::fprintf(stdout, ",\"SearchForGameProgressCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SearchForGameProgressCallback_t    *p_SearchForGameProgressCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ullSearchID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameProgressCallback_t->m_ullSearchID), alignof(p_SearchForGameProgressCallback_t->m_ullSearchID));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameProgressCallback_t->m_eResult), alignof(p_SearchForGameProgressCallback_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_lobbyID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameProgressCallback_t->m_lobbyID), alignof(p_SearchForGameProgressCallback_t->m_lobbyID));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDEndedSearch\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameProgressCallback_t->m_steamIDEndedSearch), alignof(p_SearchForGameProgressCallback_t->m_steamIDEndedSearch));
      std::fprintf(stdout, "  {\"field\": \"m_nSecondsRemainingEstimate\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameProgressCallback_t->m_nSecondsRemainingEstimate), alignof(p_SearchForGameProgressCallback_t->m_nSecondsRemainingEstimate));
      std::fprintf(stdout, "  {\"field\": \"m_cPlayersSearching\", \"size\": %d, \"align\": %d}", sizeof(p_SearchForGameProgressCallback_t->m_cPlayersSearching), alignof(p_SearchForGameProgressCallback_t->m_cPlayersSearching));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SearchForGameProgressCallback_t), alignof(SearchForGameProgressCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // SearchForGameResultCallback_t
  { std::fprintf(stdout, ",\"SearchForGameResultCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SearchForGameResultCallback_t    *p_SearchForGameResultCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ullSearchID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameResultCallback_t->m_ullSearchID), alignof(p_SearchForGameResultCallback_t->m_ullSearchID));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameResultCallback_t->m_eResult), alignof(p_SearchForGameResultCallback_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nCountPlayersInGame\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameResultCallback_t->m_nCountPlayersInGame), alignof(p_SearchForGameResultCallback_t->m_nCountPlayersInGame));
      std::fprintf(stdout, "  {\"field\": \"m_nCountAcceptedGame\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameResultCallback_t->m_nCountAcceptedGame), alignof(p_SearchForGameResultCallback_t->m_nCountAcceptedGame));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDHost\", \"size\": %d, \"align\": %d},\n", sizeof(p_SearchForGameResultCallback_t->m_steamIDHost), alignof(p_SearchForGameResultCallback_t->m_steamIDHost));
      std::fprintf(stdout, "  {\"field\": \"m_bFinalCallback\", \"size\": %d, \"align\": %d}", sizeof(p_SearchForGameResultCallback_t->m_bFinalCallback), alignof(p_SearchForGameResultCallback_t->m_bFinalCallback));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SearchForGameResultCallback_t), alignof(SearchForGameResultCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // RequestPlayersForGameProgressCallback_t
  { std::fprintf(stdout, ",\"RequestPlayersForGameProgressCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RequestPlayersForGameProgressCallback_t    *p_RequestPlayersForGameProgressCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameProgressCallback_t->m_eResult), alignof(p_RequestPlayersForGameProgressCallback_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_ullSearchID\", \"size\": %d, \"align\": %d}", sizeof(p_RequestPlayersForGameProgressCallback_t->m_ullSearchID), alignof(p_RequestPlayersForGameProgressCallback_t->m_ullSearchID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RequestPlayersForGameProgressCallback_t), alignof(RequestPlayersForGameProgressCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // RequestPlayersForGameResultCallback_t
  { std::fprintf(stdout, ",\"RequestPlayersForGameResultCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RequestPlayersForGameResultCallback_t    *p_RequestPlayersForGameResultCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameResultCallback_t->m_eResult), alignof(p_RequestPlayersForGameResultCallback_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_ullSearchID\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameResultCallback_t->m_ullSearchID), alignof(p_RequestPlayersForGameResultCallback_t->m_ullSearchID));
      std::fprintf(stdout, "  {\"field\": \"m_SteamIDPlayerFound\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameResultCallback_t->m_SteamIDPlayerFound), alignof(p_RequestPlayersForGameResultCallback_t->m_SteamIDPlayerFound));
      std::fprintf(stdout, "  {\"field\": \"m_SteamIDLobby\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameResultCallback_t->m_SteamIDLobby), alignof(p_RequestPlayersForGameResultCallback_t->m_SteamIDLobby));
      std::fprintf(stdout, "  {\"field\": \"m_ePlayerAcceptState\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameResultCallback_t->m_ePlayerAcceptState), alignof(p_RequestPlayersForGameResultCallback_t->m_ePlayerAcceptState));
      std::fprintf(stdout, "  {\"field\": \"m_nPlayerIndex\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameResultCallback_t->m_nPlayerIndex), alignof(p_RequestPlayersForGameResultCallback_t->m_nPlayerIndex));
      std::fprintf(stdout, "  {\"field\": \"m_nTotalPlayersFound\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameResultCallback_t->m_nTotalPlayersFound), alignof(p_RequestPlayersForGameResultCallback_t->m_nTotalPlayersFound));
      std::fprintf(stdout, "  {\"field\": \"m_nTotalPlayersAcceptedGame\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameResultCallback_t->m_nTotalPlayersAcceptedGame), alignof(p_RequestPlayersForGameResultCallback_t->m_nTotalPlayersAcceptedGame));
      std::fprintf(stdout, "  {\"field\": \"m_nSuggestedTeamIndex\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameResultCallback_t->m_nSuggestedTeamIndex), alignof(p_RequestPlayersForGameResultCallback_t->m_nSuggestedTeamIndex));
      std::fprintf(stdout, "  {\"field\": \"m_ullUniqueGameID\", \"size\": %d, \"align\": %d}", sizeof(p_RequestPlayersForGameResultCallback_t->m_ullUniqueGameID), alignof(p_RequestPlayersForGameResultCallback_t->m_ullUniqueGameID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RequestPlayersForGameResultCallback_t), alignof(RequestPlayersForGameResultCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // RequestPlayersForGameFinalResultCallback_t
  { std::fprintf(stdout, ",\"RequestPlayersForGameFinalResultCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RequestPlayersForGameFinalResultCallback_t    *p_RequestPlayersForGameFinalResultCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameFinalResultCallback_t->m_eResult), alignof(p_RequestPlayersForGameFinalResultCallback_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_ullSearchID\", \"size\": %d, \"align\": %d},\n", sizeof(p_RequestPlayersForGameFinalResultCallback_t->m_ullSearchID), alignof(p_RequestPlayersForGameFinalResultCallback_t->m_ullSearchID));
      std::fprintf(stdout, "  {\"field\": \"m_ullUniqueGameID\", \"size\": %d, \"align\": %d}", sizeof(p_RequestPlayersForGameFinalResultCallback_t->m_ullUniqueGameID), alignof(p_RequestPlayersForGameFinalResultCallback_t->m_ullUniqueGameID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RequestPlayersForGameFinalResultCallback_t), alignof(RequestPlayersForGameFinalResultCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // SubmitPlayerResultResultCallback_t
  { std::fprintf(stdout, ",\"SubmitPlayerResultResultCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SubmitPlayerResultResultCallback_t    *p_SubmitPlayerResultResultCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_SubmitPlayerResultResultCallback_t->m_eResult), alignof(p_SubmitPlayerResultResultCallback_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"ullUniqueGameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SubmitPlayerResultResultCallback_t->ullUniqueGameID), alignof(p_SubmitPlayerResultResultCallback_t->ullUniqueGameID));
      std::fprintf(stdout, "  {\"field\": \"steamIDPlayer\", \"size\": %d, \"align\": %d}", sizeof(p_SubmitPlayerResultResultCallback_t->steamIDPlayer), alignof(p_SubmitPlayerResultResultCallback_t->steamIDPlayer));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SubmitPlayerResultResultCallback_t), alignof(SubmitPlayerResultResultCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // EndGameResultCallback_t
  { std::fprintf(stdout, ",\"EndGameResultCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct EndGameResultCallback_t    *p_EndGameResultCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_EndGameResultCallback_t->m_eResult), alignof(p_EndGameResultCallback_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"ullUniqueGameID\", \"size\": %d, \"align\": %d}", sizeof(p_EndGameResultCallback_t->ullUniqueGameID), alignof(p_EndGameResultCallback_t->ullUniqueGameID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(EndGameResultCallback_t), alignof(EndGameResultCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // JoinPartyCallback_t
  { std::fprintf(stdout, ",\"JoinPartyCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct JoinPartyCallback_t    *p_JoinPartyCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_JoinPartyCallback_t->m_eResult), alignof(p_JoinPartyCallback_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_ulBeaconID\", \"size\": %d, \"align\": %d},\n", sizeof(p_JoinPartyCallback_t->m_ulBeaconID), alignof(p_JoinPartyCallback_t->m_ulBeaconID));
      std::fprintf(stdout, "  {\"field\": \"m_SteamIDBeaconOwner\", \"size\": %d, \"align\": %d},\n", sizeof(p_JoinPartyCallback_t->m_SteamIDBeaconOwner), alignof(p_JoinPartyCallback_t->m_SteamIDBeaconOwner));
      std::fprintf(stdout, "  {\"field\": \"m_rgchConnectString\", \"size\": %d, \"align\": %d}", sizeof(p_JoinPartyCallback_t->m_rgchConnectString), alignof(p_JoinPartyCallback_t->m_rgchConnectString));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(JoinPartyCallback_t), alignof(JoinPartyCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // CreateBeaconCallback_t
  { std::fprintf(stdout, ",\"CreateBeaconCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct CreateBeaconCallback_t    *p_CreateBeaconCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_CreateBeaconCallback_t->m_eResult), alignof(p_CreateBeaconCallback_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_ulBeaconID\", \"size\": %d, \"align\": %d}", sizeof(p_CreateBeaconCallback_t->m_ulBeaconID), alignof(p_CreateBeaconCallback_t->m_ulBeaconID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(CreateBeaconCallback_t), alignof(CreateBeaconCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // ReservationNotificationCallback_t
  { std::fprintf(stdout, ",\"ReservationNotificationCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ReservationNotificationCallback_t    *p_ReservationNotificationCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulBeaconID\", \"size\": %d, \"align\": %d},\n", sizeof(p_ReservationNotificationCallback_t->m_ulBeaconID), alignof(p_ReservationNotificationCallback_t->m_ulBeaconID));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDJoiner\", \"size\": %d, \"align\": %d}", sizeof(p_ReservationNotificationCallback_t->m_steamIDJoiner), alignof(p_ReservationNotificationCallback_t->m_steamIDJoiner));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ReservationNotificationCallback_t), alignof(ReservationNotificationCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // ChangeNumOpenSlotsCallback_t
  { std::fprintf(stdout, ",\"ChangeNumOpenSlotsCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ChangeNumOpenSlotsCallback_t    *p_ChangeNumOpenSlotsCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_ChangeNumOpenSlotsCallback_t->m_eResult), alignof(p_ChangeNumOpenSlotsCallback_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ChangeNumOpenSlotsCallback_t), alignof(ChangeNumOpenSlotsCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // AvailableBeaconLocationsUpdated_t
  { std::fprintf(stdout, ",\"AvailableBeaconLocationsUpdated_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct AvailableBeaconLocationsUpdated_t    *p_AvailableBeaconLocationsUpdated_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(AvailableBeaconLocationsUpdated_t), alignof(AvailableBeaconLocationsUpdated_t));
    std::fprintf(stdout, "}\n");
  }
  // ActiveBeaconsUpdated_t
  { std::fprintf(stdout, ",\"ActiveBeaconsUpdated_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ActiveBeaconsUpdated_t    *p_ActiveBeaconsUpdated_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ActiveBeaconsUpdated_t), alignof(ActiveBeaconsUpdated_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageFileShareResult_t
  { std::fprintf(stdout, ",\"RemoteStorageFileShareResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageFileShareResult_t    *p_RemoteStorageFileShareResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageFileShareResult_t->m_eResult), alignof(p_RemoteStorageFileShareResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_hFile\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageFileShareResult_t->m_hFile), alignof(p_RemoteStorageFileShareResult_t->m_hFile));
      std::fprintf(stdout, "  {\"field\": \"m_rgchFilename\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageFileShareResult_t->m_rgchFilename), alignof(p_RemoteStorageFileShareResult_t->m_rgchFilename));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageFileShareResult_t), alignof(RemoteStorageFileShareResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStoragePublishFileResult_t
  { std::fprintf(stdout, ",\"RemoteStoragePublishFileResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStoragePublishFileResult_t    *p_RemoteStoragePublishFileResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStoragePublishFileResult_t->m_eResult), alignof(p_RemoteStoragePublishFileResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStoragePublishFileResult_t->m_nPublishedFileId), alignof(p_RemoteStoragePublishFileResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_bUserNeedsToAcceptWorkshopLegalAgreement\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStoragePublishFileResult_t->m_bUserNeedsToAcceptWorkshopLegalAgreement), alignof(p_RemoteStoragePublishFileResult_t->m_bUserNeedsToAcceptWorkshopLegalAgreement));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStoragePublishFileResult_t), alignof(RemoteStoragePublishFileResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageDeletePublishedFileResult_t
  { std::fprintf(stdout, ",\"RemoteStorageDeletePublishedFileResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageDeletePublishedFileResult_t    *p_RemoteStorageDeletePublishedFileResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageDeletePublishedFileResult_t->m_eResult), alignof(p_RemoteStorageDeletePublishedFileResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageDeletePublishedFileResult_t->m_nPublishedFileId), alignof(p_RemoteStorageDeletePublishedFileResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageDeletePublishedFileResult_t), alignof(RemoteStorageDeletePublishedFileResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageEnumerateUserPublishedFilesResult_t
  { std::fprintf(stdout, ",\"RemoteStorageEnumerateUserPublishedFilesResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageEnumerateUserPublishedFilesResult_t    *p_RemoteStorageEnumerateUserPublishedFilesResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserPublishedFilesResult_t->m_eResult), alignof(p_RemoteStorageEnumerateUserPublishedFilesResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nResultsReturned\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserPublishedFilesResult_t->m_nResultsReturned), alignof(p_RemoteStorageEnumerateUserPublishedFilesResult_t->m_nResultsReturned));
      std::fprintf(stdout, "  {\"field\": \"m_nTotalResultCount\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserPublishedFilesResult_t->m_nTotalResultCount), alignof(p_RemoteStorageEnumerateUserPublishedFilesResult_t->m_nTotalResultCount));
      std::fprintf(stdout, "  {\"field\": \"m_rgPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageEnumerateUserPublishedFilesResult_t->m_rgPublishedFileId), alignof(p_RemoteStorageEnumerateUserPublishedFilesResult_t->m_rgPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageEnumerateUserPublishedFilesResult_t), alignof(RemoteStorageEnumerateUserPublishedFilesResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageSubscribePublishedFileResult_t
  { std::fprintf(stdout, ",\"RemoteStorageSubscribePublishedFileResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageSubscribePublishedFileResult_t    *p_RemoteStorageSubscribePublishedFileResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageSubscribePublishedFileResult_t->m_eResult), alignof(p_RemoteStorageSubscribePublishedFileResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageSubscribePublishedFileResult_t->m_nPublishedFileId), alignof(p_RemoteStorageSubscribePublishedFileResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageSubscribePublishedFileResult_t), alignof(RemoteStorageSubscribePublishedFileResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageEnumerateUserSubscribedFilesResult_t
  { std::fprintf(stdout, ",\"RemoteStorageEnumerateUserSubscribedFilesResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageEnumerateUserSubscribedFilesResult_t    *p_RemoteStorageEnumerateUserSubscribedFilesResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_eResult), alignof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nResultsReturned\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_nResultsReturned), alignof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_nResultsReturned));
      std::fprintf(stdout, "  {\"field\": \"m_nTotalResultCount\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_nTotalResultCount), alignof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_nTotalResultCount));
      std::fprintf(stdout, "  {\"field\": \"m_rgPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_rgPublishedFileId), alignof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_rgPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_rgRTimeSubscribed\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_rgRTimeSubscribed), alignof(p_RemoteStorageEnumerateUserSubscribedFilesResult_t->m_rgRTimeSubscribed));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageEnumerateUserSubscribedFilesResult_t), alignof(RemoteStorageEnumerateUserSubscribedFilesResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageUnsubscribePublishedFileResult_t
  { std::fprintf(stdout, ",\"RemoteStorageUnsubscribePublishedFileResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageUnsubscribePublishedFileResult_t    *p_RemoteStorageUnsubscribePublishedFileResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageUnsubscribePublishedFileResult_t->m_eResult), alignof(p_RemoteStorageUnsubscribePublishedFileResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageUnsubscribePublishedFileResult_t->m_nPublishedFileId), alignof(p_RemoteStorageUnsubscribePublishedFileResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageUnsubscribePublishedFileResult_t), alignof(RemoteStorageUnsubscribePublishedFileResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageUpdatePublishedFileResult_t
  { std::fprintf(stdout, ",\"RemoteStorageUpdatePublishedFileResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageUpdatePublishedFileResult_t    *p_RemoteStorageUpdatePublishedFileResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageUpdatePublishedFileResult_t->m_eResult), alignof(p_RemoteStorageUpdatePublishedFileResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageUpdatePublishedFileResult_t->m_nPublishedFileId), alignof(p_RemoteStorageUpdatePublishedFileResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_bUserNeedsToAcceptWorkshopLegalAgreement\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageUpdatePublishedFileResult_t->m_bUserNeedsToAcceptWorkshopLegalAgreement), alignof(p_RemoteStorageUpdatePublishedFileResult_t->m_bUserNeedsToAcceptWorkshopLegalAgreement));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageUpdatePublishedFileResult_t), alignof(RemoteStorageUpdatePublishedFileResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageDownloadUGCResult_t
  { std::fprintf(stdout, ",\"RemoteStorageDownloadUGCResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageDownloadUGCResult_t    *p_RemoteStorageDownloadUGCResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageDownloadUGCResult_t->m_eResult), alignof(p_RemoteStorageDownloadUGCResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_hFile\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageDownloadUGCResult_t->m_hFile), alignof(p_RemoteStorageDownloadUGCResult_t->m_hFile));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageDownloadUGCResult_t->m_nAppID), alignof(p_RemoteStorageDownloadUGCResult_t->m_nAppID));
      std::fprintf(stdout, "  {\"field\": \"m_nSizeInBytes\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageDownloadUGCResult_t->m_nSizeInBytes), alignof(p_RemoteStorageDownloadUGCResult_t->m_nSizeInBytes));
      std::fprintf(stdout, "  {\"field\": \"m_pchFileName\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageDownloadUGCResult_t->m_pchFileName), alignof(p_RemoteStorageDownloadUGCResult_t->m_pchFileName));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDOwner\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageDownloadUGCResult_t->m_ulSteamIDOwner), alignof(p_RemoteStorageDownloadUGCResult_t->m_ulSteamIDOwner));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageDownloadUGCResult_t), alignof(RemoteStorageDownloadUGCResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageGetPublishedFileDetailsResult_t
  { std::fprintf(stdout, ",\"RemoteStorageGetPublishedFileDetailsResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageGetPublishedFileDetailsResult_t    *p_RemoteStorageGetPublishedFileDetailsResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_eResult), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nPublishedFileId), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nCreatorAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nCreatorAppID), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nCreatorAppID));
      std::fprintf(stdout, "  {\"field\": \"m_nConsumerAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nConsumerAppID), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nConsumerAppID));
      std::fprintf(stdout, "  {\"field\": \"m_rgchTitle\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rgchTitle), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rgchTitle));
      std::fprintf(stdout, "  {\"field\": \"m_rgchDescription\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rgchDescription), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rgchDescription));
      std::fprintf(stdout, "  {\"field\": \"m_hFile\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_hFile), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_hFile));
      std::fprintf(stdout, "  {\"field\": \"m_hPreviewFile\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_hPreviewFile), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_hPreviewFile));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDOwner\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_ulSteamIDOwner), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_ulSteamIDOwner));
      std::fprintf(stdout, "  {\"field\": \"m_rtimeCreated\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rtimeCreated), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rtimeCreated));
      std::fprintf(stdout, "  {\"field\": \"m_rtimeUpdated\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rtimeUpdated), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rtimeUpdated));
      std::fprintf(stdout, "  {\"field\": \"m_eVisibility\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_eVisibility), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_eVisibility));
      std::fprintf(stdout, "  {\"field\": \"m_bBanned\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_bBanned), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_bBanned));
      std::fprintf(stdout, "  {\"field\": \"m_rgchTags\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rgchTags), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rgchTags));
      std::fprintf(stdout, "  {\"field\": \"m_bTagsTruncated\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_bTagsTruncated), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_bTagsTruncated));
      std::fprintf(stdout, "  {\"field\": \"m_pchFileName\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_pchFileName), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_pchFileName));
      std::fprintf(stdout, "  {\"field\": \"m_nFileSize\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nFileSize), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nFileSize));
      std::fprintf(stdout, "  {\"field\": \"m_nPreviewFileSize\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nPreviewFileSize), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_nPreviewFileSize));
      std::fprintf(stdout, "  {\"field\": \"m_rgchURL\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rgchURL), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_rgchURL));
      std::fprintf(stdout, "  {\"field\": \"m_eFileType\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_eFileType), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_eFileType));
      std::fprintf(stdout, "  {\"field\": \"m_bAcceptedForUse\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_bAcceptedForUse), alignof(p_RemoteStorageGetPublishedFileDetailsResult_t->m_bAcceptedForUse));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageGetPublishedFileDetailsResult_t), alignof(RemoteStorageGetPublishedFileDetailsResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageEnumerateWorkshopFilesResult_t
  { std::fprintf(stdout, ",\"RemoteStorageEnumerateWorkshopFilesResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageEnumerateWorkshopFilesResult_t    *p_RemoteStorageEnumerateWorkshopFilesResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_eResult), alignof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nResultsReturned\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_nResultsReturned), alignof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_nResultsReturned));
      std::fprintf(stdout, "  {\"field\": \"m_nTotalResultCount\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_nTotalResultCount), alignof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_nTotalResultCount));
      std::fprintf(stdout, "  {\"field\": \"m_rgPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_rgPublishedFileId), alignof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_rgPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_rgScore\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_rgScore), alignof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_rgScore));
      std::fprintf(stdout, "  {\"field\": \"m_nAppId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_nAppId), alignof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_nAppId));
      std::fprintf(stdout, "  {\"field\": \"m_unStartIndex\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_unStartIndex), alignof(p_RemoteStorageEnumerateWorkshopFilesResult_t->m_unStartIndex));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageEnumerateWorkshopFilesResult_t), alignof(RemoteStorageEnumerateWorkshopFilesResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageGetPublishedItemVoteDetailsResult_t
  { std::fprintf(stdout, ",\"RemoteStorageGetPublishedItemVoteDetailsResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageGetPublishedItemVoteDetailsResult_t    *p_RemoteStorageGetPublishedItemVoteDetailsResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_eResult), alignof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_unPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_unPublishedFileId), alignof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_unPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nVotesFor\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_nVotesFor), alignof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_nVotesFor));
      std::fprintf(stdout, "  {\"field\": \"m_nVotesAgainst\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_nVotesAgainst), alignof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_nVotesAgainst));
      std::fprintf(stdout, "  {\"field\": \"m_nReports\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_nReports), alignof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_nReports));
      std::fprintf(stdout, "  {\"field\": \"m_fScore\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_fScore), alignof(p_RemoteStorageGetPublishedItemVoteDetailsResult_t->m_fScore));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageGetPublishedItemVoteDetailsResult_t), alignof(RemoteStorageGetPublishedItemVoteDetailsResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStoragePublishedFileSubscribed_t
  { std::fprintf(stdout, ",\"RemoteStoragePublishedFileSubscribed_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStoragePublishedFileSubscribed_t    *p_RemoteStoragePublishedFileSubscribed_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStoragePublishedFileSubscribed_t->m_nPublishedFileId), alignof(p_RemoteStoragePublishedFileSubscribed_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStoragePublishedFileSubscribed_t->m_nAppID), alignof(p_RemoteStoragePublishedFileSubscribed_t->m_nAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStoragePublishedFileSubscribed_t), alignof(RemoteStoragePublishedFileSubscribed_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStoragePublishedFileUnsubscribed_t
  { std::fprintf(stdout, ",\"RemoteStoragePublishedFileUnsubscribed_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStoragePublishedFileUnsubscribed_t    *p_RemoteStoragePublishedFileUnsubscribed_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStoragePublishedFileUnsubscribed_t->m_nPublishedFileId), alignof(p_RemoteStoragePublishedFileUnsubscribed_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStoragePublishedFileUnsubscribed_t->m_nAppID), alignof(p_RemoteStoragePublishedFileUnsubscribed_t->m_nAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStoragePublishedFileUnsubscribed_t), alignof(RemoteStoragePublishedFileUnsubscribed_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStoragePublishedFileDeleted_t
  { std::fprintf(stdout, ",\"RemoteStoragePublishedFileDeleted_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStoragePublishedFileDeleted_t    *p_RemoteStoragePublishedFileDeleted_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStoragePublishedFileDeleted_t->m_nPublishedFileId), alignof(p_RemoteStoragePublishedFileDeleted_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStoragePublishedFileDeleted_t->m_nAppID), alignof(p_RemoteStoragePublishedFileDeleted_t->m_nAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStoragePublishedFileDeleted_t), alignof(RemoteStoragePublishedFileDeleted_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageUpdateUserPublishedItemVoteResult_t
  { std::fprintf(stdout, ",\"RemoteStorageUpdateUserPublishedItemVoteResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageUpdateUserPublishedItemVoteResult_t    *p_RemoteStorageUpdateUserPublishedItemVoteResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageUpdateUserPublishedItemVoteResult_t->m_eResult), alignof(p_RemoteStorageUpdateUserPublishedItemVoteResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageUpdateUserPublishedItemVoteResult_t->m_nPublishedFileId), alignof(p_RemoteStorageUpdateUserPublishedItemVoteResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageUpdateUserPublishedItemVoteResult_t), alignof(RemoteStorageUpdateUserPublishedItemVoteResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageUserVoteDetails_t
  { std::fprintf(stdout, ",\"RemoteStorageUserVoteDetails_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageUserVoteDetails_t    *p_RemoteStorageUserVoteDetails_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageUserVoteDetails_t->m_eResult), alignof(p_RemoteStorageUserVoteDetails_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageUserVoteDetails_t->m_nPublishedFileId), alignof(p_RemoteStorageUserVoteDetails_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_eVote\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageUserVoteDetails_t->m_eVote), alignof(p_RemoteStorageUserVoteDetails_t->m_eVote));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageUserVoteDetails_t), alignof(RemoteStorageUserVoteDetails_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
  { std::fprintf(stdout, ",\"RemoteStorageEnumerateUserSharedWorkshopFilesResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t    *p_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t->m_eResult), alignof(p_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nResultsReturned\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t->m_nResultsReturned), alignof(p_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t->m_nResultsReturned));
      std::fprintf(stdout, "  {\"field\": \"m_nTotalResultCount\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t->m_nTotalResultCount), alignof(p_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t->m_nTotalResultCount));
      std::fprintf(stdout, "  {\"field\": \"m_rgPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t->m_rgPublishedFileId), alignof(p_RemoteStorageEnumerateUserSharedWorkshopFilesResult_t->m_rgPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageEnumerateUserSharedWorkshopFilesResult_t), alignof(RemoteStorageEnumerateUserSharedWorkshopFilesResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageSetUserPublishedFileActionResult_t
  { std::fprintf(stdout, ",\"RemoteStorageSetUserPublishedFileActionResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageSetUserPublishedFileActionResult_t    *p_RemoteStorageSetUserPublishedFileActionResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageSetUserPublishedFileActionResult_t->m_eResult), alignof(p_RemoteStorageSetUserPublishedFileActionResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageSetUserPublishedFileActionResult_t->m_nPublishedFileId), alignof(p_RemoteStorageSetUserPublishedFileActionResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_eAction\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageSetUserPublishedFileActionResult_t->m_eAction), alignof(p_RemoteStorageSetUserPublishedFileActionResult_t->m_eAction));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageSetUserPublishedFileActionResult_t), alignof(RemoteStorageSetUserPublishedFileActionResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageEnumeratePublishedFilesByUserActionResult_t
  { std::fprintf(stdout, ",\"RemoteStorageEnumeratePublishedFilesByUserActionResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t    *p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_eResult), alignof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_eAction\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_eAction), alignof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_eAction));
      std::fprintf(stdout, "  {\"field\": \"m_nResultsReturned\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_nResultsReturned), alignof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_nResultsReturned));
      std::fprintf(stdout, "  {\"field\": \"m_nTotalResultCount\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_nTotalResultCount), alignof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_nTotalResultCount));
      std::fprintf(stdout, "  {\"field\": \"m_rgPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_rgPublishedFileId), alignof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_rgPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_rgRTimeUpdated\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_rgRTimeUpdated), alignof(p_RemoteStorageEnumeratePublishedFilesByUserActionResult_t->m_rgRTimeUpdated));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageEnumeratePublishedFilesByUserActionResult_t), alignof(RemoteStorageEnumeratePublishedFilesByUserActionResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStoragePublishFileProgress_t
  { std::fprintf(stdout, ",\"RemoteStoragePublishFileProgress_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStoragePublishFileProgress_t    *p_RemoteStoragePublishFileProgress_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_dPercentFile\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStoragePublishFileProgress_t->m_dPercentFile), alignof(p_RemoteStoragePublishFileProgress_t->m_dPercentFile));
      std::fprintf(stdout, "  {\"field\": \"m_bPreview\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStoragePublishFileProgress_t->m_bPreview), alignof(p_RemoteStoragePublishFileProgress_t->m_bPreview));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStoragePublishFileProgress_t), alignof(RemoteStoragePublishFileProgress_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStoragePublishedFileUpdated_t
  { std::fprintf(stdout, ",\"RemoteStoragePublishedFileUpdated_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStoragePublishedFileUpdated_t    *p_RemoteStoragePublishedFileUpdated_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStoragePublishedFileUpdated_t->m_nPublishedFileId), alignof(p_RemoteStoragePublishedFileUpdated_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStoragePublishedFileUpdated_t->m_nAppID), alignof(p_RemoteStoragePublishedFileUpdated_t->m_nAppID));
      std::fprintf(stdout, "  {\"field\": \"m_ulUnused\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStoragePublishedFileUpdated_t->m_ulUnused), alignof(p_RemoteStoragePublishedFileUpdated_t->m_ulUnused));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStoragePublishedFileUpdated_t), alignof(RemoteStoragePublishedFileUpdated_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageFileWriteAsyncComplete_t
  { std::fprintf(stdout, ",\"RemoteStorageFileWriteAsyncComplete_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageFileWriteAsyncComplete_t    *p_RemoteStorageFileWriteAsyncComplete_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageFileWriteAsyncComplete_t->m_eResult), alignof(p_RemoteStorageFileWriteAsyncComplete_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageFileWriteAsyncComplete_t), alignof(RemoteStorageFileWriteAsyncComplete_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageFileReadAsyncComplete_t
  { std::fprintf(stdout, ",\"RemoteStorageFileReadAsyncComplete_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageFileReadAsyncComplete_t    *p_RemoteStorageFileReadAsyncComplete_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hFileReadAsync\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageFileReadAsyncComplete_t->m_hFileReadAsync), alignof(p_RemoteStorageFileReadAsyncComplete_t->m_hFileReadAsync));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageFileReadAsyncComplete_t->m_eResult), alignof(p_RemoteStorageFileReadAsyncComplete_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nOffset\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoteStorageFileReadAsyncComplete_t->m_nOffset), alignof(p_RemoteStorageFileReadAsyncComplete_t->m_nOffset));
      std::fprintf(stdout, "  {\"field\": \"m_cubRead\", \"size\": %d, \"align\": %d}", sizeof(p_RemoteStorageFileReadAsyncComplete_t->m_cubRead), alignof(p_RemoteStorageFileReadAsyncComplete_t->m_cubRead));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageFileReadAsyncComplete_t), alignof(RemoteStorageFileReadAsyncComplete_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoteStorageLocalFileChange_t
  { std::fprintf(stdout, ",\"RemoteStorageLocalFileChange_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoteStorageLocalFileChange_t    *p_RemoteStorageLocalFileChange_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoteStorageLocalFileChange_t), alignof(RemoteStorageLocalFileChange_t));
    std::fprintf(stdout, "}\n");
  }
  // UserStatsReceived_t
  { std::fprintf(stdout, ",\"UserStatsReceived_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct UserStatsReceived_t    *p_UserStatsReceived_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nGameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserStatsReceived_t->m_nGameID), alignof(p_UserStatsReceived_t->m_nGameID));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserStatsReceived_t->m_eResult), alignof(p_UserStatsReceived_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d}", sizeof(p_UserStatsReceived_t->m_steamIDUser), alignof(p_UserStatsReceived_t->m_steamIDUser));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(UserStatsReceived_t), alignof(UserStatsReceived_t));
    std::fprintf(stdout, "}\n");
  }
  // UserStatsStored_t
  { std::fprintf(stdout, ",\"UserStatsStored_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct UserStatsStored_t    *p_UserStatsStored_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nGameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserStatsStored_t->m_nGameID), alignof(p_UserStatsStored_t->m_nGameID));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_UserStatsStored_t->m_eResult), alignof(p_UserStatsStored_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(UserStatsStored_t), alignof(UserStatsStored_t));
    std::fprintf(stdout, "}\n");
  }
  // UserAchievementStored_t
  { std::fprintf(stdout, ",\"UserAchievementStored_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct UserAchievementStored_t    *p_UserAchievementStored_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nGameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserAchievementStored_t->m_nGameID), alignof(p_UserAchievementStored_t->m_nGameID));
      std::fprintf(stdout, "  {\"field\": \"m_bGroupAchievement\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserAchievementStored_t->m_bGroupAchievement), alignof(p_UserAchievementStored_t->m_bGroupAchievement));
      std::fprintf(stdout, "  {\"field\": \"m_rgchAchievementName\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserAchievementStored_t->m_rgchAchievementName), alignof(p_UserAchievementStored_t->m_rgchAchievementName));
      std::fprintf(stdout, "  {\"field\": \"m_nCurProgress\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserAchievementStored_t->m_nCurProgress), alignof(p_UserAchievementStored_t->m_nCurProgress));
      std::fprintf(stdout, "  {\"field\": \"m_nMaxProgress\", \"size\": %d, \"align\": %d}", sizeof(p_UserAchievementStored_t->m_nMaxProgress), alignof(p_UserAchievementStored_t->m_nMaxProgress));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(UserAchievementStored_t), alignof(UserAchievementStored_t));
    std::fprintf(stdout, "}\n");
  }
  // LeaderboardFindResult_t
  { std::fprintf(stdout, ",\"LeaderboardFindResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LeaderboardFindResult_t    *p_LeaderboardFindResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hSteamLeaderboard\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardFindResult_t->m_hSteamLeaderboard), alignof(p_LeaderboardFindResult_t->m_hSteamLeaderboard));
      std::fprintf(stdout, "  {\"field\": \"m_bLeaderboardFound\", \"size\": %d, \"align\": %d}", sizeof(p_LeaderboardFindResult_t->m_bLeaderboardFound), alignof(p_LeaderboardFindResult_t->m_bLeaderboardFound));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LeaderboardFindResult_t), alignof(LeaderboardFindResult_t));
    std::fprintf(stdout, "}\n");
  }
  // LeaderboardScoresDownloaded_t
  { std::fprintf(stdout, ",\"LeaderboardScoresDownloaded_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LeaderboardScoresDownloaded_t    *p_LeaderboardScoresDownloaded_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hSteamLeaderboard\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardScoresDownloaded_t->m_hSteamLeaderboard), alignof(p_LeaderboardScoresDownloaded_t->m_hSteamLeaderboard));
      std::fprintf(stdout, "  {\"field\": \"m_hSteamLeaderboardEntries\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardScoresDownloaded_t->m_hSteamLeaderboardEntries), alignof(p_LeaderboardScoresDownloaded_t->m_hSteamLeaderboardEntries));
      std::fprintf(stdout, "  {\"field\": \"m_cEntryCount\", \"size\": %d, \"align\": %d}", sizeof(p_LeaderboardScoresDownloaded_t->m_cEntryCount), alignof(p_LeaderboardScoresDownloaded_t->m_cEntryCount));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LeaderboardScoresDownloaded_t), alignof(LeaderboardScoresDownloaded_t));
    std::fprintf(stdout, "}\n");
  }
  // LeaderboardScoreUploaded_t
  { std::fprintf(stdout, ",\"LeaderboardScoreUploaded_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LeaderboardScoreUploaded_t    *p_LeaderboardScoreUploaded_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bSuccess\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardScoreUploaded_t->m_bSuccess), alignof(p_LeaderboardScoreUploaded_t->m_bSuccess));
      std::fprintf(stdout, "  {\"field\": \"m_hSteamLeaderboard\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardScoreUploaded_t->m_hSteamLeaderboard), alignof(p_LeaderboardScoreUploaded_t->m_hSteamLeaderboard));
      std::fprintf(stdout, "  {\"field\": \"m_nScore\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardScoreUploaded_t->m_nScore), alignof(p_LeaderboardScoreUploaded_t->m_nScore));
      std::fprintf(stdout, "  {\"field\": \"m_bScoreChanged\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardScoreUploaded_t->m_bScoreChanged), alignof(p_LeaderboardScoreUploaded_t->m_bScoreChanged));
      std::fprintf(stdout, "  {\"field\": \"m_nGlobalRankNew\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardScoreUploaded_t->m_nGlobalRankNew), alignof(p_LeaderboardScoreUploaded_t->m_nGlobalRankNew));
      std::fprintf(stdout, "  {\"field\": \"m_nGlobalRankPrevious\", \"size\": %d, \"align\": %d}", sizeof(p_LeaderboardScoreUploaded_t->m_nGlobalRankPrevious), alignof(p_LeaderboardScoreUploaded_t->m_nGlobalRankPrevious));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LeaderboardScoreUploaded_t), alignof(LeaderboardScoreUploaded_t));
    std::fprintf(stdout, "}\n");
  }
  // NumberOfCurrentPlayers_t
  { std::fprintf(stdout, ",\"NumberOfCurrentPlayers_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct NumberOfCurrentPlayers_t    *p_NumberOfCurrentPlayers_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bSuccess\", \"size\": %d, \"align\": %d},\n", sizeof(p_NumberOfCurrentPlayers_t->m_bSuccess), alignof(p_NumberOfCurrentPlayers_t->m_bSuccess));
      std::fprintf(stdout, "  {\"field\": \"m_cPlayers\", \"size\": %d, \"align\": %d}", sizeof(p_NumberOfCurrentPlayers_t->m_cPlayers), alignof(p_NumberOfCurrentPlayers_t->m_cPlayers));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(NumberOfCurrentPlayers_t), alignof(NumberOfCurrentPlayers_t));
    std::fprintf(stdout, "}\n");
  }
  // UserStatsUnloaded_t
  { std::fprintf(stdout, ",\"UserStatsUnloaded_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct UserStatsUnloaded_t    *p_UserStatsUnloaded_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d}", sizeof(p_UserStatsUnloaded_t->m_steamIDUser), alignof(p_UserStatsUnloaded_t->m_steamIDUser));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(UserStatsUnloaded_t), alignof(UserStatsUnloaded_t));
    std::fprintf(stdout, "}\n");
  }
  // UserAchievementIconFetched_t
  { std::fprintf(stdout, ",\"UserAchievementIconFetched_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct UserAchievementIconFetched_t    *p_UserAchievementIconFetched_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nGameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserAchievementIconFetched_t->m_nGameID), alignof(p_UserAchievementIconFetched_t->m_nGameID));
      std::fprintf(stdout, "  {\"field\": \"m_rgchAchievementName\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserAchievementIconFetched_t->m_rgchAchievementName), alignof(p_UserAchievementIconFetched_t->m_rgchAchievementName));
      std::fprintf(stdout, "  {\"field\": \"m_bAchieved\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserAchievementIconFetched_t->m_bAchieved), alignof(p_UserAchievementIconFetched_t->m_bAchieved));
      std::fprintf(stdout, "  {\"field\": \"m_nIconHandle\", \"size\": %d, \"align\": %d}", sizeof(p_UserAchievementIconFetched_t->m_nIconHandle), alignof(p_UserAchievementIconFetched_t->m_nIconHandle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(UserAchievementIconFetched_t), alignof(UserAchievementIconFetched_t));
    std::fprintf(stdout, "}\n");
  }
  // GlobalAchievementPercentagesReady_t
  { std::fprintf(stdout, ",\"GlobalAchievementPercentagesReady_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GlobalAchievementPercentagesReady_t    *p_GlobalAchievementPercentagesReady_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nGameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_GlobalAchievementPercentagesReady_t->m_nGameID), alignof(p_GlobalAchievementPercentagesReady_t->m_nGameID));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_GlobalAchievementPercentagesReady_t->m_eResult), alignof(p_GlobalAchievementPercentagesReady_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GlobalAchievementPercentagesReady_t), alignof(GlobalAchievementPercentagesReady_t));
    std::fprintf(stdout, "}\n");
  }
  // LeaderboardUGCSet_t
  { std::fprintf(stdout, ",\"LeaderboardUGCSet_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LeaderboardUGCSet_t    *p_LeaderboardUGCSet_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardUGCSet_t->m_eResult), alignof(p_LeaderboardUGCSet_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_hSteamLeaderboard\", \"size\": %d, \"align\": %d}", sizeof(p_LeaderboardUGCSet_t->m_hSteamLeaderboard), alignof(p_LeaderboardUGCSet_t->m_hSteamLeaderboard));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LeaderboardUGCSet_t), alignof(LeaderboardUGCSet_t));
    std::fprintf(stdout, "}\n");
  }
  // PS3TrophiesInstalled_t
  { std::fprintf(stdout, ",\"PS3TrophiesInstalled_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct PS3TrophiesInstalled_t    *p_PS3TrophiesInstalled_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nGameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_PS3TrophiesInstalled_t->m_nGameID), alignof(p_PS3TrophiesInstalled_t->m_nGameID));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_PS3TrophiesInstalled_t->m_eResult), alignof(p_PS3TrophiesInstalled_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_ulRequiredDiskSpace\", \"size\": %d, \"align\": %d}", sizeof(p_PS3TrophiesInstalled_t->m_ulRequiredDiskSpace), alignof(p_PS3TrophiesInstalled_t->m_ulRequiredDiskSpace));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(PS3TrophiesInstalled_t), alignof(PS3TrophiesInstalled_t));
    std::fprintf(stdout, "}\n");
  }
  // GlobalStatsReceived_t
  { std::fprintf(stdout, ",\"GlobalStatsReceived_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GlobalStatsReceived_t    *p_GlobalStatsReceived_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nGameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_GlobalStatsReceived_t->m_nGameID), alignof(p_GlobalStatsReceived_t->m_nGameID));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_GlobalStatsReceived_t->m_eResult), alignof(p_GlobalStatsReceived_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GlobalStatsReceived_t), alignof(GlobalStatsReceived_t));
    std::fprintf(stdout, "}\n");
  }
  // DlcInstalled_t
  { std::fprintf(stdout, ",\"DlcInstalled_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct DlcInstalled_t    *p_DlcInstalled_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d}", sizeof(p_DlcInstalled_t->m_nAppID), alignof(p_DlcInstalled_t->m_nAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(DlcInstalled_t), alignof(DlcInstalled_t));
    std::fprintf(stdout, "}\n");
  }
  // NewUrlLaunchParameters_t
  { std::fprintf(stdout, ",\"NewUrlLaunchParameters_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct NewUrlLaunchParameters_t    *p_NewUrlLaunchParameters_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(NewUrlLaunchParameters_t), alignof(NewUrlLaunchParameters_t));
    std::fprintf(stdout, "}\n");
  }
  // AppProofOfPurchaseKeyResponse_t
  { std::fprintf(stdout, ",\"AppProofOfPurchaseKeyResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct AppProofOfPurchaseKeyResponse_t    *p_AppProofOfPurchaseKeyResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_AppProofOfPurchaseKeyResponse_t->m_eResult), alignof(p_AppProofOfPurchaseKeyResponse_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_AppProofOfPurchaseKeyResponse_t->m_nAppID), alignof(p_AppProofOfPurchaseKeyResponse_t->m_nAppID));
      std::fprintf(stdout, "  {\"field\": \"m_cchKeyLength\", \"size\": %d, \"align\": %d},\n", sizeof(p_AppProofOfPurchaseKeyResponse_t->m_cchKeyLength), alignof(p_AppProofOfPurchaseKeyResponse_t->m_cchKeyLength));
      std::fprintf(stdout, "  {\"field\": \"m_rgchKey\", \"size\": %d, \"align\": %d}", sizeof(p_AppProofOfPurchaseKeyResponse_t->m_rgchKey), alignof(p_AppProofOfPurchaseKeyResponse_t->m_rgchKey));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(AppProofOfPurchaseKeyResponse_t), alignof(AppProofOfPurchaseKeyResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // FileDetailsResult_t
  { std::fprintf(stdout, ",\"FileDetailsResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FileDetailsResult_t    *p_FileDetailsResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_FileDetailsResult_t->m_eResult), alignof(p_FileDetailsResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_ulFileSize\", \"size\": %d, \"align\": %d},\n", sizeof(p_FileDetailsResult_t->m_ulFileSize), alignof(p_FileDetailsResult_t->m_ulFileSize));
      std::fprintf(stdout, "  {\"field\": \"m_FileSHA\", \"size\": %d, \"align\": %d},\n", sizeof(p_FileDetailsResult_t->m_FileSHA), alignof(p_FileDetailsResult_t->m_FileSHA));
      std::fprintf(stdout, "  {\"field\": \"m_unFlags\", \"size\": %d, \"align\": %d}", sizeof(p_FileDetailsResult_t->m_unFlags), alignof(p_FileDetailsResult_t->m_unFlags));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FileDetailsResult_t), alignof(FileDetailsResult_t));
    std::fprintf(stdout, "}\n");
  }
  // TimedTrialStatus_t
  { std::fprintf(stdout, ",\"TimedTrialStatus_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct TimedTrialStatus_t    *p_TimedTrialStatus_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_unAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_TimedTrialStatus_t->m_unAppID), alignof(p_TimedTrialStatus_t->m_unAppID));
      std::fprintf(stdout, "  {\"field\": \"m_bIsOffline\", \"size\": %d, \"align\": %d},\n", sizeof(p_TimedTrialStatus_t->m_bIsOffline), alignof(p_TimedTrialStatus_t->m_bIsOffline));
      std::fprintf(stdout, "  {\"field\": \"m_unSecondsAllowed\", \"size\": %d, \"align\": %d},\n", sizeof(p_TimedTrialStatus_t->m_unSecondsAllowed), alignof(p_TimedTrialStatus_t->m_unSecondsAllowed));
      std::fprintf(stdout, "  {\"field\": \"m_unSecondsPlayed\", \"size\": %d, \"align\": %d}", sizeof(p_TimedTrialStatus_t->m_unSecondsPlayed), alignof(p_TimedTrialStatus_t->m_unSecondsPlayed));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(TimedTrialStatus_t), alignof(TimedTrialStatus_t));
    std::fprintf(stdout, "}\n");
  }
  // P2PSessionRequest_t
  { std::fprintf(stdout, ",\"P2PSessionRequest_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct P2PSessionRequest_t    *p_P2PSessionRequest_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDRemote\", \"size\": %d, \"align\": %d}", sizeof(p_P2PSessionRequest_t->m_steamIDRemote), alignof(p_P2PSessionRequest_t->m_steamIDRemote));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(P2PSessionRequest_t), alignof(P2PSessionRequest_t));
    std::fprintf(stdout, "}\n");
  }
  // P2PSessionConnectFail_t
  { std::fprintf(stdout, ",\"P2PSessionConnectFail_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct P2PSessionConnectFail_t    *p_P2PSessionConnectFail_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDRemote\", \"size\": %d, \"align\": %d},\n", sizeof(p_P2PSessionConnectFail_t->m_steamIDRemote), alignof(p_P2PSessionConnectFail_t->m_steamIDRemote));
      std::fprintf(stdout, "  {\"field\": \"m_eP2PSessionError\", \"size\": %d, \"align\": %d}", sizeof(p_P2PSessionConnectFail_t->m_eP2PSessionError), alignof(p_P2PSessionConnectFail_t->m_eP2PSessionError));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(P2PSessionConnectFail_t), alignof(P2PSessionConnectFail_t));
    std::fprintf(stdout, "}\n");
  }
  // SocketStatusCallback_t
  { std::fprintf(stdout, ",\"SocketStatusCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SocketStatusCallback_t    *p_SocketStatusCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hSocket\", \"size\": %d, \"align\": %d},\n", sizeof(p_SocketStatusCallback_t->m_hSocket), alignof(p_SocketStatusCallback_t->m_hSocket));
      std::fprintf(stdout, "  {\"field\": \"m_hListenSocket\", \"size\": %d, \"align\": %d},\n", sizeof(p_SocketStatusCallback_t->m_hListenSocket), alignof(p_SocketStatusCallback_t->m_hListenSocket));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDRemote\", \"size\": %d, \"align\": %d},\n", sizeof(p_SocketStatusCallback_t->m_steamIDRemote), alignof(p_SocketStatusCallback_t->m_steamIDRemote));
      std::fprintf(stdout, "  {\"field\": \"m_eSNetSocketState\", \"size\": %d, \"align\": %d}", sizeof(p_SocketStatusCallback_t->m_eSNetSocketState), alignof(p_SocketStatusCallback_t->m_eSNetSocketState));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SocketStatusCallback_t), alignof(SocketStatusCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // ScreenshotReady_t
  { std::fprintf(stdout, ",\"ScreenshotReady_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ScreenshotReady_t    *p_ScreenshotReady_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hLocal\", \"size\": %d, \"align\": %d},\n", sizeof(p_ScreenshotReady_t->m_hLocal), alignof(p_ScreenshotReady_t->m_hLocal));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_ScreenshotReady_t->m_eResult), alignof(p_ScreenshotReady_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ScreenshotReady_t), alignof(ScreenshotReady_t));
    std::fprintf(stdout, "}\n");
  }
  // ScreenshotRequested_t
  { std::fprintf(stdout, ",\"ScreenshotRequested_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ScreenshotRequested_t    *p_ScreenshotRequested_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ScreenshotRequested_t), alignof(ScreenshotRequested_t));
    std::fprintf(stdout, "}\n");
  }
  // PlaybackStatusHasChanged_t
  { std::fprintf(stdout, ",\"PlaybackStatusHasChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct PlaybackStatusHasChanged_t    *p_PlaybackStatusHasChanged_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(PlaybackStatusHasChanged_t), alignof(PlaybackStatusHasChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // VolumeHasChanged_t
  { std::fprintf(stdout, ",\"VolumeHasChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct VolumeHasChanged_t    *p_VolumeHasChanged_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_flNewVolume\", \"size\": %d, \"align\": %d}", sizeof(p_VolumeHasChanged_t->m_flNewVolume), alignof(p_VolumeHasChanged_t->m_flNewVolume));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(VolumeHasChanged_t), alignof(VolumeHasChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerRemoteWillActivate_t
  { std::fprintf(stdout, ",\"MusicPlayerRemoteWillActivate_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerRemoteWillActivate_t    *p_MusicPlayerRemoteWillActivate_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerRemoteWillActivate_t), alignof(MusicPlayerRemoteWillActivate_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerRemoteWillDeactivate_t
  { std::fprintf(stdout, ",\"MusicPlayerRemoteWillDeactivate_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerRemoteWillDeactivate_t    *p_MusicPlayerRemoteWillDeactivate_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerRemoteWillDeactivate_t), alignof(MusicPlayerRemoteWillDeactivate_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerRemoteToFront_t
  { std::fprintf(stdout, ",\"MusicPlayerRemoteToFront_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerRemoteToFront_t    *p_MusicPlayerRemoteToFront_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerRemoteToFront_t), alignof(MusicPlayerRemoteToFront_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerWillQuit_t
  { std::fprintf(stdout, ",\"MusicPlayerWillQuit_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerWillQuit_t    *p_MusicPlayerWillQuit_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerWillQuit_t), alignof(MusicPlayerWillQuit_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerWantsPlay_t
  { std::fprintf(stdout, ",\"MusicPlayerWantsPlay_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerWantsPlay_t    *p_MusicPlayerWantsPlay_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerWantsPlay_t), alignof(MusicPlayerWantsPlay_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerWantsPause_t
  { std::fprintf(stdout, ",\"MusicPlayerWantsPause_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerWantsPause_t    *p_MusicPlayerWantsPause_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerWantsPause_t), alignof(MusicPlayerWantsPause_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerWantsPlayPrevious_t
  { std::fprintf(stdout, ",\"MusicPlayerWantsPlayPrevious_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerWantsPlayPrevious_t    *p_MusicPlayerWantsPlayPrevious_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerWantsPlayPrevious_t), alignof(MusicPlayerWantsPlayPrevious_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerWantsPlayNext_t
  { std::fprintf(stdout, ",\"MusicPlayerWantsPlayNext_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerWantsPlayNext_t    *p_MusicPlayerWantsPlayNext_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerWantsPlayNext_t), alignof(MusicPlayerWantsPlayNext_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerWantsShuffled_t
  { std::fprintf(stdout, ",\"MusicPlayerWantsShuffled_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerWantsShuffled_t    *p_MusicPlayerWantsShuffled_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bShuffled\", \"size\": %d, \"align\": %d}", sizeof(p_MusicPlayerWantsShuffled_t->m_bShuffled), alignof(p_MusicPlayerWantsShuffled_t->m_bShuffled));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerWantsShuffled_t), alignof(MusicPlayerWantsShuffled_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerWantsLooped_t
  { std::fprintf(stdout, ",\"MusicPlayerWantsLooped_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerWantsLooped_t    *p_MusicPlayerWantsLooped_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bLooped\", \"size\": %d, \"align\": %d}", sizeof(p_MusicPlayerWantsLooped_t->m_bLooped), alignof(p_MusicPlayerWantsLooped_t->m_bLooped));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerWantsLooped_t), alignof(MusicPlayerWantsLooped_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerWantsVolume_t
  { std::fprintf(stdout, ",\"MusicPlayerWantsVolume_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerWantsVolume_t    *p_MusicPlayerWantsVolume_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_flNewVolume\", \"size\": %d, \"align\": %d}", sizeof(p_MusicPlayerWantsVolume_t->m_flNewVolume), alignof(p_MusicPlayerWantsVolume_t->m_flNewVolume));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerWantsVolume_t), alignof(MusicPlayerWantsVolume_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerSelectsQueueEntry_t
  { std::fprintf(stdout, ",\"MusicPlayerSelectsQueueEntry_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerSelectsQueueEntry_t    *p_MusicPlayerSelectsQueueEntry_t = 0;
      std::fprintf(stdout, "  {\"field\": \"nID\", \"size\": %d, \"align\": %d}", sizeof(p_MusicPlayerSelectsQueueEntry_t->nID), alignof(p_MusicPlayerSelectsQueueEntry_t->nID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerSelectsQueueEntry_t), alignof(MusicPlayerSelectsQueueEntry_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerSelectsPlaylistEntry_t
  { std::fprintf(stdout, ",\"MusicPlayerSelectsPlaylistEntry_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerSelectsPlaylistEntry_t    *p_MusicPlayerSelectsPlaylistEntry_t = 0;
      std::fprintf(stdout, "  {\"field\": \"nID\", \"size\": %d, \"align\": %d}", sizeof(p_MusicPlayerSelectsPlaylistEntry_t->nID), alignof(p_MusicPlayerSelectsPlaylistEntry_t->nID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerSelectsPlaylistEntry_t), alignof(MusicPlayerSelectsPlaylistEntry_t));
    std::fprintf(stdout, "}\n");
  }
  // MusicPlayerWantsPlayingRepeatStatus_t
  { std::fprintf(stdout, ",\"MusicPlayerWantsPlayingRepeatStatus_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MusicPlayerWantsPlayingRepeatStatus_t    *p_MusicPlayerWantsPlayingRepeatStatus_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nPlayingRepeatStatus\", \"size\": %d, \"align\": %d}", sizeof(p_MusicPlayerWantsPlayingRepeatStatus_t->m_nPlayingRepeatStatus), alignof(p_MusicPlayerWantsPlayingRepeatStatus_t->m_nPlayingRepeatStatus));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MusicPlayerWantsPlayingRepeatStatus_t), alignof(MusicPlayerWantsPlayingRepeatStatus_t));
    std::fprintf(stdout, "}\n");
  }
  // HTTPRequestCompleted_t
  { std::fprintf(stdout, ",\"HTTPRequestCompleted_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTTPRequestCompleted_t    *p_HTTPRequestCompleted_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hRequest\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTTPRequestCompleted_t->m_hRequest), alignof(p_HTTPRequestCompleted_t->m_hRequest));
      std::fprintf(stdout, "  {\"field\": \"m_ulContextValue\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTTPRequestCompleted_t->m_ulContextValue), alignof(p_HTTPRequestCompleted_t->m_ulContextValue));
      std::fprintf(stdout, "  {\"field\": \"m_bRequestSuccessful\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTTPRequestCompleted_t->m_bRequestSuccessful), alignof(p_HTTPRequestCompleted_t->m_bRequestSuccessful));
      std::fprintf(stdout, "  {\"field\": \"m_eStatusCode\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTTPRequestCompleted_t->m_eStatusCode), alignof(p_HTTPRequestCompleted_t->m_eStatusCode));
      std::fprintf(stdout, "  {\"field\": \"m_unBodySize\", \"size\": %d, \"align\": %d}", sizeof(p_HTTPRequestCompleted_t->m_unBodySize), alignof(p_HTTPRequestCompleted_t->m_unBodySize));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTTPRequestCompleted_t), alignof(HTTPRequestCompleted_t));
    std::fprintf(stdout, "}\n");
  }
  // HTTPRequestHeadersReceived_t
  { std::fprintf(stdout, ",\"HTTPRequestHeadersReceived_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTTPRequestHeadersReceived_t    *p_HTTPRequestHeadersReceived_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hRequest\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTTPRequestHeadersReceived_t->m_hRequest), alignof(p_HTTPRequestHeadersReceived_t->m_hRequest));
      std::fprintf(stdout, "  {\"field\": \"m_ulContextValue\", \"size\": %d, \"align\": %d}", sizeof(p_HTTPRequestHeadersReceived_t->m_ulContextValue), alignof(p_HTTPRequestHeadersReceived_t->m_ulContextValue));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTTPRequestHeadersReceived_t), alignof(HTTPRequestHeadersReceived_t));
    std::fprintf(stdout, "}\n");
  }
  // HTTPRequestDataReceived_t
  { std::fprintf(stdout, ",\"HTTPRequestDataReceived_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTTPRequestDataReceived_t    *p_HTTPRequestDataReceived_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hRequest\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTTPRequestDataReceived_t->m_hRequest), alignof(p_HTTPRequestDataReceived_t->m_hRequest));
      std::fprintf(stdout, "  {\"field\": \"m_ulContextValue\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTTPRequestDataReceived_t->m_ulContextValue), alignof(p_HTTPRequestDataReceived_t->m_ulContextValue));
      std::fprintf(stdout, "  {\"field\": \"m_cOffset\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTTPRequestDataReceived_t->m_cOffset), alignof(p_HTTPRequestDataReceived_t->m_cOffset));
      std::fprintf(stdout, "  {\"field\": \"m_cBytesReceived\", \"size\": %d, \"align\": %d}", sizeof(p_HTTPRequestDataReceived_t->m_cBytesReceived), alignof(p_HTTPRequestDataReceived_t->m_cBytesReceived));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTTPRequestDataReceived_t), alignof(HTTPRequestDataReceived_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInputDeviceConnected_t
  { std::fprintf(stdout, ",\"SteamInputDeviceConnected_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInputDeviceConnected_t    *p_SteamInputDeviceConnected_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulConnectedDeviceHandle\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInputDeviceConnected_t->m_ulConnectedDeviceHandle), alignof(p_SteamInputDeviceConnected_t->m_ulConnectedDeviceHandle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInputDeviceConnected_t), alignof(SteamInputDeviceConnected_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInputDeviceDisconnected_t
  { std::fprintf(stdout, ",\"SteamInputDeviceDisconnected_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInputDeviceDisconnected_t    *p_SteamInputDeviceDisconnected_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ulDisconnectedDeviceHandle\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInputDeviceDisconnected_t->m_ulDisconnectedDeviceHandle), alignof(p_SteamInputDeviceDisconnected_t->m_ulDisconnectedDeviceHandle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInputDeviceDisconnected_t), alignof(SteamInputDeviceDisconnected_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInputConfigurationLoaded_t
  { std::fprintf(stdout, ",\"SteamInputConfigurationLoaded_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInputConfigurationLoaded_t    *p_SteamInputConfigurationLoaded_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_unAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputConfigurationLoaded_t->m_unAppID), alignof(p_SteamInputConfigurationLoaded_t->m_unAppID));
      std::fprintf(stdout, "  {\"field\": \"m_ulDeviceHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputConfigurationLoaded_t->m_ulDeviceHandle), alignof(p_SteamInputConfigurationLoaded_t->m_ulDeviceHandle));
      std::fprintf(stdout, "  {\"field\": \"m_ulMappingCreator\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputConfigurationLoaded_t->m_ulMappingCreator), alignof(p_SteamInputConfigurationLoaded_t->m_ulMappingCreator));
      std::fprintf(stdout, "  {\"field\": \"m_unMajorRevision\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputConfigurationLoaded_t->m_unMajorRevision), alignof(p_SteamInputConfigurationLoaded_t->m_unMajorRevision));
      std::fprintf(stdout, "  {\"field\": \"m_unMinorRevision\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputConfigurationLoaded_t->m_unMinorRevision), alignof(p_SteamInputConfigurationLoaded_t->m_unMinorRevision));
      std::fprintf(stdout, "  {\"field\": \"m_bUsesSteamInputAPI\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputConfigurationLoaded_t->m_bUsesSteamInputAPI), alignof(p_SteamInputConfigurationLoaded_t->m_bUsesSteamInputAPI));
      std::fprintf(stdout, "  {\"field\": \"m_bUsesGamepadAPI\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInputConfigurationLoaded_t->m_bUsesGamepadAPI), alignof(p_SteamInputConfigurationLoaded_t->m_bUsesGamepadAPI));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInputConfigurationLoaded_t), alignof(SteamInputConfigurationLoaded_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInputGamepadSlotChange_t
  { std::fprintf(stdout, ",\"SteamInputGamepadSlotChange_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInputGamepadSlotChange_t    *p_SteamInputGamepadSlotChange_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_unAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputGamepadSlotChange_t->m_unAppID), alignof(p_SteamInputGamepadSlotChange_t->m_unAppID));
      std::fprintf(stdout, "  {\"field\": \"m_ulDeviceHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputGamepadSlotChange_t->m_ulDeviceHandle), alignof(p_SteamInputGamepadSlotChange_t->m_ulDeviceHandle));
      std::fprintf(stdout, "  {\"field\": \"m_eDeviceType\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputGamepadSlotChange_t->m_eDeviceType), alignof(p_SteamInputGamepadSlotChange_t->m_eDeviceType));
      std::fprintf(stdout, "  {\"field\": \"m_nOldGamepadSlot\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputGamepadSlotChange_t->m_nOldGamepadSlot), alignof(p_SteamInputGamepadSlotChange_t->m_nOldGamepadSlot));
      std::fprintf(stdout, "  {\"field\": \"m_nNewGamepadSlot\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInputGamepadSlotChange_t->m_nNewGamepadSlot), alignof(p_SteamInputGamepadSlotChange_t->m_nNewGamepadSlot));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInputGamepadSlotChange_t), alignof(SteamInputGamepadSlotChange_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamUGCQueryCompleted_t
  { std::fprintf(stdout, ",\"SteamUGCQueryCompleted_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamUGCQueryCompleted_t    *p_SteamUGCQueryCompleted_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_handle\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCQueryCompleted_t->m_handle), alignof(p_SteamUGCQueryCompleted_t->m_handle));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCQueryCompleted_t->m_eResult), alignof(p_SteamUGCQueryCompleted_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_unNumResultsReturned\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCQueryCompleted_t->m_unNumResultsReturned), alignof(p_SteamUGCQueryCompleted_t->m_unNumResultsReturned));
      std::fprintf(stdout, "  {\"field\": \"m_unTotalMatchingResults\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCQueryCompleted_t->m_unTotalMatchingResults), alignof(p_SteamUGCQueryCompleted_t->m_unTotalMatchingResults));
      std::fprintf(stdout, "  {\"field\": \"m_bCachedData\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCQueryCompleted_t->m_bCachedData), alignof(p_SteamUGCQueryCompleted_t->m_bCachedData));
      std::fprintf(stdout, "  {\"field\": \"m_rgchNextCursor\", \"size\": %d, \"align\": %d}", sizeof(p_SteamUGCQueryCompleted_t->m_rgchNextCursor), alignof(p_SteamUGCQueryCompleted_t->m_rgchNextCursor));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamUGCQueryCompleted_t), alignof(SteamUGCQueryCompleted_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamUGCRequestUGCDetailsResult_t
  { std::fprintf(stdout, ",\"SteamUGCRequestUGCDetailsResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamUGCRequestUGCDetailsResult_t    *p_SteamUGCRequestUGCDetailsResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_details\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCRequestUGCDetailsResult_t->m_details), alignof(p_SteamUGCRequestUGCDetailsResult_t->m_details));
      std::fprintf(stdout, "  {\"field\": \"m_bCachedData\", \"size\": %d, \"align\": %d}", sizeof(p_SteamUGCRequestUGCDetailsResult_t->m_bCachedData), alignof(p_SteamUGCRequestUGCDetailsResult_t->m_bCachedData));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamUGCRequestUGCDetailsResult_t), alignof(SteamUGCRequestUGCDetailsResult_t));
    std::fprintf(stdout, "}\n");
  }
  // CreateItemResult_t
  { std::fprintf(stdout, ",\"CreateItemResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct CreateItemResult_t    *p_CreateItemResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_CreateItemResult_t->m_eResult), alignof(p_CreateItemResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_CreateItemResult_t->m_nPublishedFileId), alignof(p_CreateItemResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_bUserNeedsToAcceptWorkshopLegalAgreement\", \"size\": %d, \"align\": %d}", sizeof(p_CreateItemResult_t->m_bUserNeedsToAcceptWorkshopLegalAgreement), alignof(p_CreateItemResult_t->m_bUserNeedsToAcceptWorkshopLegalAgreement));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(CreateItemResult_t), alignof(CreateItemResult_t));
    std::fprintf(stdout, "}\n");
  }
  // SubmitItemUpdateResult_t
  { std::fprintf(stdout, ",\"SubmitItemUpdateResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SubmitItemUpdateResult_t    *p_SubmitItemUpdateResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_SubmitItemUpdateResult_t->m_eResult), alignof(p_SubmitItemUpdateResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_bUserNeedsToAcceptWorkshopLegalAgreement\", \"size\": %d, \"align\": %d},\n", sizeof(p_SubmitItemUpdateResult_t->m_bUserNeedsToAcceptWorkshopLegalAgreement), alignof(p_SubmitItemUpdateResult_t->m_bUserNeedsToAcceptWorkshopLegalAgreement));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_SubmitItemUpdateResult_t->m_nPublishedFileId), alignof(p_SubmitItemUpdateResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SubmitItemUpdateResult_t), alignof(SubmitItemUpdateResult_t));
    std::fprintf(stdout, "}\n");
  }
  // ItemInstalled_t
  { std::fprintf(stdout, ",\"ItemInstalled_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ItemInstalled_t    *p_ItemInstalled_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_unAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_ItemInstalled_t->m_unAppID), alignof(p_ItemInstalled_t->m_unAppID));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_ItemInstalled_t->m_nPublishedFileId), alignof(p_ItemInstalled_t->m_nPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ItemInstalled_t), alignof(ItemInstalled_t));
    std::fprintf(stdout, "}\n");
  }
  // DownloadItemResult_t
  { std::fprintf(stdout, ",\"DownloadItemResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct DownloadItemResult_t    *p_DownloadItemResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_unAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_DownloadItemResult_t->m_unAppID), alignof(p_DownloadItemResult_t->m_unAppID));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_DownloadItemResult_t->m_nPublishedFileId), alignof(p_DownloadItemResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_DownloadItemResult_t->m_eResult), alignof(p_DownloadItemResult_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(DownloadItemResult_t), alignof(DownloadItemResult_t));
    std::fprintf(stdout, "}\n");
  }
  // UserFavoriteItemsListChanged_t
  { std::fprintf(stdout, ",\"UserFavoriteItemsListChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct UserFavoriteItemsListChanged_t    *p_UserFavoriteItemsListChanged_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserFavoriteItemsListChanged_t->m_nPublishedFileId), alignof(p_UserFavoriteItemsListChanged_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_UserFavoriteItemsListChanged_t->m_eResult), alignof(p_UserFavoriteItemsListChanged_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_bWasAddRequest\", \"size\": %d, \"align\": %d}", sizeof(p_UserFavoriteItemsListChanged_t->m_bWasAddRequest), alignof(p_UserFavoriteItemsListChanged_t->m_bWasAddRequest));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(UserFavoriteItemsListChanged_t), alignof(UserFavoriteItemsListChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // SetUserItemVoteResult_t
  { std::fprintf(stdout, ",\"SetUserItemVoteResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SetUserItemVoteResult_t    *p_SetUserItemVoteResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_SetUserItemVoteResult_t->m_nPublishedFileId), alignof(p_SetUserItemVoteResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_SetUserItemVoteResult_t->m_eResult), alignof(p_SetUserItemVoteResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_bVoteUp\", \"size\": %d, \"align\": %d}", sizeof(p_SetUserItemVoteResult_t->m_bVoteUp), alignof(p_SetUserItemVoteResult_t->m_bVoteUp));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SetUserItemVoteResult_t), alignof(SetUserItemVoteResult_t));
    std::fprintf(stdout, "}\n");
  }
  // GetUserItemVoteResult_t
  { std::fprintf(stdout, ",\"GetUserItemVoteResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GetUserItemVoteResult_t    *p_GetUserItemVoteResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetUserItemVoteResult_t->m_nPublishedFileId), alignof(p_GetUserItemVoteResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetUserItemVoteResult_t->m_eResult), alignof(p_GetUserItemVoteResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_bVotedUp\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetUserItemVoteResult_t->m_bVotedUp), alignof(p_GetUserItemVoteResult_t->m_bVotedUp));
      std::fprintf(stdout, "  {\"field\": \"m_bVotedDown\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetUserItemVoteResult_t->m_bVotedDown), alignof(p_GetUserItemVoteResult_t->m_bVotedDown));
      std::fprintf(stdout, "  {\"field\": \"m_bVoteSkipped\", \"size\": %d, \"align\": %d}", sizeof(p_GetUserItemVoteResult_t->m_bVoteSkipped), alignof(p_GetUserItemVoteResult_t->m_bVoteSkipped));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GetUserItemVoteResult_t), alignof(GetUserItemVoteResult_t));
    std::fprintf(stdout, "}\n");
  }
  // StartPlaytimeTrackingResult_t
  { std::fprintf(stdout, ",\"StartPlaytimeTrackingResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct StartPlaytimeTrackingResult_t    *p_StartPlaytimeTrackingResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_StartPlaytimeTrackingResult_t->m_eResult), alignof(p_StartPlaytimeTrackingResult_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(StartPlaytimeTrackingResult_t), alignof(StartPlaytimeTrackingResult_t));
    std::fprintf(stdout, "}\n");
  }
  // StopPlaytimeTrackingResult_t
  { std::fprintf(stdout, ",\"StopPlaytimeTrackingResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct StopPlaytimeTrackingResult_t    *p_StopPlaytimeTrackingResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_StopPlaytimeTrackingResult_t->m_eResult), alignof(p_StopPlaytimeTrackingResult_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(StopPlaytimeTrackingResult_t), alignof(StopPlaytimeTrackingResult_t));
    std::fprintf(stdout, "}\n");
  }
  // AddUGCDependencyResult_t
  { std::fprintf(stdout, ",\"AddUGCDependencyResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct AddUGCDependencyResult_t    *p_AddUGCDependencyResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_AddUGCDependencyResult_t->m_eResult), alignof(p_AddUGCDependencyResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_AddUGCDependencyResult_t->m_nPublishedFileId), alignof(p_AddUGCDependencyResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nChildPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_AddUGCDependencyResult_t->m_nChildPublishedFileId), alignof(p_AddUGCDependencyResult_t->m_nChildPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(AddUGCDependencyResult_t), alignof(AddUGCDependencyResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoveUGCDependencyResult_t
  { std::fprintf(stdout, ",\"RemoveUGCDependencyResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoveUGCDependencyResult_t    *p_RemoveUGCDependencyResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoveUGCDependencyResult_t->m_eResult), alignof(p_RemoveUGCDependencyResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoveUGCDependencyResult_t->m_nPublishedFileId), alignof(p_RemoveUGCDependencyResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nChildPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_RemoveUGCDependencyResult_t->m_nChildPublishedFileId), alignof(p_RemoveUGCDependencyResult_t->m_nChildPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoveUGCDependencyResult_t), alignof(RemoveUGCDependencyResult_t));
    std::fprintf(stdout, "}\n");
  }
  // AddAppDependencyResult_t
  { std::fprintf(stdout, ",\"AddAppDependencyResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct AddAppDependencyResult_t    *p_AddAppDependencyResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_AddAppDependencyResult_t->m_eResult), alignof(p_AddAppDependencyResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_AddAppDependencyResult_t->m_nPublishedFileId), alignof(p_AddAppDependencyResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d}", sizeof(p_AddAppDependencyResult_t->m_nAppID), alignof(p_AddAppDependencyResult_t->m_nAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(AddAppDependencyResult_t), alignof(AddAppDependencyResult_t));
    std::fprintf(stdout, "}\n");
  }
  // RemoveAppDependencyResult_t
  { std::fprintf(stdout, ",\"RemoveAppDependencyResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct RemoveAppDependencyResult_t    *p_RemoveAppDependencyResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoveAppDependencyResult_t->m_eResult), alignof(p_RemoveAppDependencyResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_RemoveAppDependencyResult_t->m_nPublishedFileId), alignof(p_RemoveAppDependencyResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d}", sizeof(p_RemoveAppDependencyResult_t->m_nAppID), alignof(p_RemoveAppDependencyResult_t->m_nAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(RemoveAppDependencyResult_t), alignof(RemoveAppDependencyResult_t));
    std::fprintf(stdout, "}\n");
  }
  // GetAppDependenciesResult_t
  { std::fprintf(stdout, ",\"GetAppDependenciesResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GetAppDependenciesResult_t    *p_GetAppDependenciesResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetAppDependenciesResult_t->m_eResult), alignof(p_GetAppDependenciesResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetAppDependenciesResult_t->m_nPublishedFileId), alignof(p_GetAppDependenciesResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_rgAppIDs\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetAppDependenciesResult_t->m_rgAppIDs), alignof(p_GetAppDependenciesResult_t->m_rgAppIDs));
      std::fprintf(stdout, "  {\"field\": \"m_nNumAppDependencies\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetAppDependenciesResult_t->m_nNumAppDependencies), alignof(p_GetAppDependenciesResult_t->m_nNumAppDependencies));
      std::fprintf(stdout, "  {\"field\": \"m_nTotalNumAppDependencies\", \"size\": %d, \"align\": %d}", sizeof(p_GetAppDependenciesResult_t->m_nTotalNumAppDependencies), alignof(p_GetAppDependenciesResult_t->m_nTotalNumAppDependencies));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GetAppDependenciesResult_t), alignof(GetAppDependenciesResult_t));
    std::fprintf(stdout, "}\n");
  }
  // DeleteItemResult_t
  { std::fprintf(stdout, ",\"DeleteItemResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct DeleteItemResult_t    *p_DeleteItemResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_DeleteItemResult_t->m_eResult), alignof(p_DeleteItemResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d}", sizeof(p_DeleteItemResult_t->m_nPublishedFileId), alignof(p_DeleteItemResult_t->m_nPublishedFileId));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(DeleteItemResult_t), alignof(DeleteItemResult_t));
    std::fprintf(stdout, "}\n");
  }
  // UserSubscribedItemsListChanged_t
  { std::fprintf(stdout, ",\"UserSubscribedItemsListChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct UserSubscribedItemsListChanged_t    *p_UserSubscribedItemsListChanged_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d}", sizeof(p_UserSubscribedItemsListChanged_t->m_nAppID), alignof(p_UserSubscribedItemsListChanged_t->m_nAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(UserSubscribedItemsListChanged_t), alignof(UserSubscribedItemsListChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // WorkshopEULAStatus_t
  { std::fprintf(stdout, ",\"WorkshopEULAStatus_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct WorkshopEULAStatus_t    *p_WorkshopEULAStatus_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_WorkshopEULAStatus_t->m_eResult), alignof(p_WorkshopEULAStatus_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_WorkshopEULAStatus_t->m_nAppID), alignof(p_WorkshopEULAStatus_t->m_nAppID));
      std::fprintf(stdout, "  {\"field\": \"m_unVersion\", \"size\": %d, \"align\": %d},\n", sizeof(p_WorkshopEULAStatus_t->m_unVersion), alignof(p_WorkshopEULAStatus_t->m_unVersion));
      std::fprintf(stdout, "  {\"field\": \"m_rtAction\", \"size\": %d, \"align\": %d},\n", sizeof(p_WorkshopEULAStatus_t->m_rtAction), alignof(p_WorkshopEULAStatus_t->m_rtAction));
      std::fprintf(stdout, "  {\"field\": \"m_bAccepted\", \"size\": %d, \"align\": %d},\n", sizeof(p_WorkshopEULAStatus_t->m_bAccepted), alignof(p_WorkshopEULAStatus_t->m_bAccepted));
      std::fprintf(stdout, "  {\"field\": \"m_bNeedsAction\", \"size\": %d, \"align\": %d}", sizeof(p_WorkshopEULAStatus_t->m_bNeedsAction), alignof(p_WorkshopEULAStatus_t->m_bNeedsAction));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(WorkshopEULAStatus_t), alignof(WorkshopEULAStatus_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamAppInstalled_t
  { std::fprintf(stdout, ",\"SteamAppInstalled_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamAppInstalled_t    *p_SteamAppInstalled_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamAppInstalled_t->m_nAppID), alignof(p_SteamAppInstalled_t->m_nAppID));
      std::fprintf(stdout, "  {\"field\": \"m_iInstallFolderIndex\", \"size\": %d, \"align\": %d}", sizeof(p_SteamAppInstalled_t->m_iInstallFolderIndex), alignof(p_SteamAppInstalled_t->m_iInstallFolderIndex));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamAppInstalled_t), alignof(SteamAppInstalled_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamAppUninstalled_t
  { std::fprintf(stdout, ",\"SteamAppUninstalled_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamAppUninstalled_t    *p_SteamAppUninstalled_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamAppUninstalled_t->m_nAppID), alignof(p_SteamAppUninstalled_t->m_nAppID));
      std::fprintf(stdout, "  {\"field\": \"m_iInstallFolderIndex\", \"size\": %d, \"align\": %d}", sizeof(p_SteamAppUninstalled_t->m_iInstallFolderIndex), alignof(p_SteamAppUninstalled_t->m_iInstallFolderIndex));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamAppUninstalled_t), alignof(SteamAppUninstalled_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_BrowserReady_t
  { std::fprintf(stdout, ",\"HTML_BrowserReady_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_BrowserReady_t    *p_HTML_BrowserReady_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_BrowserReady_t->unBrowserHandle), alignof(p_HTML_BrowserReady_t->unBrowserHandle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_BrowserReady_t), alignof(HTML_BrowserReady_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_NeedsPaint_t
  { std::fprintf(stdout, ",\"HTML_NeedsPaint_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_NeedsPaint_t    *p_HTML_NeedsPaint_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->unBrowserHandle), alignof(p_HTML_NeedsPaint_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pBGRA\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->pBGRA), alignof(p_HTML_NeedsPaint_t->pBGRA));
      std::fprintf(stdout, "  {\"field\": \"unWide\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->unWide), alignof(p_HTML_NeedsPaint_t->unWide));
      std::fprintf(stdout, "  {\"field\": \"unTall\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->unTall), alignof(p_HTML_NeedsPaint_t->unTall));
      std::fprintf(stdout, "  {\"field\": \"unUpdateX\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->unUpdateX), alignof(p_HTML_NeedsPaint_t->unUpdateX));
      std::fprintf(stdout, "  {\"field\": \"unUpdateY\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->unUpdateY), alignof(p_HTML_NeedsPaint_t->unUpdateY));
      std::fprintf(stdout, "  {\"field\": \"unUpdateWide\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->unUpdateWide), alignof(p_HTML_NeedsPaint_t->unUpdateWide));
      std::fprintf(stdout, "  {\"field\": \"unUpdateTall\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->unUpdateTall), alignof(p_HTML_NeedsPaint_t->unUpdateTall));
      std::fprintf(stdout, "  {\"field\": \"unScrollX\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->unScrollX), alignof(p_HTML_NeedsPaint_t->unScrollX));
      std::fprintf(stdout, "  {\"field\": \"unScrollY\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->unScrollY), alignof(p_HTML_NeedsPaint_t->unScrollY));
      std::fprintf(stdout, "  {\"field\": \"flPageScale\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NeedsPaint_t->flPageScale), alignof(p_HTML_NeedsPaint_t->flPageScale));
      std::fprintf(stdout, "  {\"field\": \"unPageSerial\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_NeedsPaint_t->unPageSerial), alignof(p_HTML_NeedsPaint_t->unPageSerial));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_NeedsPaint_t), alignof(HTML_NeedsPaint_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_StartRequest_t
  { std::fprintf(stdout, ",\"HTML_StartRequest_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_StartRequest_t    *p_HTML_StartRequest_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_StartRequest_t->unBrowserHandle), alignof(p_HTML_StartRequest_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchURL\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_StartRequest_t->pchURL), alignof(p_HTML_StartRequest_t->pchURL));
      std::fprintf(stdout, "  {\"field\": \"pchTarget\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_StartRequest_t->pchTarget), alignof(p_HTML_StartRequest_t->pchTarget));
      std::fprintf(stdout, "  {\"field\": \"pchPostData\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_StartRequest_t->pchPostData), alignof(p_HTML_StartRequest_t->pchPostData));
      std::fprintf(stdout, "  {\"field\": \"bIsRedirect\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_StartRequest_t->bIsRedirect), alignof(p_HTML_StartRequest_t->bIsRedirect));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_StartRequest_t), alignof(HTML_StartRequest_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_CloseBrowser_t
  { std::fprintf(stdout, ",\"HTML_CloseBrowser_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_CloseBrowser_t    *p_HTML_CloseBrowser_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_CloseBrowser_t->unBrowserHandle), alignof(p_HTML_CloseBrowser_t->unBrowserHandle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_CloseBrowser_t), alignof(HTML_CloseBrowser_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_URLChanged_t
  { std::fprintf(stdout, ",\"HTML_URLChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_URLChanged_t    *p_HTML_URLChanged_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_URLChanged_t->unBrowserHandle), alignof(p_HTML_URLChanged_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchURL\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_URLChanged_t->pchURL), alignof(p_HTML_URLChanged_t->pchURL));
      std::fprintf(stdout, "  {\"field\": \"pchPostData\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_URLChanged_t->pchPostData), alignof(p_HTML_URLChanged_t->pchPostData));
      std::fprintf(stdout, "  {\"field\": \"bIsRedirect\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_URLChanged_t->bIsRedirect), alignof(p_HTML_URLChanged_t->bIsRedirect));
      std::fprintf(stdout, "  {\"field\": \"pchPageTitle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_URLChanged_t->pchPageTitle), alignof(p_HTML_URLChanged_t->pchPageTitle));
      std::fprintf(stdout, "  {\"field\": \"bNewNavigation\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_URLChanged_t->bNewNavigation), alignof(p_HTML_URLChanged_t->bNewNavigation));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_URLChanged_t), alignof(HTML_URLChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_FinishedRequest_t
  { std::fprintf(stdout, ",\"HTML_FinishedRequest_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_FinishedRequest_t    *p_HTML_FinishedRequest_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_FinishedRequest_t->unBrowserHandle), alignof(p_HTML_FinishedRequest_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchURL\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_FinishedRequest_t->pchURL), alignof(p_HTML_FinishedRequest_t->pchURL));
      std::fprintf(stdout, "  {\"field\": \"pchPageTitle\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_FinishedRequest_t->pchPageTitle), alignof(p_HTML_FinishedRequest_t->pchPageTitle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_FinishedRequest_t), alignof(HTML_FinishedRequest_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_OpenLinkInNewTab_t
  { std::fprintf(stdout, ",\"HTML_OpenLinkInNewTab_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_OpenLinkInNewTab_t    *p_HTML_OpenLinkInNewTab_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_OpenLinkInNewTab_t->unBrowserHandle), alignof(p_HTML_OpenLinkInNewTab_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchURL\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_OpenLinkInNewTab_t->pchURL), alignof(p_HTML_OpenLinkInNewTab_t->pchURL));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_OpenLinkInNewTab_t), alignof(HTML_OpenLinkInNewTab_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_ChangedTitle_t
  { std::fprintf(stdout, ",\"HTML_ChangedTitle_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_ChangedTitle_t    *p_HTML_ChangedTitle_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_ChangedTitle_t->unBrowserHandle), alignof(p_HTML_ChangedTitle_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchTitle\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_ChangedTitle_t->pchTitle), alignof(p_HTML_ChangedTitle_t->pchTitle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_ChangedTitle_t), alignof(HTML_ChangedTitle_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_SearchResults_t
  { std::fprintf(stdout, ",\"HTML_SearchResults_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_SearchResults_t    *p_HTML_SearchResults_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_SearchResults_t->unBrowserHandle), alignof(p_HTML_SearchResults_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"unResults\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_SearchResults_t->unResults), alignof(p_HTML_SearchResults_t->unResults));
      std::fprintf(stdout, "  {\"field\": \"unCurrentMatch\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_SearchResults_t->unCurrentMatch), alignof(p_HTML_SearchResults_t->unCurrentMatch));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_SearchResults_t), alignof(HTML_SearchResults_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_CanGoBackAndForward_t
  { std::fprintf(stdout, ",\"HTML_CanGoBackAndForward_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_CanGoBackAndForward_t    *p_HTML_CanGoBackAndForward_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_CanGoBackAndForward_t->unBrowserHandle), alignof(p_HTML_CanGoBackAndForward_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"bCanGoBack\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_CanGoBackAndForward_t->bCanGoBack), alignof(p_HTML_CanGoBackAndForward_t->bCanGoBack));
      std::fprintf(stdout, "  {\"field\": \"bCanGoForward\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_CanGoBackAndForward_t->bCanGoForward), alignof(p_HTML_CanGoBackAndForward_t->bCanGoForward));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_CanGoBackAndForward_t), alignof(HTML_CanGoBackAndForward_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_HorizontalScroll_t
  { std::fprintf(stdout, ",\"HTML_HorizontalScroll_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_HorizontalScroll_t    *p_HTML_HorizontalScroll_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_HorizontalScroll_t->unBrowserHandle), alignof(p_HTML_HorizontalScroll_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"unScrollMax\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_HorizontalScroll_t->unScrollMax), alignof(p_HTML_HorizontalScroll_t->unScrollMax));
      std::fprintf(stdout, "  {\"field\": \"unScrollCurrent\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_HorizontalScroll_t->unScrollCurrent), alignof(p_HTML_HorizontalScroll_t->unScrollCurrent));
      std::fprintf(stdout, "  {\"field\": \"flPageScale\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_HorizontalScroll_t->flPageScale), alignof(p_HTML_HorizontalScroll_t->flPageScale));
      std::fprintf(stdout, "  {\"field\": \"bVisible\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_HorizontalScroll_t->bVisible), alignof(p_HTML_HorizontalScroll_t->bVisible));
      std::fprintf(stdout, "  {\"field\": \"unPageSize\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_HorizontalScroll_t->unPageSize), alignof(p_HTML_HorizontalScroll_t->unPageSize));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_HorizontalScroll_t), alignof(HTML_HorizontalScroll_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_VerticalScroll_t
  { std::fprintf(stdout, ",\"HTML_VerticalScroll_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_VerticalScroll_t    *p_HTML_VerticalScroll_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_VerticalScroll_t->unBrowserHandle), alignof(p_HTML_VerticalScroll_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"unScrollMax\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_VerticalScroll_t->unScrollMax), alignof(p_HTML_VerticalScroll_t->unScrollMax));
      std::fprintf(stdout, "  {\"field\": \"unScrollCurrent\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_VerticalScroll_t->unScrollCurrent), alignof(p_HTML_VerticalScroll_t->unScrollCurrent));
      std::fprintf(stdout, "  {\"field\": \"flPageScale\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_VerticalScroll_t->flPageScale), alignof(p_HTML_VerticalScroll_t->flPageScale));
      std::fprintf(stdout, "  {\"field\": \"bVisible\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_VerticalScroll_t->bVisible), alignof(p_HTML_VerticalScroll_t->bVisible));
      std::fprintf(stdout, "  {\"field\": \"unPageSize\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_VerticalScroll_t->unPageSize), alignof(p_HTML_VerticalScroll_t->unPageSize));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_VerticalScroll_t), alignof(HTML_VerticalScroll_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_LinkAtPosition_t
  { std::fprintf(stdout, ",\"HTML_LinkAtPosition_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_LinkAtPosition_t    *p_HTML_LinkAtPosition_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_LinkAtPosition_t->unBrowserHandle), alignof(p_HTML_LinkAtPosition_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"x\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_LinkAtPosition_t->x), alignof(p_HTML_LinkAtPosition_t->x));
      std::fprintf(stdout, "  {\"field\": \"y\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_LinkAtPosition_t->y), alignof(p_HTML_LinkAtPosition_t->y));
      std::fprintf(stdout, "  {\"field\": \"pchURL\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_LinkAtPosition_t->pchURL), alignof(p_HTML_LinkAtPosition_t->pchURL));
      std::fprintf(stdout, "  {\"field\": \"bInput\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_LinkAtPosition_t->bInput), alignof(p_HTML_LinkAtPosition_t->bInput));
      std::fprintf(stdout, "  {\"field\": \"bLiveLink\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_LinkAtPosition_t->bLiveLink), alignof(p_HTML_LinkAtPosition_t->bLiveLink));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_LinkAtPosition_t), alignof(HTML_LinkAtPosition_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_JSAlert_t
  { std::fprintf(stdout, ",\"HTML_JSAlert_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_JSAlert_t    *p_HTML_JSAlert_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_JSAlert_t->unBrowserHandle), alignof(p_HTML_JSAlert_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchMessage\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_JSAlert_t->pchMessage), alignof(p_HTML_JSAlert_t->pchMessage));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_JSAlert_t), alignof(HTML_JSAlert_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_JSConfirm_t
  { std::fprintf(stdout, ",\"HTML_JSConfirm_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_JSConfirm_t    *p_HTML_JSConfirm_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_JSConfirm_t->unBrowserHandle), alignof(p_HTML_JSConfirm_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchMessage\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_JSConfirm_t->pchMessage), alignof(p_HTML_JSConfirm_t->pchMessage));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_JSConfirm_t), alignof(HTML_JSConfirm_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_FileOpenDialog_t
  { std::fprintf(stdout, ",\"HTML_FileOpenDialog_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_FileOpenDialog_t    *p_HTML_FileOpenDialog_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_FileOpenDialog_t->unBrowserHandle), alignof(p_HTML_FileOpenDialog_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchTitle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_FileOpenDialog_t->pchTitle), alignof(p_HTML_FileOpenDialog_t->pchTitle));
      std::fprintf(stdout, "  {\"field\": \"pchInitialFile\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_FileOpenDialog_t->pchInitialFile), alignof(p_HTML_FileOpenDialog_t->pchInitialFile));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_FileOpenDialog_t), alignof(HTML_FileOpenDialog_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_NewWindow_t
  { std::fprintf(stdout, ",\"HTML_NewWindow_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_NewWindow_t    *p_HTML_NewWindow_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NewWindow_t->unBrowserHandle), alignof(p_HTML_NewWindow_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchURL\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NewWindow_t->pchURL), alignof(p_HTML_NewWindow_t->pchURL));
      std::fprintf(stdout, "  {\"field\": \"unX\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NewWindow_t->unX), alignof(p_HTML_NewWindow_t->unX));
      std::fprintf(stdout, "  {\"field\": \"unY\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NewWindow_t->unY), alignof(p_HTML_NewWindow_t->unY));
      std::fprintf(stdout, "  {\"field\": \"unWide\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NewWindow_t->unWide), alignof(p_HTML_NewWindow_t->unWide));
      std::fprintf(stdout, "  {\"field\": \"unTall\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_NewWindow_t->unTall), alignof(p_HTML_NewWindow_t->unTall));
      std::fprintf(stdout, "  {\"field\": \"unNewWindow_BrowserHandle_IGNORE\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_NewWindow_t->unNewWindow_BrowserHandle_IGNORE), alignof(p_HTML_NewWindow_t->unNewWindow_BrowserHandle_IGNORE));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_NewWindow_t), alignof(HTML_NewWindow_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_SetCursor_t
  { std::fprintf(stdout, ",\"HTML_SetCursor_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_SetCursor_t    *p_HTML_SetCursor_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_SetCursor_t->unBrowserHandle), alignof(p_HTML_SetCursor_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"eMouseCursor\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_SetCursor_t->eMouseCursor), alignof(p_HTML_SetCursor_t->eMouseCursor));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_SetCursor_t), alignof(HTML_SetCursor_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_StatusText_t
  { std::fprintf(stdout, ",\"HTML_StatusText_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_StatusText_t    *p_HTML_StatusText_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_StatusText_t->unBrowserHandle), alignof(p_HTML_StatusText_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchMsg\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_StatusText_t->pchMsg), alignof(p_HTML_StatusText_t->pchMsg));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_StatusText_t), alignof(HTML_StatusText_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_ShowToolTip_t
  { std::fprintf(stdout, ",\"HTML_ShowToolTip_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_ShowToolTip_t    *p_HTML_ShowToolTip_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_ShowToolTip_t->unBrowserHandle), alignof(p_HTML_ShowToolTip_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchMsg\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_ShowToolTip_t->pchMsg), alignof(p_HTML_ShowToolTip_t->pchMsg));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_ShowToolTip_t), alignof(HTML_ShowToolTip_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_UpdateToolTip_t
  { std::fprintf(stdout, ",\"HTML_UpdateToolTip_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_UpdateToolTip_t    *p_HTML_UpdateToolTip_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_UpdateToolTip_t->unBrowserHandle), alignof(p_HTML_UpdateToolTip_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"pchMsg\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_UpdateToolTip_t->pchMsg), alignof(p_HTML_UpdateToolTip_t->pchMsg));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_UpdateToolTip_t), alignof(HTML_UpdateToolTip_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_HideToolTip_t
  { std::fprintf(stdout, ",\"HTML_HideToolTip_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_HideToolTip_t    *p_HTML_HideToolTip_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_HideToolTip_t->unBrowserHandle), alignof(p_HTML_HideToolTip_t->unBrowserHandle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_HideToolTip_t), alignof(HTML_HideToolTip_t));
    std::fprintf(stdout, "}\n");
  }
  // HTML_BrowserRestarted_t
  { std::fprintf(stdout, ",\"HTML_BrowserRestarted_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct HTML_BrowserRestarted_t    *p_HTML_BrowserRestarted_t = 0;
      std::fprintf(stdout, "  {\"field\": \"unBrowserHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_HTML_BrowserRestarted_t->unBrowserHandle), alignof(p_HTML_BrowserRestarted_t->unBrowserHandle));
      std::fprintf(stdout, "  {\"field\": \"unOldBrowserHandle\", \"size\": %d, \"align\": %d}", sizeof(p_HTML_BrowserRestarted_t->unOldBrowserHandle), alignof(p_HTML_BrowserRestarted_t->unOldBrowserHandle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(HTML_BrowserRestarted_t), alignof(HTML_BrowserRestarted_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInventoryResultReady_t
  { std::fprintf(stdout, ",\"SteamInventoryResultReady_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInventoryResultReady_t    *p_SteamInventoryResultReady_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_handle\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInventoryResultReady_t->m_handle), alignof(p_SteamInventoryResultReady_t->m_handle));
      std::fprintf(stdout, "  {\"field\": \"m_result\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInventoryResultReady_t->m_result), alignof(p_SteamInventoryResultReady_t->m_result));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInventoryResultReady_t), alignof(SteamInventoryResultReady_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInventoryFullUpdate_t
  { std::fprintf(stdout, ",\"SteamInventoryFullUpdate_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInventoryFullUpdate_t    *p_SteamInventoryFullUpdate_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_handle\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInventoryFullUpdate_t->m_handle), alignof(p_SteamInventoryFullUpdate_t->m_handle));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInventoryFullUpdate_t), alignof(SteamInventoryFullUpdate_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInventoryDefinitionUpdate_t
  { std::fprintf(stdout, ",\"SteamInventoryDefinitionUpdate_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInventoryDefinitionUpdate_t    *p_SteamInventoryDefinitionUpdate_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInventoryDefinitionUpdate_t), alignof(SteamInventoryDefinitionUpdate_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInventoryEligiblePromoItemDefIDs_t
  { std::fprintf(stdout, ",\"SteamInventoryEligiblePromoItemDefIDs_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInventoryEligiblePromoItemDefIDs_t    *p_SteamInventoryEligiblePromoItemDefIDs_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_result\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInventoryEligiblePromoItemDefIDs_t->m_result), alignof(p_SteamInventoryEligiblePromoItemDefIDs_t->m_result));
      std::fprintf(stdout, "  {\"field\": \"m_steamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInventoryEligiblePromoItemDefIDs_t->m_steamID), alignof(p_SteamInventoryEligiblePromoItemDefIDs_t->m_steamID));
      std::fprintf(stdout, "  {\"field\": \"m_numEligiblePromoItemDefs\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInventoryEligiblePromoItemDefIDs_t->m_numEligiblePromoItemDefs), alignof(p_SteamInventoryEligiblePromoItemDefIDs_t->m_numEligiblePromoItemDefs));
      std::fprintf(stdout, "  {\"field\": \"m_bCachedData\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInventoryEligiblePromoItemDefIDs_t->m_bCachedData), alignof(p_SteamInventoryEligiblePromoItemDefIDs_t->m_bCachedData));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInventoryEligiblePromoItemDefIDs_t), alignof(SteamInventoryEligiblePromoItemDefIDs_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInventoryStartPurchaseResult_t
  { std::fprintf(stdout, ",\"SteamInventoryStartPurchaseResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInventoryStartPurchaseResult_t    *p_SteamInventoryStartPurchaseResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_result\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInventoryStartPurchaseResult_t->m_result), alignof(p_SteamInventoryStartPurchaseResult_t->m_result));
      std::fprintf(stdout, "  {\"field\": \"m_ulOrderID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInventoryStartPurchaseResult_t->m_ulOrderID), alignof(p_SteamInventoryStartPurchaseResult_t->m_ulOrderID));
      std::fprintf(stdout, "  {\"field\": \"m_ulTransID\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInventoryStartPurchaseResult_t->m_ulTransID), alignof(p_SteamInventoryStartPurchaseResult_t->m_ulTransID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInventoryStartPurchaseResult_t), alignof(SteamInventoryStartPurchaseResult_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInventoryRequestPricesResult_t
  { std::fprintf(stdout, ",\"SteamInventoryRequestPricesResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInventoryRequestPricesResult_t    *p_SteamInventoryRequestPricesResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_result\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInventoryRequestPricesResult_t->m_result), alignof(p_SteamInventoryRequestPricesResult_t->m_result));
      std::fprintf(stdout, "  {\"field\": \"m_rgchCurrency\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInventoryRequestPricesResult_t->m_rgchCurrency), alignof(p_SteamInventoryRequestPricesResult_t->m_rgchCurrency));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInventoryRequestPricesResult_t), alignof(SteamInventoryRequestPricesResult_t));
    std::fprintf(stdout, "}\n");
  }
  // GetVideoURLResult_t
  { std::fprintf(stdout, ",\"GetVideoURLResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GetVideoURLResult_t    *p_GetVideoURLResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetVideoURLResult_t->m_eResult), alignof(p_GetVideoURLResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_unVideoAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetVideoURLResult_t->m_unVideoAppID), alignof(p_GetVideoURLResult_t->m_unVideoAppID));
      std::fprintf(stdout, "  {\"field\": \"m_rgchURL\", \"size\": %d, \"align\": %d}", sizeof(p_GetVideoURLResult_t->m_rgchURL), alignof(p_GetVideoURLResult_t->m_rgchURL));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GetVideoURLResult_t), alignof(GetVideoURLResult_t));
    std::fprintf(stdout, "}\n");
  }
  // GetOPFSettingsResult_t
  { std::fprintf(stdout, ",\"GetOPFSettingsResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GetOPFSettingsResult_t    *p_GetOPFSettingsResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_GetOPFSettingsResult_t->m_eResult), alignof(p_GetOPFSettingsResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_unVideoAppID\", \"size\": %d, \"align\": %d}", sizeof(p_GetOPFSettingsResult_t->m_unVideoAppID), alignof(p_GetOPFSettingsResult_t->m_unVideoAppID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GetOPFSettingsResult_t), alignof(GetOPFSettingsResult_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamParentalSettingsChanged_t
  { std::fprintf(stdout, ",\"SteamParentalSettingsChanged_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamParentalSettingsChanged_t    *p_SteamParentalSettingsChanged_t = 0;
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamParentalSettingsChanged_t), alignof(SteamParentalSettingsChanged_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamRemotePlaySessionConnected_t
  { std::fprintf(stdout, ",\"SteamRemotePlaySessionConnected_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamRemotePlaySessionConnected_t    *p_SteamRemotePlaySessionConnected_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_unSessionID\", \"size\": %d, \"align\": %d}", sizeof(p_SteamRemotePlaySessionConnected_t->m_unSessionID), alignof(p_SteamRemotePlaySessionConnected_t->m_unSessionID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamRemotePlaySessionConnected_t), alignof(SteamRemotePlaySessionConnected_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamRemotePlaySessionDisconnected_t
  { std::fprintf(stdout, ",\"SteamRemotePlaySessionDisconnected_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamRemotePlaySessionDisconnected_t    *p_SteamRemotePlaySessionDisconnected_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_unSessionID\", \"size\": %d, \"align\": %d}", sizeof(p_SteamRemotePlaySessionDisconnected_t->m_unSessionID), alignof(p_SteamRemotePlaySessionDisconnected_t->m_unSessionID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamRemotePlaySessionDisconnected_t), alignof(SteamRemotePlaySessionDisconnected_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamRemotePlayTogetherGuestInvite_t
  { std::fprintf(stdout, ",\"SteamRemotePlayTogetherGuestInvite_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamRemotePlayTogetherGuestInvite_t    *p_SteamRemotePlayTogetherGuestInvite_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_szConnectURL\", \"size\": %d, \"align\": %d}", sizeof(p_SteamRemotePlayTogetherGuestInvite_t->m_szConnectURL), alignof(p_SteamRemotePlayTogetherGuestInvite_t->m_szConnectURL));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamRemotePlayTogetherGuestInvite_t), alignof(SteamRemotePlayTogetherGuestInvite_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetworkingMessagesSessionRequest_t
  { std::fprintf(stdout, ",\"SteamNetworkingMessagesSessionRequest_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetworkingMessagesSessionRequest_t    *p_SteamNetworkingMessagesSessionRequest_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_identityRemote\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetworkingMessagesSessionRequest_t->m_identityRemote), alignof(p_SteamNetworkingMessagesSessionRequest_t->m_identityRemote));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetworkingMessagesSessionRequest_t), alignof(SteamNetworkingMessagesSessionRequest_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetworkingMessagesSessionFailed_t
  { std::fprintf(stdout, ",\"SteamNetworkingMessagesSessionFailed_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetworkingMessagesSessionFailed_t    *p_SteamNetworkingMessagesSessionFailed_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_info\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetworkingMessagesSessionFailed_t->m_info), alignof(p_SteamNetworkingMessagesSessionFailed_t->m_info));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetworkingMessagesSessionFailed_t), alignof(SteamNetworkingMessagesSessionFailed_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetConnectionStatusChangedCallback_t
  { std::fprintf(stdout, ",\"SteamNetConnectionStatusChangedCallback_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetConnectionStatusChangedCallback_t    *p_SteamNetConnectionStatusChangedCallback_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_hConn\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionStatusChangedCallback_t->m_hConn), alignof(p_SteamNetConnectionStatusChangedCallback_t->m_hConn));
      std::fprintf(stdout, "  {\"field\": \"m_info\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionStatusChangedCallback_t->m_info), alignof(p_SteamNetConnectionStatusChangedCallback_t->m_info));
      std::fprintf(stdout, "  {\"field\": \"m_eOldState\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetConnectionStatusChangedCallback_t->m_eOldState), alignof(p_SteamNetConnectionStatusChangedCallback_t->m_eOldState));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetConnectionStatusChangedCallback_t), alignof(SteamNetConnectionStatusChangedCallback_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetAuthenticationStatus_t
  { std::fprintf(stdout, ",\"SteamNetAuthenticationStatus_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetAuthenticationStatus_t    *p_SteamNetAuthenticationStatus_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eAvail\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetAuthenticationStatus_t->m_eAvail), alignof(p_SteamNetAuthenticationStatus_t->m_eAvail));
      std::fprintf(stdout, "  {\"field\": \"m_debugMsg\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetAuthenticationStatus_t->m_debugMsg), alignof(p_SteamNetAuthenticationStatus_t->m_debugMsg));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetAuthenticationStatus_t), alignof(SteamNetAuthenticationStatus_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamRelayNetworkStatus_t
  { std::fprintf(stdout, ",\"SteamRelayNetworkStatus_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamRelayNetworkStatus_t    *p_SteamRelayNetworkStatus_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eAvail\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamRelayNetworkStatus_t->m_eAvail), alignof(p_SteamRelayNetworkStatus_t->m_eAvail));
      std::fprintf(stdout, "  {\"field\": \"m_bPingMeasurementInProgress\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamRelayNetworkStatus_t->m_bPingMeasurementInProgress), alignof(p_SteamRelayNetworkStatus_t->m_bPingMeasurementInProgress));
      std::fprintf(stdout, "  {\"field\": \"m_eAvailNetworkConfig\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamRelayNetworkStatus_t->m_eAvailNetworkConfig), alignof(p_SteamRelayNetworkStatus_t->m_eAvailNetworkConfig));
      std::fprintf(stdout, "  {\"field\": \"m_eAvailAnyRelay\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamRelayNetworkStatus_t->m_eAvailAnyRelay), alignof(p_SteamRelayNetworkStatus_t->m_eAvailAnyRelay));
      std::fprintf(stdout, "  {\"field\": \"m_debugMsg\", \"size\": %d, \"align\": %d}", sizeof(p_SteamRelayNetworkStatus_t->m_debugMsg), alignof(p_SteamRelayNetworkStatus_t->m_debugMsg));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamRelayNetworkStatus_t), alignof(SteamRelayNetworkStatus_t));
    std::fprintf(stdout, "}\n");
  }
  // GSClientApprove_t
  { std::fprintf(stdout, ",\"GSClientApprove_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSClientApprove_t    *p_GSClientApprove_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_SteamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSClientApprove_t->m_SteamID), alignof(p_GSClientApprove_t->m_SteamID));
      std::fprintf(stdout, "  {\"field\": \"m_OwnerSteamID\", \"size\": %d, \"align\": %d}", sizeof(p_GSClientApprove_t->m_OwnerSteamID), alignof(p_GSClientApprove_t->m_OwnerSteamID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSClientApprove_t), alignof(GSClientApprove_t));
    std::fprintf(stdout, "}\n");
  }
  // GSClientDeny_t
  { std::fprintf(stdout, ",\"GSClientDeny_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSClientDeny_t    *p_GSClientDeny_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_SteamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSClientDeny_t->m_SteamID), alignof(p_GSClientDeny_t->m_SteamID));
      std::fprintf(stdout, "  {\"field\": \"m_eDenyReason\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSClientDeny_t->m_eDenyReason), alignof(p_GSClientDeny_t->m_eDenyReason));
      std::fprintf(stdout, "  {\"field\": \"m_rgchOptionalText\", \"size\": %d, \"align\": %d}", sizeof(p_GSClientDeny_t->m_rgchOptionalText), alignof(p_GSClientDeny_t->m_rgchOptionalText));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSClientDeny_t), alignof(GSClientDeny_t));
    std::fprintf(stdout, "}\n");
  }
  // GSClientKick_t
  { std::fprintf(stdout, ",\"GSClientKick_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSClientKick_t    *p_GSClientKick_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_SteamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSClientKick_t->m_SteamID), alignof(p_GSClientKick_t->m_SteamID));
      std::fprintf(stdout, "  {\"field\": \"m_eDenyReason\", \"size\": %d, \"align\": %d}", sizeof(p_GSClientKick_t->m_eDenyReason), alignof(p_GSClientKick_t->m_eDenyReason));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSClientKick_t), alignof(GSClientKick_t));
    std::fprintf(stdout, "}\n");
  }
  // GSClientAchievementStatus_t
  { std::fprintf(stdout, ",\"GSClientAchievementStatus_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSClientAchievementStatus_t    *p_GSClientAchievementStatus_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_SteamID\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSClientAchievementStatus_t->m_SteamID), alignof(p_GSClientAchievementStatus_t->m_SteamID));
      std::fprintf(stdout, "  {\"field\": \"m_pchAchievement\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSClientAchievementStatus_t->m_pchAchievement), alignof(p_GSClientAchievementStatus_t->m_pchAchievement));
      std::fprintf(stdout, "  {\"field\": \"m_bUnlocked\", \"size\": %d, \"align\": %d}", sizeof(p_GSClientAchievementStatus_t->m_bUnlocked), alignof(p_GSClientAchievementStatus_t->m_bUnlocked));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSClientAchievementStatus_t), alignof(GSClientAchievementStatus_t));
    std::fprintf(stdout, "}\n");
  }
  // GSPolicyResponse_t
  { std::fprintf(stdout, ",\"GSPolicyResponse_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSPolicyResponse_t    *p_GSPolicyResponse_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bSecure\", \"size\": %d, \"align\": %d}", sizeof(p_GSPolicyResponse_t->m_bSecure), alignof(p_GSPolicyResponse_t->m_bSecure));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSPolicyResponse_t), alignof(GSPolicyResponse_t));
    std::fprintf(stdout, "}\n");
  }
  // GSGameplayStats_t
  { std::fprintf(stdout, ",\"GSGameplayStats_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSGameplayStats_t    *p_GSGameplayStats_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSGameplayStats_t->m_eResult), alignof(p_GSGameplayStats_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_nRank\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSGameplayStats_t->m_nRank), alignof(p_GSGameplayStats_t->m_nRank));
      std::fprintf(stdout, "  {\"field\": \"m_unTotalConnects\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSGameplayStats_t->m_unTotalConnects), alignof(p_GSGameplayStats_t->m_unTotalConnects));
      std::fprintf(stdout, "  {\"field\": \"m_unTotalMinutesPlayed\", \"size\": %d, \"align\": %d}", sizeof(p_GSGameplayStats_t->m_unTotalMinutesPlayed), alignof(p_GSGameplayStats_t->m_unTotalMinutesPlayed));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSGameplayStats_t), alignof(GSGameplayStats_t));
    std::fprintf(stdout, "}\n");
  }
  // GSClientGroupStatus_t
  { std::fprintf(stdout, ",\"GSClientGroupStatus_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSClientGroupStatus_t    *p_GSClientGroupStatus_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_SteamIDUser\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSClientGroupStatus_t->m_SteamIDUser), alignof(p_GSClientGroupStatus_t->m_SteamIDUser));
      std::fprintf(stdout, "  {\"field\": \"m_SteamIDGroup\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSClientGroupStatus_t->m_SteamIDGroup), alignof(p_GSClientGroupStatus_t->m_SteamIDGroup));
      std::fprintf(stdout, "  {\"field\": \"m_bMember\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSClientGroupStatus_t->m_bMember), alignof(p_GSClientGroupStatus_t->m_bMember));
      std::fprintf(stdout, "  {\"field\": \"m_bOfficer\", \"size\": %d, \"align\": %d}", sizeof(p_GSClientGroupStatus_t->m_bOfficer), alignof(p_GSClientGroupStatus_t->m_bOfficer));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSClientGroupStatus_t), alignof(GSClientGroupStatus_t));
    std::fprintf(stdout, "}\n");
  }
  // GSReputation_t
  { std::fprintf(stdout, ",\"GSReputation_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSReputation_t    *p_GSReputation_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSReputation_t->m_eResult), alignof(p_GSReputation_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_unReputationScore\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSReputation_t->m_unReputationScore), alignof(p_GSReputation_t->m_unReputationScore));
      std::fprintf(stdout, "  {\"field\": \"m_bBanned\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSReputation_t->m_bBanned), alignof(p_GSReputation_t->m_bBanned));
      std::fprintf(stdout, "  {\"field\": \"m_unBannedIP\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSReputation_t->m_unBannedIP), alignof(p_GSReputation_t->m_unBannedIP));
      std::fprintf(stdout, "  {\"field\": \"m_usBannedPort\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSReputation_t->m_usBannedPort), alignof(p_GSReputation_t->m_usBannedPort));
      std::fprintf(stdout, "  {\"field\": \"m_ulBannedGameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSReputation_t->m_ulBannedGameID), alignof(p_GSReputation_t->m_ulBannedGameID));
      std::fprintf(stdout, "  {\"field\": \"m_unBanExpires\", \"size\": %d, \"align\": %d}", sizeof(p_GSReputation_t->m_unBanExpires), alignof(p_GSReputation_t->m_unBanExpires));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSReputation_t), alignof(GSReputation_t));
    std::fprintf(stdout, "}\n");
  }
  // AssociateWithClanResult_t
  { std::fprintf(stdout, ",\"AssociateWithClanResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct AssociateWithClanResult_t    *p_AssociateWithClanResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d}", sizeof(p_AssociateWithClanResult_t->m_eResult), alignof(p_AssociateWithClanResult_t->m_eResult));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(AssociateWithClanResult_t), alignof(AssociateWithClanResult_t));
    std::fprintf(stdout, "}\n");
  }
  // ComputeNewPlayerCompatibilityResult_t
  { std::fprintf(stdout, ",\"ComputeNewPlayerCompatibilityResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct ComputeNewPlayerCompatibilityResult_t    *p_ComputeNewPlayerCompatibilityResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_ComputeNewPlayerCompatibilityResult_t->m_eResult), alignof(p_ComputeNewPlayerCompatibilityResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_cPlayersThatDontLikeCandidate\", \"size\": %d, \"align\": %d},\n", sizeof(p_ComputeNewPlayerCompatibilityResult_t->m_cPlayersThatDontLikeCandidate), alignof(p_ComputeNewPlayerCompatibilityResult_t->m_cPlayersThatDontLikeCandidate));
      std::fprintf(stdout, "  {\"field\": \"m_cPlayersThatCandidateDoesntLike\", \"size\": %d, \"align\": %d},\n", sizeof(p_ComputeNewPlayerCompatibilityResult_t->m_cPlayersThatCandidateDoesntLike), alignof(p_ComputeNewPlayerCompatibilityResult_t->m_cPlayersThatCandidateDoesntLike));
      std::fprintf(stdout, "  {\"field\": \"m_cClanPlayersThatDontLikeCandidate\", \"size\": %d, \"align\": %d},\n", sizeof(p_ComputeNewPlayerCompatibilityResult_t->m_cClanPlayersThatDontLikeCandidate), alignof(p_ComputeNewPlayerCompatibilityResult_t->m_cClanPlayersThatDontLikeCandidate));
      std::fprintf(stdout, "  {\"field\": \"m_SteamIDCandidate\", \"size\": %d, \"align\": %d}", sizeof(p_ComputeNewPlayerCompatibilityResult_t->m_SteamIDCandidate), alignof(p_ComputeNewPlayerCompatibilityResult_t->m_SteamIDCandidate));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(ComputeNewPlayerCompatibilityResult_t), alignof(ComputeNewPlayerCompatibilityResult_t));
    std::fprintf(stdout, "}\n");
  }
  // GSStatsReceived_t
  { std::fprintf(stdout, ",\"GSStatsReceived_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSStatsReceived_t    *p_GSStatsReceived_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSStatsReceived_t->m_eResult), alignof(p_GSStatsReceived_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d}", sizeof(p_GSStatsReceived_t->m_steamIDUser), alignof(p_GSStatsReceived_t->m_steamIDUser));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSStatsReceived_t), alignof(GSStatsReceived_t));
    std::fprintf(stdout, "}\n");
  }
  // GSStatsStored_t
  { std::fprintf(stdout, ",\"GSStatsStored_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSStatsStored_t    *p_GSStatsStored_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_GSStatsStored_t->m_eResult), alignof(p_GSStatsStored_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d}", sizeof(p_GSStatsStored_t->m_steamIDUser), alignof(p_GSStatsStored_t->m_steamIDUser));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSStatsStored_t), alignof(GSStatsStored_t));
    std::fprintf(stdout, "}\n");
  }
  // GSStatsUnloaded_t
  { std::fprintf(stdout, ",\"GSStatsUnloaded_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct GSStatsUnloaded_t    *p_GSStatsUnloaded_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d}", sizeof(p_GSStatsUnloaded_t->m_steamIDUser), alignof(p_GSStatsUnloaded_t->m_steamIDUser));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(GSStatsUnloaded_t), alignof(GSStatsUnloaded_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetworkingFakeIPResult_t
  { std::fprintf(stdout, ",\"SteamNetworkingFakeIPResult_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetworkingFakeIPResult_t    *p_SteamNetworkingFakeIPResult_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingFakeIPResult_t->m_eResult), alignof(p_SteamNetworkingFakeIPResult_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_identity\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingFakeIPResult_t->m_identity), alignof(p_SteamNetworkingFakeIPResult_t->m_identity));
      std::fprintf(stdout, "  {\"field\": \"m_unIP\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingFakeIPResult_t->m_unIP), alignof(p_SteamNetworkingFakeIPResult_t->m_unIP));
      std::fprintf(stdout, "  {\"field\": \"m_unPorts\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetworkingFakeIPResult_t->m_unPorts), alignof(p_SteamNetworkingFakeIPResult_t->m_unPorts));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetworkingFakeIPResult_t), alignof(SteamNetworkingFakeIPResult_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamIPAddress_t
  { std::fprintf(stdout, ",\"SteamIPAddress_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamIPAddress_t    *p_SteamIPAddress_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_rgubIPv6\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamIPAddress_t->m_rgubIPv6), alignof(p_SteamIPAddress_t->m_rgubIPv6));
      std::fprintf(stdout, "  {\"field\": \"m_eType\", \"size\": %d, \"align\": %d}", sizeof(p_SteamIPAddress_t->m_eType), alignof(p_SteamIPAddress_t->m_eType));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamIPAddress_t), alignof(SteamIPAddress_t));
    std::fprintf(stdout, "}\n");
  }
  // FriendGameInfo_t
  { std::fprintf(stdout, ",\"FriendGameInfo_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct FriendGameInfo_t    *p_FriendGameInfo_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_gameID\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendGameInfo_t->m_gameID), alignof(p_FriendGameInfo_t->m_gameID));
      std::fprintf(stdout, "  {\"field\": \"m_unGameIP\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendGameInfo_t->m_unGameIP), alignof(p_FriendGameInfo_t->m_unGameIP));
      std::fprintf(stdout, "  {\"field\": \"m_usGamePort\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendGameInfo_t->m_usGamePort), alignof(p_FriendGameInfo_t->m_usGamePort));
      std::fprintf(stdout, "  {\"field\": \"m_usQueryPort\", \"size\": %d, \"align\": %d},\n", sizeof(p_FriendGameInfo_t->m_usQueryPort), alignof(p_FriendGameInfo_t->m_usQueryPort));
      std::fprintf(stdout, "  {\"field\": \"m_steamIDLobby\", \"size\": %d, \"align\": %d}", sizeof(p_FriendGameInfo_t->m_steamIDLobby), alignof(p_FriendGameInfo_t->m_steamIDLobby));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(FriendGameInfo_t), alignof(FriendGameInfo_t));
    std::fprintf(stdout, "}\n");
  }
  // MatchMakingKeyValuePair_t
  { std::fprintf(stdout, ",\"MatchMakingKeyValuePair_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct MatchMakingKeyValuePair_t    *p_MatchMakingKeyValuePair_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_szKey\", \"size\": %d, \"align\": %d},\n", sizeof(p_MatchMakingKeyValuePair_t->m_szKey), alignof(p_MatchMakingKeyValuePair_t->m_szKey));
      std::fprintf(stdout, "  {\"field\": \"m_szValue\", \"size\": %d, \"align\": %d}", sizeof(p_MatchMakingKeyValuePair_t->m_szValue), alignof(p_MatchMakingKeyValuePair_t->m_szValue));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(MatchMakingKeyValuePair_t), alignof(MatchMakingKeyValuePair_t));
    std::fprintf(stdout, "}\n");
  }
  // servernetadr_t
  { std::fprintf(stdout, ",\"servernetadr_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct servernetadr_t    *p_servernetadr_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_usConnectionPort\", \"size\": %d, \"align\": %d},\n", sizeof(p_servernetadr_t->m_usConnectionPort), alignof(p_servernetadr_t->m_usConnectionPort));
      std::fprintf(stdout, "  {\"field\": \"m_usQueryPort\", \"size\": %d, \"align\": %d},\n", sizeof(p_servernetadr_t->m_usQueryPort), alignof(p_servernetadr_t->m_usQueryPort));
      std::fprintf(stdout, "  {\"field\": \"m_unIP\", \"size\": %d, \"align\": %d}", sizeof(p_servernetadr_t->m_unIP), alignof(p_servernetadr_t->m_unIP));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(servernetadr_t), alignof(servernetadr_t));
    std::fprintf(stdout, "}\n");
  }
  // gameserveritem_t
  { std::fprintf(stdout, ",\"gameserveritem_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct gameserveritem_t    *p_gameserveritem_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_NetAdr\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_NetAdr), alignof(p_gameserveritem_t->m_NetAdr));
      std::fprintf(stdout, "  {\"field\": \"m_nPing\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_nPing), alignof(p_gameserveritem_t->m_nPing));
      std::fprintf(stdout, "  {\"field\": \"m_bHadSuccessfulResponse\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_bHadSuccessfulResponse), alignof(p_gameserveritem_t->m_bHadSuccessfulResponse));
      std::fprintf(stdout, "  {\"field\": \"m_bDoNotRefresh\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_bDoNotRefresh), alignof(p_gameserveritem_t->m_bDoNotRefresh));
      std::fprintf(stdout, "  {\"field\": \"m_szGameDir\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_szGameDir), alignof(p_gameserveritem_t->m_szGameDir));
      std::fprintf(stdout, "  {\"field\": \"m_szMap\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_szMap), alignof(p_gameserveritem_t->m_szMap));
      std::fprintf(stdout, "  {\"field\": \"m_szGameDescription\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_szGameDescription), alignof(p_gameserveritem_t->m_szGameDescription));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_nAppID), alignof(p_gameserveritem_t->m_nAppID));
      std::fprintf(stdout, "  {\"field\": \"m_nPlayers\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_nPlayers), alignof(p_gameserveritem_t->m_nPlayers));
      std::fprintf(stdout, "  {\"field\": \"m_nMaxPlayers\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_nMaxPlayers), alignof(p_gameserveritem_t->m_nMaxPlayers));
      std::fprintf(stdout, "  {\"field\": \"m_nBotPlayers\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_nBotPlayers), alignof(p_gameserveritem_t->m_nBotPlayers));
      std::fprintf(stdout, "  {\"field\": \"m_bPassword\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_bPassword), alignof(p_gameserveritem_t->m_bPassword));
      std::fprintf(stdout, "  {\"field\": \"m_bSecure\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_bSecure), alignof(p_gameserveritem_t->m_bSecure));
      std::fprintf(stdout, "  {\"field\": \"m_ulTimeLastPlayed\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_ulTimeLastPlayed), alignof(p_gameserveritem_t->m_ulTimeLastPlayed));
      std::fprintf(stdout, "  {\"field\": \"m_nServerVersion\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_nServerVersion), alignof(p_gameserveritem_t->m_nServerVersion));
      std::fprintf(stdout, "  {\"field\": \"m_szServerName\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_szServerName), alignof(p_gameserveritem_t->m_szServerName));
      std::fprintf(stdout, "  {\"field\": \"m_szGameTags\", \"size\": %d, \"align\": %d},\n", sizeof(p_gameserveritem_t->m_szGameTags), alignof(p_gameserveritem_t->m_szGameTags));
      std::fprintf(stdout, "  {\"field\": \"m_steamID\", \"size\": %d, \"align\": %d}", sizeof(p_gameserveritem_t->m_steamID), alignof(p_gameserveritem_t->m_steamID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(gameserveritem_t), alignof(gameserveritem_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamPartyBeaconLocation_t
  { std::fprintf(stdout, ",\"SteamPartyBeaconLocation_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamPartyBeaconLocation_t    *p_SteamPartyBeaconLocation_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eType\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamPartyBeaconLocation_t->m_eType), alignof(p_SteamPartyBeaconLocation_t->m_eType));
      std::fprintf(stdout, "  {\"field\": \"m_ulLocationID\", \"size\": %d, \"align\": %d}", sizeof(p_SteamPartyBeaconLocation_t->m_ulLocationID), alignof(p_SteamPartyBeaconLocation_t->m_ulLocationID));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamPartyBeaconLocation_t), alignof(SteamPartyBeaconLocation_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamParamStringArray_t
  { std::fprintf(stdout, ",\"SteamParamStringArray_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamParamStringArray_t    *p_SteamParamStringArray_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ppStrings\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamParamStringArray_t->m_ppStrings), alignof(p_SteamParamStringArray_t->m_ppStrings));
      std::fprintf(stdout, "  {\"field\": \"m_nNumStrings\", \"size\": %d, \"align\": %d}", sizeof(p_SteamParamStringArray_t->m_nNumStrings), alignof(p_SteamParamStringArray_t->m_nNumStrings));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamParamStringArray_t), alignof(SteamParamStringArray_t));
    std::fprintf(stdout, "}\n");
  }
  // LeaderboardEntry_t
  { std::fprintf(stdout, ",\"LeaderboardEntry_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct LeaderboardEntry_t    *p_LeaderboardEntry_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_steamIDUser\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardEntry_t->m_steamIDUser), alignof(p_LeaderboardEntry_t->m_steamIDUser));
      std::fprintf(stdout, "  {\"field\": \"m_nGlobalRank\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardEntry_t->m_nGlobalRank), alignof(p_LeaderboardEntry_t->m_nGlobalRank));
      std::fprintf(stdout, "  {\"field\": \"m_nScore\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardEntry_t->m_nScore), alignof(p_LeaderboardEntry_t->m_nScore));
      std::fprintf(stdout, "  {\"field\": \"m_cDetails\", \"size\": %d, \"align\": %d},\n", sizeof(p_LeaderboardEntry_t->m_cDetails), alignof(p_LeaderboardEntry_t->m_cDetails));
      std::fprintf(stdout, "  {\"field\": \"m_hUGC\", \"size\": %d, \"align\": %d}", sizeof(p_LeaderboardEntry_t->m_hUGC), alignof(p_LeaderboardEntry_t->m_hUGC));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(LeaderboardEntry_t), alignof(LeaderboardEntry_t));
    std::fprintf(stdout, "}\n");
  }
  // P2PSessionState_t
  { std::fprintf(stdout, ",\"P2PSessionState_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct P2PSessionState_t    *p_P2PSessionState_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_bConnectionActive\", \"size\": %d, \"align\": %d},\n", sizeof(p_P2PSessionState_t->m_bConnectionActive), alignof(p_P2PSessionState_t->m_bConnectionActive));
      std::fprintf(stdout, "  {\"field\": \"m_bConnecting\", \"size\": %d, \"align\": %d},\n", sizeof(p_P2PSessionState_t->m_bConnecting), alignof(p_P2PSessionState_t->m_bConnecting));
      std::fprintf(stdout, "  {\"field\": \"m_eP2PSessionError\", \"size\": %d, \"align\": %d},\n", sizeof(p_P2PSessionState_t->m_eP2PSessionError), alignof(p_P2PSessionState_t->m_eP2PSessionError));
      std::fprintf(stdout, "  {\"field\": \"m_bUsingRelay\", \"size\": %d, \"align\": %d},\n", sizeof(p_P2PSessionState_t->m_bUsingRelay), alignof(p_P2PSessionState_t->m_bUsingRelay));
      std::fprintf(stdout, "  {\"field\": \"m_nBytesQueuedForSend\", \"size\": %d, \"align\": %d},\n", sizeof(p_P2PSessionState_t->m_nBytesQueuedForSend), alignof(p_P2PSessionState_t->m_nBytesQueuedForSend));
      std::fprintf(stdout, "  {\"field\": \"m_nPacketsQueuedForSend\", \"size\": %d, \"align\": %d},\n", sizeof(p_P2PSessionState_t->m_nPacketsQueuedForSend), alignof(p_P2PSessionState_t->m_nPacketsQueuedForSend));
      std::fprintf(stdout, "  {\"field\": \"m_nRemoteIP\", \"size\": %d, \"align\": %d},\n", sizeof(p_P2PSessionState_t->m_nRemoteIP), alignof(p_P2PSessionState_t->m_nRemoteIP));
      std::fprintf(stdout, "  {\"field\": \"m_nRemotePort\", \"size\": %d, \"align\": %d}", sizeof(p_P2PSessionState_t->m_nRemotePort), alignof(p_P2PSessionState_t->m_nRemotePort));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(P2PSessionState_t), alignof(P2PSessionState_t));
    std::fprintf(stdout, "}\n");
  }
  // InputAnalogActionData_t
  { std::fprintf(stdout, ",\"InputAnalogActionData_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct InputAnalogActionData_t    *p_InputAnalogActionData_t = 0;
      std::fprintf(stdout, "  {\"field\": \"eMode\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputAnalogActionData_t->eMode), alignof(p_InputAnalogActionData_t->eMode));
      std::fprintf(stdout, "  {\"field\": \"x\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputAnalogActionData_t->x), alignof(p_InputAnalogActionData_t->x));
      std::fprintf(stdout, "  {\"field\": \"y\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputAnalogActionData_t->y), alignof(p_InputAnalogActionData_t->y));
      std::fprintf(stdout, "  {\"field\": \"bActive\", \"size\": %d, \"align\": %d}", sizeof(p_InputAnalogActionData_t->bActive), alignof(p_InputAnalogActionData_t->bActive));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(InputAnalogActionData_t), alignof(InputAnalogActionData_t));
    std::fprintf(stdout, "}\n");
  }
  // InputDigitalActionData_t
  { std::fprintf(stdout, ",\"InputDigitalActionData_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct InputDigitalActionData_t    *p_InputDigitalActionData_t = 0;
      std::fprintf(stdout, "  {\"field\": \"bState\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputDigitalActionData_t->bState), alignof(p_InputDigitalActionData_t->bState));
      std::fprintf(stdout, "  {\"field\": \"bActive\", \"size\": %d, \"align\": %d}", sizeof(p_InputDigitalActionData_t->bActive), alignof(p_InputDigitalActionData_t->bActive));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(InputDigitalActionData_t), alignof(InputDigitalActionData_t));
    std::fprintf(stdout, "}\n");
  }
  // InputMotionData_t
  { std::fprintf(stdout, ",\"InputMotionData_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct InputMotionData_t    *p_InputMotionData_t = 0;
      std::fprintf(stdout, "  {\"field\": \"rotQuatX\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionData_t->rotQuatX), alignof(p_InputMotionData_t->rotQuatX));
      std::fprintf(stdout, "  {\"field\": \"rotQuatY\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionData_t->rotQuatY), alignof(p_InputMotionData_t->rotQuatY));
      std::fprintf(stdout, "  {\"field\": \"rotQuatZ\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionData_t->rotQuatZ), alignof(p_InputMotionData_t->rotQuatZ));
      std::fprintf(stdout, "  {\"field\": \"rotQuatW\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionData_t->rotQuatW), alignof(p_InputMotionData_t->rotQuatW));
      std::fprintf(stdout, "  {\"field\": \"posAccelX\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionData_t->posAccelX), alignof(p_InputMotionData_t->posAccelX));
      std::fprintf(stdout, "  {\"field\": \"posAccelY\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionData_t->posAccelY), alignof(p_InputMotionData_t->posAccelY));
      std::fprintf(stdout, "  {\"field\": \"posAccelZ\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionData_t->posAccelZ), alignof(p_InputMotionData_t->posAccelZ));
      std::fprintf(stdout, "  {\"field\": \"rotVelX\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionData_t->rotVelX), alignof(p_InputMotionData_t->rotVelX));
      std::fprintf(stdout, "  {\"field\": \"rotVelY\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionData_t->rotVelY), alignof(p_InputMotionData_t->rotVelY));
      std::fprintf(stdout, "  {\"field\": \"rotVelZ\", \"size\": %d, \"align\": %d}", sizeof(p_InputMotionData_t->rotVelZ), alignof(p_InputMotionData_t->rotVelZ));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(InputMotionData_t), alignof(InputMotionData_t));
    std::fprintf(stdout, "}\n");
  }
  // InputMotionDataV2_t
  { std::fprintf(stdout, ",\"InputMotionDataV2_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct InputMotionDataV2_t    *p_InputMotionDataV2_t = 0;
      std::fprintf(stdout, "  {\"field\": \"driftCorrectedQuatX\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->driftCorrectedQuatX), alignof(p_InputMotionDataV2_t->driftCorrectedQuatX));
      std::fprintf(stdout, "  {\"field\": \"driftCorrectedQuatY\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->driftCorrectedQuatY), alignof(p_InputMotionDataV2_t->driftCorrectedQuatY));
      std::fprintf(stdout, "  {\"field\": \"driftCorrectedQuatZ\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->driftCorrectedQuatZ), alignof(p_InputMotionDataV2_t->driftCorrectedQuatZ));
      std::fprintf(stdout, "  {\"field\": \"driftCorrectedQuatW\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->driftCorrectedQuatW), alignof(p_InputMotionDataV2_t->driftCorrectedQuatW));
      std::fprintf(stdout, "  {\"field\": \"sensorFusionQuatX\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->sensorFusionQuatX), alignof(p_InputMotionDataV2_t->sensorFusionQuatX));
      std::fprintf(stdout, "  {\"field\": \"sensorFusionQuatY\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->sensorFusionQuatY), alignof(p_InputMotionDataV2_t->sensorFusionQuatY));
      std::fprintf(stdout, "  {\"field\": \"sensorFusionQuatZ\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->sensorFusionQuatZ), alignof(p_InputMotionDataV2_t->sensorFusionQuatZ));
      std::fprintf(stdout, "  {\"field\": \"sensorFusionQuatW\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->sensorFusionQuatW), alignof(p_InputMotionDataV2_t->sensorFusionQuatW));
      std::fprintf(stdout, "  {\"field\": \"deferredSensorFusionQuatX\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->deferredSensorFusionQuatX), alignof(p_InputMotionDataV2_t->deferredSensorFusionQuatX));
      std::fprintf(stdout, "  {\"field\": \"deferredSensorFusionQuatY\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->deferredSensorFusionQuatY), alignof(p_InputMotionDataV2_t->deferredSensorFusionQuatY));
      std::fprintf(stdout, "  {\"field\": \"deferredSensorFusionQuatZ\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->deferredSensorFusionQuatZ), alignof(p_InputMotionDataV2_t->deferredSensorFusionQuatZ));
      std::fprintf(stdout, "  {\"field\": \"deferredSensorFusionQuatW\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->deferredSensorFusionQuatW), alignof(p_InputMotionDataV2_t->deferredSensorFusionQuatW));
      std::fprintf(stdout, "  {\"field\": \"gravityX\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->gravityX), alignof(p_InputMotionDataV2_t->gravityX));
      std::fprintf(stdout, "  {\"field\": \"gravityY\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->gravityY), alignof(p_InputMotionDataV2_t->gravityY));
      std::fprintf(stdout, "  {\"field\": \"gravityZ\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->gravityZ), alignof(p_InputMotionDataV2_t->gravityZ));
      std::fprintf(stdout, "  {\"field\": \"degreesPerSecondX\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->degreesPerSecondX), alignof(p_InputMotionDataV2_t->degreesPerSecondX));
      std::fprintf(stdout, "  {\"field\": \"degreesPerSecondY\", \"size\": %d, \"align\": %d},\n", sizeof(p_InputMotionDataV2_t->degreesPerSecondY), alignof(p_InputMotionDataV2_t->degreesPerSecondY));
      std::fprintf(stdout, "  {\"field\": \"degreesPerSecondZ\", \"size\": %d, \"align\": %d}", sizeof(p_InputMotionDataV2_t->degreesPerSecondZ), alignof(p_InputMotionDataV2_t->degreesPerSecondZ));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(InputMotionDataV2_t), alignof(InputMotionDataV2_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamInputActionEvent_t
  { std::fprintf(stdout, ",\"SteamInputActionEvent_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamInputActionEvent_t    *p_SteamInputActionEvent_t = 0;
      std::fprintf(stdout, "  {\"field\": \"controllerHandle\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputActionEvent_t->controllerHandle), alignof(p_SteamInputActionEvent_t->controllerHandle));
      std::fprintf(stdout, "  {\"field\": \"eEventType\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamInputActionEvent_t->eEventType), alignof(p_SteamInputActionEvent_t->eEventType));
      std::fprintf(stdout, "  {\"field\": \"analogAction\", \"size\": %d, \"align\": %d}", sizeof(p_SteamInputActionEvent_t->analogAction), alignof(p_SteamInputActionEvent_t->analogAction));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamInputActionEvent_t), alignof(SteamInputActionEvent_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamUGCDetails_t
  { std::fprintf(stdout, ",\"SteamUGCDetails_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamUGCDetails_t    *p_SteamUGCDetails_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_nPublishedFileId\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_nPublishedFileId), alignof(p_SteamUGCDetails_t->m_nPublishedFileId));
      std::fprintf(stdout, "  {\"field\": \"m_eResult\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_eResult), alignof(p_SteamUGCDetails_t->m_eResult));
      std::fprintf(stdout, "  {\"field\": \"m_eFileType\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_eFileType), alignof(p_SteamUGCDetails_t->m_eFileType));
      std::fprintf(stdout, "  {\"field\": \"m_nCreatorAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_nCreatorAppID), alignof(p_SteamUGCDetails_t->m_nCreatorAppID));
      std::fprintf(stdout, "  {\"field\": \"m_nConsumerAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_nConsumerAppID), alignof(p_SteamUGCDetails_t->m_nConsumerAppID));
      std::fprintf(stdout, "  {\"field\": \"m_rgchTitle\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_rgchTitle), alignof(p_SteamUGCDetails_t->m_rgchTitle));
      std::fprintf(stdout, "  {\"field\": \"m_rgchDescription\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_rgchDescription), alignof(p_SteamUGCDetails_t->m_rgchDescription));
      std::fprintf(stdout, "  {\"field\": \"m_ulSteamIDOwner\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_ulSteamIDOwner), alignof(p_SteamUGCDetails_t->m_ulSteamIDOwner));
      std::fprintf(stdout, "  {\"field\": \"m_rtimeCreated\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_rtimeCreated), alignof(p_SteamUGCDetails_t->m_rtimeCreated));
      std::fprintf(stdout, "  {\"field\": \"m_rtimeUpdated\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_rtimeUpdated), alignof(p_SteamUGCDetails_t->m_rtimeUpdated));
      std::fprintf(stdout, "  {\"field\": \"m_rtimeAddedToUserList\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_rtimeAddedToUserList), alignof(p_SteamUGCDetails_t->m_rtimeAddedToUserList));
      std::fprintf(stdout, "  {\"field\": \"m_eVisibility\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_eVisibility), alignof(p_SteamUGCDetails_t->m_eVisibility));
      std::fprintf(stdout, "  {\"field\": \"m_bBanned\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_bBanned), alignof(p_SteamUGCDetails_t->m_bBanned));
      std::fprintf(stdout, "  {\"field\": \"m_bAcceptedForUse\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_bAcceptedForUse), alignof(p_SteamUGCDetails_t->m_bAcceptedForUse));
      std::fprintf(stdout, "  {\"field\": \"m_bTagsTruncated\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_bTagsTruncated), alignof(p_SteamUGCDetails_t->m_bTagsTruncated));
      std::fprintf(stdout, "  {\"field\": \"m_rgchTags\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_rgchTags), alignof(p_SteamUGCDetails_t->m_rgchTags));
      std::fprintf(stdout, "  {\"field\": \"m_hFile\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_hFile), alignof(p_SteamUGCDetails_t->m_hFile));
      std::fprintf(stdout, "  {\"field\": \"m_hPreviewFile\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_hPreviewFile), alignof(p_SteamUGCDetails_t->m_hPreviewFile));
      std::fprintf(stdout, "  {\"field\": \"m_pchFileName\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_pchFileName), alignof(p_SteamUGCDetails_t->m_pchFileName));
      std::fprintf(stdout, "  {\"field\": \"m_nFileSize\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_nFileSize), alignof(p_SteamUGCDetails_t->m_nFileSize));
      std::fprintf(stdout, "  {\"field\": \"m_nPreviewFileSize\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_nPreviewFileSize), alignof(p_SteamUGCDetails_t->m_nPreviewFileSize));
      std::fprintf(stdout, "  {\"field\": \"m_rgchURL\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_rgchURL), alignof(p_SteamUGCDetails_t->m_rgchURL));
      std::fprintf(stdout, "  {\"field\": \"m_unVotesUp\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_unVotesUp), alignof(p_SteamUGCDetails_t->m_unVotesUp));
      std::fprintf(stdout, "  {\"field\": \"m_unVotesDown\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_unVotesDown), alignof(p_SteamUGCDetails_t->m_unVotesDown));
      std::fprintf(stdout, "  {\"field\": \"m_flScore\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamUGCDetails_t->m_flScore), alignof(p_SteamUGCDetails_t->m_flScore));
      std::fprintf(stdout, "  {\"field\": \"m_unNumChildren\", \"size\": %d, \"align\": %d}", sizeof(p_SteamUGCDetails_t->m_unNumChildren), alignof(p_SteamUGCDetails_t->m_unNumChildren));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamUGCDetails_t), alignof(SteamUGCDetails_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamItemDetails_t
  { std::fprintf(stdout, ",\"SteamItemDetails_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamItemDetails_t    *p_SteamItemDetails_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_itemId\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamItemDetails_t->m_itemId), alignof(p_SteamItemDetails_t->m_itemId));
      std::fprintf(stdout, "  {\"field\": \"m_iDefinition\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamItemDetails_t->m_iDefinition), alignof(p_SteamItemDetails_t->m_iDefinition));
      std::fprintf(stdout, "  {\"field\": \"m_unQuantity\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamItemDetails_t->m_unQuantity), alignof(p_SteamItemDetails_t->m_unQuantity));
      std::fprintf(stdout, "  {\"field\": \"m_unFlags\", \"size\": %d, \"align\": %d}", sizeof(p_SteamItemDetails_t->m_unFlags), alignof(p_SteamItemDetails_t->m_unFlags));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamItemDetails_t), alignof(SteamItemDetails_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetworkingIPAddr
  { std::fprintf(stdout, ",\"SteamNetworkingIPAddr\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetworkingIPAddr    *p_SteamNetworkingIPAddr = 0;
      std::fprintf(stdout, "  {\"field\": \"m_ipv6\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingIPAddr->m_ipv6), alignof(p_SteamNetworkingIPAddr->m_ipv6));
      std::fprintf(stdout, "  {\"field\": \"m_port\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetworkingIPAddr->m_port), alignof(p_SteamNetworkingIPAddr->m_port));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetworkingIPAddr), alignof(SteamNetworkingIPAddr));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetworkingIdentity
  { std::fprintf(stdout, ",\"SteamNetworkingIdentity\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetworkingIdentity    *p_SteamNetworkingIdentity = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eType\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingIdentity->m_eType), alignof(p_SteamNetworkingIdentity->m_eType));
      std::fprintf(stdout, "  {\"field\": \"m_cbSize\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingIdentity->m_cbSize), alignof(p_SteamNetworkingIdentity->m_cbSize));
      std::fprintf(stdout, "  {\"field\": \"m_szUnknownRawString\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetworkingIdentity->m_szUnknownRawString), alignof(p_SteamNetworkingIdentity->m_szUnknownRawString));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetworkingIdentity), alignof(SteamNetworkingIdentity));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetConnectionInfo_t
  { std::fprintf(stdout, ",\"SteamNetConnectionInfo_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetConnectionInfo_t    *p_SteamNetConnectionInfo_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_identityRemote\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_identityRemote), alignof(p_SteamNetConnectionInfo_t->m_identityRemote));
      std::fprintf(stdout, "  {\"field\": \"m_nUserData\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_nUserData), alignof(p_SteamNetConnectionInfo_t->m_nUserData));
      std::fprintf(stdout, "  {\"field\": \"m_hListenSocket\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_hListenSocket), alignof(p_SteamNetConnectionInfo_t->m_hListenSocket));
      std::fprintf(stdout, "  {\"field\": \"m_addrRemote\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_addrRemote), alignof(p_SteamNetConnectionInfo_t->m_addrRemote));
      std::fprintf(stdout, "  {\"field\": \"m__pad1\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m__pad1), alignof(p_SteamNetConnectionInfo_t->m__pad1));
      std::fprintf(stdout, "  {\"field\": \"m_idPOPRemote\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_idPOPRemote), alignof(p_SteamNetConnectionInfo_t->m_idPOPRemote));
      std::fprintf(stdout, "  {\"field\": \"m_idPOPRelay\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_idPOPRelay), alignof(p_SteamNetConnectionInfo_t->m_idPOPRelay));
      std::fprintf(stdout, "  {\"field\": \"m_eState\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_eState), alignof(p_SteamNetConnectionInfo_t->m_eState));
      std::fprintf(stdout, "  {\"field\": \"m_eEndReason\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_eEndReason), alignof(p_SteamNetConnectionInfo_t->m_eEndReason));
      std::fprintf(stdout, "  {\"field\": \"m_szEndDebug\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_szEndDebug), alignof(p_SteamNetConnectionInfo_t->m_szEndDebug));
      std::fprintf(stdout, "  {\"field\": \"m_szConnectionDescription\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_szConnectionDescription), alignof(p_SteamNetConnectionInfo_t->m_szConnectionDescription));
      std::fprintf(stdout, "  {\"field\": \"m_nFlags\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionInfo_t->m_nFlags), alignof(p_SteamNetConnectionInfo_t->m_nFlags));
      std::fprintf(stdout, "  {\"field\": \"reserved\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetConnectionInfo_t->reserved), alignof(p_SteamNetConnectionInfo_t->reserved));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetConnectionInfo_t), alignof(SteamNetConnectionInfo_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetConnectionRealTimeStatus_t
  { std::fprintf(stdout, ",\"SteamNetConnectionRealTimeStatus_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetConnectionRealTimeStatus_t    *p_SteamNetConnectionRealTimeStatus_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eState\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_eState), alignof(p_SteamNetConnectionRealTimeStatus_t->m_eState));
      std::fprintf(stdout, "  {\"field\": \"m_nPing\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_nPing), alignof(p_SteamNetConnectionRealTimeStatus_t->m_nPing));
      std::fprintf(stdout, "  {\"field\": \"m_flConnectionQualityLocal\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_flConnectionQualityLocal), alignof(p_SteamNetConnectionRealTimeStatus_t->m_flConnectionQualityLocal));
      std::fprintf(stdout, "  {\"field\": \"m_flConnectionQualityRemote\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_flConnectionQualityRemote), alignof(p_SteamNetConnectionRealTimeStatus_t->m_flConnectionQualityRemote));
      std::fprintf(stdout, "  {\"field\": \"m_flOutPacketsPerSec\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_flOutPacketsPerSec), alignof(p_SteamNetConnectionRealTimeStatus_t->m_flOutPacketsPerSec));
      std::fprintf(stdout, "  {\"field\": \"m_flOutBytesPerSec\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_flOutBytesPerSec), alignof(p_SteamNetConnectionRealTimeStatus_t->m_flOutBytesPerSec));
      std::fprintf(stdout, "  {\"field\": \"m_flInPacketsPerSec\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_flInPacketsPerSec), alignof(p_SteamNetConnectionRealTimeStatus_t->m_flInPacketsPerSec));
      std::fprintf(stdout, "  {\"field\": \"m_flInBytesPerSec\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_flInBytesPerSec), alignof(p_SteamNetConnectionRealTimeStatus_t->m_flInBytesPerSec));
      std::fprintf(stdout, "  {\"field\": \"m_nSendRateBytesPerSecond\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_nSendRateBytesPerSecond), alignof(p_SteamNetConnectionRealTimeStatus_t->m_nSendRateBytesPerSecond));
      std::fprintf(stdout, "  {\"field\": \"m_cbPendingUnreliable\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_cbPendingUnreliable), alignof(p_SteamNetConnectionRealTimeStatus_t->m_cbPendingUnreliable));
      std::fprintf(stdout, "  {\"field\": \"m_cbPendingReliable\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_cbPendingReliable), alignof(p_SteamNetConnectionRealTimeStatus_t->m_cbPendingReliable));
      std::fprintf(stdout, "  {\"field\": \"m_cbSentUnackedReliable\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_cbSentUnackedReliable), alignof(p_SteamNetConnectionRealTimeStatus_t->m_cbSentUnackedReliable));
      std::fprintf(stdout, "  {\"field\": \"m_usecQueueTime\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeStatus_t->m_usecQueueTime), alignof(p_SteamNetConnectionRealTimeStatus_t->m_usecQueueTime));
      std::fprintf(stdout, "  {\"field\": \"reserved\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetConnectionRealTimeStatus_t->reserved), alignof(p_SteamNetConnectionRealTimeStatus_t->reserved));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetConnectionRealTimeStatus_t), alignof(SteamNetConnectionRealTimeStatus_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetConnectionRealTimeLaneStatus_t
  { std::fprintf(stdout, ",\"SteamNetConnectionRealTimeLaneStatus_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetConnectionRealTimeLaneStatus_t    *p_SteamNetConnectionRealTimeLaneStatus_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_cbPendingUnreliable\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeLaneStatus_t->m_cbPendingUnreliable), alignof(p_SteamNetConnectionRealTimeLaneStatus_t->m_cbPendingUnreliable));
      std::fprintf(stdout, "  {\"field\": \"m_cbPendingReliable\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeLaneStatus_t->m_cbPendingReliable), alignof(p_SteamNetConnectionRealTimeLaneStatus_t->m_cbPendingReliable));
      std::fprintf(stdout, "  {\"field\": \"m_cbSentUnackedReliable\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeLaneStatus_t->m_cbSentUnackedReliable), alignof(p_SteamNetConnectionRealTimeLaneStatus_t->m_cbSentUnackedReliable));
      std::fprintf(stdout, "  {\"field\": \"_reservePad1\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeLaneStatus_t->_reservePad1), alignof(p_SteamNetConnectionRealTimeLaneStatus_t->_reservePad1));
      std::fprintf(stdout, "  {\"field\": \"m_usecQueueTime\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetConnectionRealTimeLaneStatus_t->m_usecQueueTime), alignof(p_SteamNetConnectionRealTimeLaneStatus_t->m_usecQueueTime));
      std::fprintf(stdout, "  {\"field\": \"reserved\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetConnectionRealTimeLaneStatus_t->reserved), alignof(p_SteamNetConnectionRealTimeLaneStatus_t->reserved));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetConnectionRealTimeLaneStatus_t), alignof(SteamNetConnectionRealTimeLaneStatus_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetworkingMessage_t
  { std::fprintf(stdout, ",\"SteamNetworkingMessage_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetworkingMessage_t    *p_SteamNetworkingMessage_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_pData\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_pData), alignof(p_SteamNetworkingMessage_t->m_pData));
      std::fprintf(stdout, "  {\"field\": \"m_cbSize\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_cbSize), alignof(p_SteamNetworkingMessage_t->m_cbSize));
      std::fprintf(stdout, "  {\"field\": \"m_conn\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_conn), alignof(p_SteamNetworkingMessage_t->m_conn));
      std::fprintf(stdout, "  {\"field\": \"m_identityPeer\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_identityPeer), alignof(p_SteamNetworkingMessage_t->m_identityPeer));
      std::fprintf(stdout, "  {\"field\": \"m_nConnUserData\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_nConnUserData), alignof(p_SteamNetworkingMessage_t->m_nConnUserData));
      std::fprintf(stdout, "  {\"field\": \"m_usecTimeReceived\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_usecTimeReceived), alignof(p_SteamNetworkingMessage_t->m_usecTimeReceived));
      std::fprintf(stdout, "  {\"field\": \"m_nMessageNumber\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_nMessageNumber), alignof(p_SteamNetworkingMessage_t->m_nMessageNumber));
      std::fprintf(stdout, "  {\"field\": \"m_pfnFreeData\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_pfnFreeData), alignof(p_SteamNetworkingMessage_t->m_pfnFreeData));
      std::fprintf(stdout, "  {\"field\": \"m_pfnRelease\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_pfnRelease), alignof(p_SteamNetworkingMessage_t->m_pfnRelease));
      std::fprintf(stdout, "  {\"field\": \"m_nChannel\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_nChannel), alignof(p_SteamNetworkingMessage_t->m_nChannel));
      std::fprintf(stdout, "  {\"field\": \"m_nFlags\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_nFlags), alignof(p_SteamNetworkingMessage_t->m_nFlags));
      std::fprintf(stdout, "  {\"field\": \"m_nUserData\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_nUserData), alignof(p_SteamNetworkingMessage_t->m_nUserData));
      std::fprintf(stdout, "  {\"field\": \"m_idxLane\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingMessage_t->m_idxLane), alignof(p_SteamNetworkingMessage_t->m_idxLane));
      std::fprintf(stdout, "  {\"field\": \"_pad1__\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetworkingMessage_t->_pad1__), alignof(p_SteamNetworkingMessage_t->_pad1__));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetworkingMessage_t), alignof(SteamNetworkingMessage_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetworkPingLocation_t
  { std::fprintf(stdout, ",\"SteamNetworkPingLocation_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetworkPingLocation_t    *p_SteamNetworkPingLocation_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_data\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetworkPingLocation_t->m_data), alignof(p_SteamNetworkPingLocation_t->m_data));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetworkPingLocation_t), alignof(SteamNetworkPingLocation_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamNetworkingConfigValue_t
  { std::fprintf(stdout, ",\"SteamNetworkingConfigValue_t\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamNetworkingConfigValue_t    *p_SteamNetworkingConfigValue_t = 0;
      std::fprintf(stdout, "  {\"field\": \"m_eValue\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingConfigValue_t->m_eValue), alignof(p_SteamNetworkingConfigValue_t->m_eValue));
      std::fprintf(stdout, "  {\"field\": \"m_eDataType\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamNetworkingConfigValue_t->m_eDataType), alignof(p_SteamNetworkingConfigValue_t->m_eDataType));
      std::fprintf(stdout, "  {\"field\": \"m_int64\", \"size\": %d, \"align\": %d}", sizeof(p_SteamNetworkingConfigValue_t->m_int64), alignof(p_SteamNetworkingConfigValue_t->m_int64));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamNetworkingConfigValue_t), alignof(SteamNetworkingConfigValue_t));
    std::fprintf(stdout, "}\n");
  }
  // SteamDatagramHostedAddress
  { std::fprintf(stdout, ",\"SteamDatagramHostedAddress\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamDatagramHostedAddress    *p_SteamDatagramHostedAddress = 0;
      std::fprintf(stdout, "  {\"field\": \"m_cbSize\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamDatagramHostedAddress->m_cbSize), alignof(p_SteamDatagramHostedAddress->m_cbSize));
      std::fprintf(stdout, "  {\"field\": \"m_data\", \"size\": %d, \"align\": %d}", sizeof(p_SteamDatagramHostedAddress->m_data), alignof(p_SteamDatagramHostedAddress->m_data));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamDatagramHostedAddress), alignof(SteamDatagramHostedAddress));
    std::fprintf(stdout, "}\n");
  }
  // SteamDatagramGameCoordinatorServerLogin
  { std::fprintf(stdout, ",\"SteamDatagramGameCoordinatorServerLogin\": {");
    { std::fprintf(stdout, "\"fields\": [");
      struct SteamDatagramGameCoordinatorServerLogin    *p_SteamDatagramGameCoordinatorServerLogin = 0;
      std::fprintf(stdout, "  {\"field\": \"m_identity\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamDatagramGameCoordinatorServerLogin->m_identity), alignof(p_SteamDatagramGameCoordinatorServerLogin->m_identity));
      std::fprintf(stdout, "  {\"field\": \"m_routing\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamDatagramGameCoordinatorServerLogin->m_routing), alignof(p_SteamDatagramGameCoordinatorServerLogin->m_routing));
      std::fprintf(stdout, "  {\"field\": \"m_nAppID\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamDatagramGameCoordinatorServerLogin->m_nAppID), alignof(p_SteamDatagramGameCoordinatorServerLogin->m_nAppID));
      std::fprintf(stdout, "  {\"field\": \"m_rtime\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamDatagramGameCoordinatorServerLogin->m_rtime), alignof(p_SteamDatagramGameCoordinatorServerLogin->m_rtime));
      std::fprintf(stdout, "  {\"field\": \"m_cbAppData\", \"size\": %d, \"align\": %d},\n", sizeof(p_SteamDatagramGameCoordinatorServerLogin->m_cbAppData), alignof(p_SteamDatagramGameCoordinatorServerLogin->m_cbAppData));
      std::fprintf(stdout, "  {\"field\": \"m_appData\", \"size\": %d, \"align\": %d}", sizeof(p_SteamDatagramGameCoordinatorServerLogin->m_appData), alignof(p_SteamDatagramGameCoordinatorServerLogin->m_appData));
      std::fprintf(stdout, "],\n");
    }
    std::fprintf(stdout, "  \"size\": %d, \"align\": %d \n", sizeof(SteamDatagramGameCoordinatorServerLogin), alignof(SteamDatagramGameCoordinatorServerLogin));
    std::fprintf(stdout, "}\n");
  }
  std::fprintf(stdout, "}\n");
  return 0;
}